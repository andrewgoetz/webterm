** Notes **

- add directions for opening up terminal either at beginning, end, or both.
- cover sudo somewhere
- root


-----------------

content:

- pwd
- ls
- cd

- mkdir
- touch
- rm

- cp
- mv



** The terminal **

What is it?
The terminal is an interface in which you can type and execute text based commands that tell the computer what to do.

Why use it?
It is often much faster to complete some tasks using a terminal than with graphical applications and menus you are most likely familiar with. Another benefit is that the terminal provides access to broader, more advanced funcitonality via commands and scripts. For example, a common terminal task of installing an application can be achieved within a single command, compared to navigating through the file system and clicking through prompts.

With the terminal you are in control, telling the computer what to do, and this becomes very powerful.

type 'next' to continue



** commands **

In order to tell a computer exactly what to do, we provide instructions in the form of commands. Commands are pre-defined words and letters that help you do common tasks quicker and more efficiently. To run a command simply type the command into the terminal and press enter. Commands are typically made up of the utility, an argument, and a flag, where the argument and flag are optional.

Here is the syntax for a command: utility [flag] [argument]

Flags (or parameters) are additional options and settings that can be passed to the utility and allow for greater flexibility and functionality.

Arguments are used when the utility needs to know exactly what you want for a certain action, such as a file or folder. The following is an example of a command:

$ ls -l User/Desktop

This command uses the ls utility to list the contents of directories. The -l flag indicates that we want it to list in long format, and we pass in the directory as an argument to list the contents of. This command is saying, "Show me the contents, in long format, of the Desktop directory that is inside of the User directory.""



** filesystem **

In a computer, a filesystem, also seen as file system, is the way in which files are named and where they are placed logically for storage and retrieval. Files are placed into directories, also called folders in Windows, and organized into a hierarchical tree structure. The words directory and folder may be used interchangeably. Documents, Music, and Photo directories are commonly found in a filesystem, and which might help you to better think of it. We can use the terminal to quickly traverse the file system, accessing and interacting with files and directories.



** Let's get started **

We now know enough to get started. When you open up your terminal it is like the equivalent of opening up your user directory and seeing a listing files and folders. There will be a line of text showing your location in the filesystem and at the end of the line will be a $. This indicates that the rest of the line is a command, and there will be a cursor, known as the prompt, waiting for input from us in the shape of commands.



** pwd **

You may be able to tell where you are in the filesystem based on the current output before the $, but sometimes you need something more explicit. If you are ever wondering just where you are in the filesystem type 'pwd', which stands for Present Working Directory. 'pwd' will output the path of the current working directory, showing you just where you are in the filesystem.

pwd
/home/whereyouare

try typing 'pwd' to see where you are in your file system



** ls **

Now that we know where we are, let's see what files and folders are living in our current directory. Type 'ls', which is short for list. It will list out the content of your present working directory. In fact most commands will execute in your current location unless another is given as an argument.

Flags
'-l'
the 'l' flag will list the contents in a long form, which is often cleaner and easier to read. It will also show permissions, which will not be covered here, but can read up on here: https://www.linux.com/learn/tutorials/309527-understanding-linux-file-permissions

type 'ls -l' to see the diffence in long format.



** cd **

Now we know where we are *and* what exists there, but now we want to go somewhere else. To traverse the filesystem and 'Change Directory' we use 'cd'. Rather than clicking through folders to get to a particular location, we issue a 'cd' command. 'cd' is a very useful command that will save you lots of time. 'cd' simply takes a filepath as an argument and that's where it will take you. If you submit 'cd' without an argument, it will take you to the user root directory. A root directory contains all other directories and files.

usage: cd <filepath>
example: cd /home/documents
if documents exists, this will put you in the documents folder, which resides in the home folder. if the filepath given does is incorrect or doesn't exist you will stay put.
if successful, 'pwd' should now say '/home/documents'

try 'cd /home/documents' and then 'pwd' when you're. When you're ready type 'next' to learn more about filepath.




** filepath **


	** absolute **

	In the previous section when we passed the filepath '/home/documents', it was known as an absolute filepath. An absolute filepath means we know exactly where it lives in our file system and are typing the full path. Get comfortable with using 'cd' with absolute paths, and when you're ready type 'next' to move on to relative paths.


	** relative **

	Relative paths list the filepath relative to the current location, or present working directory. To use a relative path we use '..' This simply means go up one level in the file system. If our pwd is '/home/documents/coolstuff' and we type 'cd ..' our pwd will become '/home/documents'. We can even go one step further with this. For example, if our pwd is '/home/documents/coolstuff' and we want to get to '/home/documents/radstuff' we can type 'cd ../radstuff' to do so. This means go back to 'documents' and look for 'radstuff', if 'radstuff' is found, take me to it. Once this all sinks in relative path will probably become more common use to you.

	Mess around with 'cd' and relative paths for a bit and when you're ready type 'next' to move on to the next section, 'mkdir'.



// EDITED TO HERE



** mkdir **

So now that we know how to traverse the file system and show files, we need to know how to do the common everyday tasks of creating, moving, and deleting files and folders.

Lets start with creating a folder. The command for creating a folder is 'mkdir'. It stands for make directory. It takes a folder name as an argument.

usage: mkdir <folder name>
example: mkdir myNewFolder
This will create an empty folder called myNewFolder in your pwd, as long as it doesn't already exist.
Try creating a folder of your own. Type 'next' when you have done so.



** touch **

'cd' to your new folder, and we'll add a new file to it.
the command for this is 'touch' which takes a file name as an argument. Touch eliminates the unnecessary steps of actually opening a file, saving it, and closing it. Starting to see the value of the terminal?!

usage: touch <file name>
example: touch myNewFile.txt
This will create a file called myNewFile.txt in your pwd.
Once you've created at least once file of your own, type 'next' to move on to deleting files.



** rm **

Sometimes a file or folder is no longer needed, and we want to delete them.
The 'rm' command, short for remove, will do that for us. Be careful with this command because it will not prompt you if you are sure. It will instantly remove the file or folder, and if it's a folder, all of it's contents, which could be many more files and folders.

usage: rm <folder/file path>
let's start with removing a file, since folders require an extra step
example: rm myFile.txt
This will delete myFile.txt from the file system.



flags

-r stands for recursive (you should be prompted if you're sure)
this flag is required to remove a folder. it tells the computer to remove the folder, including all of its contents
usage: rm -r <folder/file path>
example: rm -r myFolder
you will be prompted if you are sure you want to delete the folder along with its contents.
if yest, myFolder has been deleted, along with all of the files and folders inside of it


-f stands for force
this will force the delete without being prompted

-rf will be recursive and forced
USE WITH CAUTION
example: rm -rf myFolder
Bye bye myFolder!





utility / helper commands


clear

if at any time your window gets too full or cluttered, type 'clear' and it will do just that.


history (up/down key)

tab complete

help / man

links to other commands