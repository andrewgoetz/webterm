function dirSearchFiles(e,t){for(var r=0;r<t.length;r++)if(e===t[r].name)return!0}function getFile(e,t){for(var r=0;r<t.length;r++)if(e===t[r].name)return t[r]}function tabFull(e){for(var t,r,n,o,i,a,s=[],l="",m=e.length-1;"/"!==e.charAt(m);)l=e.charAt(m)+l,e=e.substr(0,m),m--;t=e,e=e.substr(0,m),r=pathStringToObject(e),null!==r&&"object"==typeof r&&(a=Object.keys(r));for(i in a)a[i].substring(0,l.length)===l&&s.push(a[i]);o=r.files;for(n in o)o[n].name.substring(0,l.length)===l&&s.push(o[n].name);return[s,t]}function tabRelative(e){var t,r,n=[],o=Object.keys(pwd[1]),i=pwd[1].files;for(t in o)o[t].substring(0,e.length)===e&&n.push(o[t]);for(r in i)i[r].name.substring(0,e.length)===e&&n.push(i[r].name);return n}function getPreDirectory(e){for(var t,r,n=e,o="",i=n.length-1;"/"!==n.charAt(i);)o=n.charAt(i)+o,n=n.substr(0,i),i--;return t=n,n=n.substr(0,i),r=pathStringToObject(n),[r,o,t]}function getDirectory(e){var t=pwd[2]+"/"+e,r=pathStringToObject(t);return r}function index(e,t,r){return"string"==typeof t?index(e,t.split("."),r):1===t.length&&void 0!==r?e[t[0]]=r:0===t.length?e:index(e[t[0]],t.slice(1),r)}function replaceAll(e,t,r){return r.replace(new RegExp(e,"g"),t)}function pathStringToObject(e){for(var t,r=replaceAll("/",".",e);"."===r.charAt(0);)r=r.substr(1);return t=index(terminal.fs,r)}function addToHistory(e){terminal.settings.hist.slice(-1)!=e&&(terminal.settings.hist.push(e),terminal.userSettings.hist=terminal.settings.hist,terminal.save.settings())}function tab(e){9===e.keyCode&&e.preventDefault()}function textEditor(e){88===e.keyCode&&e.ctrlKey&&terminal.editor.prompting===!1&&terminal.editor.showPrompt(),89===e.keyCode&&e.ctrlKey&&terminal.editor.prompting===!0&&terminal.editor.exit(!0),78===e.keyCode&&e.ctrlKey&&terminal.editor.prompting===!0&&terminal.editor.exit(),67===e.keyCode&&e.ctrlKey&&terminal.editor.prompting===!0&&terminal.editor.hidePrompt()}function saveItemToLocalStorage(e,t){localStorage.setItem(t,JSON.stringify(e))}function getItemFromLocalStorage(e){var t,r;return localStorage.getItem(e)&&(r=localStorage.getItem(e),t=JSON.parse(r)),t}function removeItemFromLocalStorage(e){localStorage.removeItem(e)}function setCommandLineFocus(){input.focus()}function scrollToBottom(){window.scroll(0,1e4)}function checkCommand(e){function t(e,t){var r=this;a.innerHTML+=outputHTML,r(e,t),scrollToBottom(),addToHistory(o)}function r(){a.innerHTML+=outputHTML,setTimeout(scrollToBottom,0),addToHistory(o)}function n(e){-1==commands.indexOf(e)?(r(),a.innerHTML+="<p style='color:"+termtheme.text+"'>No command '"+e+"' found. Type 'help' for a list of commands.</p>"):(r(),a.innerHTML+="<p style='color:"+termtheme.text+"'>Try '"+e+" -help' for information on proper usage</p>")}var o=input.value.toLowerCase(),i=o.length,a=document.getElementById("output");if(commandArgs=o.split(" "),outputHTML="<p style='color:"+termtheme.text+"'><span style='color:"+termtheme.commandLine+"'>WebTerm:"+pwd[0]+" "+terminal.settings.user+"$ </span>"+o+"</p>",input.size=i>0?i+1:1,9===e.keyCode&&terminal.tabComplete(),38===e.keyCode&&terminal.up(),40===e.keyCode&&terminal.down(),13===e.keyCode){if(2===commandArgs.length){if("-help"!=commandArgs[1]&&"--help"!=commandArgs[1]&&"-h"!=commandArgs[1])switch(commandArgs[0]){case"mkdir":t.apply(terminal.mkdir);break;case"touch":t.apply(terminal.touch);break;case"history":t.apply(terminal.history.arg,[commandArgs[1]]);break;case"signin":t.apply(terminal.signin);break;case"theme":t.apply(terminal.theme.defaultCase);break;case"rm":t.apply(terminal.rm.defaultCase);break;case"echo":t.apply(terminal.echo);break;case"ls":t.apply(terminal.ls.l);break;case"cd":t.apply(terminal.cd);break;case"editor":t.apply(terminal.editor.run,[commandArgs[1]]),window.scroll(0,0);break;case"cat":t.apply(terminal.cat,[commandArgs[1]]);break;case"man":t.apply(terminal.man,[commandArgs[1]]);break;default:n(commandArgs[0])}switch(commandArgs[1]){case"--help":case"-help":case"-h":t.apply(terminal.help.info)}}else if(commandArgs.length>2){if("mv"!=commandArgs[0]&&"cp"!=commandArgs[0]&&"grep"!=commandArgs[0])switch(commandArgs[0]+" "+commandArgs[1]){case"youtube -s":t.apply(terminal.youtube.check);break;case"rm -r":t.apply(terminal.rm.r);break;case"theme -set":t.apply(terminal.theme.set,[commandArgs[2]]);break;default:n(commandArgs[0])}"mv"===commandArgs[0]&&t.apply(terminal.mv),"grep"===commandArgs[0]&&t.apply(terminal.grep,[commandArgs[1],commandArgs[2]]),commandArgs[0]+" "+commandArgs[1]=="cp -r"?t.apply(terminal.cp.r):"cp"===commandArgs[0]&&t.apply(terminal.cp.defaultCase)}else switch(o){case"help":t.apply(terminal.help.list);break;case"signout":t.apply(terminal.signout);break;case"version":t.apply(terminal.version);break;case"history":t.apply(terminal.history.defaultCase);break;case"pwd":t.apply(terminal.pwd);break;case"cd":pwd=["~",terminal.fs.home.user,"/home/user"],commandLine.innerHTML="WebTerm:"+pwd[0]+" "+terminal.settings.user+"$ ";break;case"ls":t.apply(terminal.ls.defaultCase);break;case"github":t.apply(terminal.github);break;case"clear":t.apply(terminal.clear);break;case"youtube":t.apply(terminal.youtube.check);break;case"date":t.apply(terminal.date);break;case"editor":t.apply(terminal.editor.run),window.scroll(0,0);break;case"tutorial":tutorial.on||t.apply(terminal.tutorial.launch);break;case"next":tutorial.on&&tutorial.stageArray.indexOf(tutorial.currentStage)!=tutorial.stageArray.length-1&&tutorial.next();break;case"prev":tutorial.on&&0!=tutorial.stageArray.indexOf(tutorial.currentStage)&&tutorial.previous();break;case"exit":tutorial.on&&terminal.tutorial.exit();break;default:n(o)}input.value="",input.size=1,count=0}}helpList={tutorial:{name:"tutorial",info:"Launch the tutorial. Type 'exit' to quit tutorial when launched."},touch:{name:"touch",info:"Create a new file in the present working directory<br>touch [file]<br>ex. touch mydocument.txt"},clear:{name:"clear",info:"Clear the terminal output<br>clear"},editor:{name:"editor",info:"Open the built in text editor<br>editor<br>Open the provided file in the text editor<br>editor [file]<br>ex. editor readme.txt"},signin:{name:"signin",info:"Sign in the provided user<br>signin [userName]<br>ex. signin rt"},signout:{name:"signout",info:"Signout the currently signed in user<br>signout"},version:{name:"version",info:"Output the version of the Web Terminal<br>version"},echo:{name:"echo",info:"Output the provided string<br>echo [string]<br>ex. echo Hello"},date:{name:"date",info:"Output the current date, time, and timezone<br>date"},rm:{name:"rm",info:"Remove the provided file<br>rm [file]<br>ex. rm readme.txt<br>Remove the provided directory<br>rm -r [directory]<br>ex. rm -r documents"},history:{name:"history",info:"Output a list of previously entered commands<br>history<br><br>Output a number of previously entered commands<br>history [number]</br>ex. 'history 5' will list history items 1-5<br><br>Clear the list of previously entered commands</br>history -c"},cd:{name:"cd",info:"Change the present working directory<br>cd<br>cd ..<br>cd [directory]<br>ex. cd Documents<br>ex. cd /home/user/Documents"},ls:{name:"ls",info:"Output a list of the files and directories in the present working directory<br>ls<br>Output in long format<br>ls -l"},theme:{name:"theme",info:"Change the color scheme of the Web Terminal<br>theme [theme]<br>ex. theme white<br>Output a list of available themes<br>theme -l"},help:{name:"help",info:"Provides a list of available commands, and information on the Web Terminal<br>help"},youtube:{name:"youtube",info:"Open a new tab in your browser to youtube.com<br>youtube<br>Search youtube.com with the provided search query<br>youtube -s [query]<br>ex. youtube -s funny cats"},pwd:{name:"pwd",info:"Output the present working directory<br>pwd"},mkdir:{name:"mkdir",info:"Create a new directory in the present working directory<br>mkdir [directory]<br>ex. mkdir Pictures"},cp:{name:"cp",info:"Copy a file<br>cp [file] [destination]<br>ex. cp readme.txt /home/user/desktop<br>cp [file] [newName]<br>ex. cp readme.txt readme2.txt<br>Copy a directory<br>cp -r [directory] [destination]<br>ex. cp -r downloads desktop"},mv:{name:"mv",info:"Move (cut and paste) a file or directory<br>mv [file] [destination]<br>ex. mv readme.txt /home/user/desktop<br>mv [directory] [destination]<br>ex. mv Documents /home/user/Desktop"},cat:{name:"cat",info:"The 'cat' utility reads files and writes them to the standard output.<br>cat [file]<br>ex. cat readme.txt"},man:{name:"man",info:"Man is a verbose form of help.<br>man [command]<br>man help"},grep:{name:"grep",info:"Grep is a search tool.<br>grep [search term] [file]<br>grep foo bar.txt"}},terminal={fs:{home:{user:{desktop:{files:[{name:"abc.txt",shortname:"abc",content:"I am content",created:"",modified:""},{name:"urmum.txt",shortname:"urmum",content:"I have content",created:"",modified:""}]},downloads:{files:[{name:"example.txt",shortname:"example",content:"I am content",created:"",modified:""},{name:"document.txt",shortname:"document",content:"I am content",created:"",modified:""},{name:"another.txt",shortname:"another",content:"I am content",created:"",modified:""}]},documents:{files:[]},files:[{name:"readme.txt",shortname:"readme",content:"I am content",extension:".md",created:"",modified:""}]},bin:{files:[]},files:[]}},userSettings:{hist:[],user:"user",lastLogin:"",themeDefault:"black"},settings:{hist:[],user:"user",lastLogin:"",themeDefault:"black"},ver:"0.6",termthemes:{old:{background:"#2E312C",text:"#9DCE91",file:"Gray",folder:"SlateBlue",commandLine:"#FFF"},white:{background:"#FFF",text:"#000",file:"#999",folder:"Green",commandLine:"#000080"},black:{background:"#222",text:"#F9F9F9",file:"#AAA",folder:"#659EF9",commandLine:"#8BFA7F"}},commandLine:document.getElementById("commandLine"),init:function(){var e,t=new Date,r=t.toString();getItemFromLocalStorage("signin")?(getItemFromLocalStorage("fs")&&(terminal.fs=getItemFromLocalStorage("fs"),pwd[1]=terminal.fs.home.user),getItemFromLocalStorage("settings")&&(terminal.userSettings=getItemFromLocalStorage("settings"),termtheme=terminal.termthemes[terminal.userSettings.themeDefault],terminal.theme.updateDom(),terminal.settings.hist=terminal.userSettings.hist,e=terminal.userSettings.lastLogin,terminal.userSettings.lastLogin=r),output.innerHTML="<p style='color:"+termtheme.text+" '>Welcome back "+terminal.userSettings.user+". Last login "+e+".",terminal.save.settings()):(output.innerHTML="<p style='color:"+termtheme.text+" '>Welcome to the terminal on the web. Type help for a list of commands.",terminal.settings.lastLogin=r,terminal.theme.updateDom()),input.addEventListener("keyup",checkCommand,!1),input.addEventListener("keydown",tab,!1),document.getElementsByTagName("body")[0].addEventListener("click",setCommandLineFocus,!1),terminal.editor.textArea.addEventListener("keyup",textEditor,!1)},File:function(e,t,r){this.name=e,this.shortname=t,this.content=r,this.created=new Date,this.modified=new Date},help:{list:function(){for(var e="",t=0;t<commands.length;t++)e+="<p style='color:"+termtheme.text+"'>"+commands[t]+"</p>";output.innerHTML+=e},info:function(){var e=commandArgs[0];output.innerHTML+=-1!=commands.indexOf(e)?"<p style='color:"+termtheme.text+"'>"+helpList[e].info+"</p>":"<p style='color:"+termtheme.text+"'>No command '"+e+"' found. Type 'help' for a list of commands.</p>"}},man:function(){var e=commandArgs[1];output.innerHTML+=-1!=commands.indexOf(e)?"<p style='color:"+termtheme.text+"'>"+helpList[e].info+"</p>":"<p style='color:"+termtheme.text+"'>No command '"+e+"' found. Type 'help' for a list of commands.</p>"},clear:function(){output.innerHTML=""},date:function(){output.innerHTML+="<p style='color:"+termtheme.text+"'>"+new Date+"</p>"},echo:function(){var e=commandArgs.slice(1).join(" ");output.innerHTML+="<p style='color:"+termtheme.text+"'>"+e+"</p>"},theme:{defaultCase:function(){var e,t=commandArgs.slice(1).join(" "),r=Object.keys(terminal.termthemes),n=r.join(", ");if("-l"!=t)switch(t){case"old":termtheme=terminal.termthemes.old,terminal.theme.updateDom();break;case"black":termtheme=terminal.termthemes.black,terminal.theme.updateDom();break;case"white":termtheme=terminal.termthemes.white,terminal.theme.updateDom();break;default:output.innerHTML+="<p style='color:"+termtheme.text+"'>theme: There is no such theme. themes available: "+n+"</p>"}else{e="";for(t in r)e+="<p style='color:"+termtheme.text+"'>",e+=r[t],e+="</p>";output.innerHTML+=e}},updateDom:function(){var e,t,r,n;for(document.body.style.background=termtheme.background,input.style.color=termtheme.text,input.style.background=termtheme.background,commandLine.style.color=termtheme.commandLine,t=output.childNodes,r=0;r<t.length;r++)t[r].style.color=termtheme.text;for(e=document.querySelectorAll("#output > p > span"),n=0;n<e.length;n++)e[n].style.color=termtheme.commandLine},set:function(e){terminal.settings.themeDefault=e,terminal.userSettings.themeDefault=e,termtheme=terminal.termthemes[e],output.innerHTML+="<p style='color:"+termtheme.text+"'>Default theme set to "+e+".</p>",terminal.theme.updateDom(),terminal.save.settings()}},signin:function(){var e=commandArgs.slice(1).join(" ");terminal.settings.user=e,terminal.userSettings.user=e,commandLine.innerHTML="WebTerm:"+pwd[0]+" "+terminal.settings.user+"$ ",terminal.save.settings(),saveItemToLocalStorage(e,"signin")},signout:function(){terminal.settings.user="user",commandLine.innerHTML="WebTerm:"+pwd[0]+" "+terminal.settings.user+"$ ",removeItemFromLocalStorage("signin")},history:{defaultCase:function(){var e,t=1,r=terminal.settings.hist;for(e in r)output.innerHTML+="<p style='color:"+termtheme.text+"'>"+t+"  "+r[e]+"</p>",t++},arg:function(){var e=commandArgs[1],t=terminal.settings.hist,r=t.length,n=[];if("-c"===e)terminal.settings.hist=[];else if(isNaN(e))output.innerHTML+="<p style='color:"+termtheme.text+"'>history: No such option. For information on proper usage, enter 'history -help'</p>";else{for(e>t.length&&(e=t.length);r>t.length-e;)n.unshift("<p style='color:"+termtheme.text+"'>"+r+"  "+t[r-1]+"</p>"),r--;for(item in n)output.innerHTML+=n[item]}}},version:function(){output.innerHTML+="<p style='color:"+termtheme.text+"'>WebTerm version "+terminal.ver+"</p>"},mkdir:function(){var e,t,r,n,o=commandArgs[1];"/"===o[0]?(e=getPreDirectory(o),n=e[0],t=e[1],r=e[2],null!==n&&"object"==typeof n?n.hasOwnProperty(t)?output.innerHTML+="<p style='color:"+termtheme.text+"'>mkdir: cannot create '"+t+"': Directory already exists in '"+r+"'</p>":(n[t]={files:[]},output.innerHTML+="<p style='color:"+termtheme.text+"'>Directory called '"+t+"' successfully created.</p>",terminal.save.fs()):output.innerHTML+="<p style='color:"+termtheme.text+"'>mkdir: cannot create '"+t+"': Destination directory '"+r+"' does not exist</p>"):pwd[1].hasOwnProperty(o)?output.innerHTML+="<p style='color:"+termtheme.text+"'>mkdir: cannot create '"+o+"': Directory already exists</p>":(pwd[1][o]={files:[]},output.innerHTML+="<p style='color:"+termtheme.text+"'>Directory called '"+o+"' successfully created.</p>",terminal.save.fs())},cd:function(){var e,t,r,n,o=commandArgs.slice(1).join(" ");if(".."==o){for(t=pwd[2],n=t.length-1;"/"!==t.charAt(n);)t=t.substr(0,n),n--;t=t.substr(0,n),e=pathStringToObject(t),void 0!==e&&(pwd=[t,e,t],commandLine.innerHTML="WebTerm:"+pwd[0]+" "+terminal.settings.user+"$ ")}else pwd[1].hasOwnProperty(o)?(r=pwd[2]+"/"+o,e=pathStringToObject(r),pwd=[r,e,r],commandLine.innerHTML="WebTerm:"+pwd[0]+" "+terminal.settings.user+"$ "):(e=pathStringToObject(o),void 0!==e?(pwd=[o,e,o],commandLine.innerHTML="WebTerm:"+pwd[0]+" "+terminal.settings.user+"$ "):output.innerHTML+="<p style='color:"+termtheme.text+"'>cd: No such directory</p>")},youtube:{check:function(){switch(commandArgs[1]){case"-s":terminal.youtube.s();break;default:terminal.youtube.defaultCase()}},defaultCase:function(){window.open("http://www.youtube.com","_blank")},s:function(){var e,t,r="https://www.youtube.com/results?search_query=",n="";for(t=2;t<commandArgs.length;t++)n+=commandArgs[t]+"%20";n=n.slice(0,-3),""!==n?(e=r+n,window.open(e,"_blank")):output.innerHTML+="<p style='color:"+termtheme.text+"'>Please indicate a search query.</p>"}},github:function(){window.open("https://github.com/rtd2/webterm","_blank")},pwd:function(){output.innerHTML+="<p style='color:"+termtheme.text+"'>"+pwd[2]+"</p>"},ls:{defaultCase:function(){var e,t,r="",n=Object.keys(pwd[1]),o=pwd[1].files;for(e in n)"files"!==n[e]&&(r+="<p class='folder' style='color:"+termtheme.folder+"'>"+n[e]+"</p>");for(t in o)r+="<p class='file' style='color:"+termtheme.file+"'>"+o[t].name+"</p>";output.innerHTML+=r,""===r&&(output.innerHTML+="<p style='color:"+termtheme.text+"'>ls: The current directory is empty</p>")},l:function(){var e,t,r,n,o,i=commandArgs.slice(1).join(" ");if("-l"===i){e="",t=Object.keys(pwd[1]),r=pwd[1].files;for(n in t)"files"!==t[n]&&(e+="<p class='folder' style='display: block; color:"+termtheme.folder+"'>"+t[n]+"</p>");for(o in r)e+="<p class='file' style='display: block; color:"+termtheme.file+"'>"+r[o].name+"</p>";output.innerHTML+=e}else output.innerHTML+="<p style='color:"+termtheme.text+"'>ls: invalid option '"+i+"'</p><p style='color:"+termtheme.text+"'>Try 'ls --help' for more information.</p>"}},rm:{defaultCase:function(){var e,t,r,n,o,i,a,s=commandArgs[1];"/"===s[0]?(returns=getPreDirectory(s),t=returns[0],r=returns[1],n=returns[2],null!==t&&"object"==typeof t?(i=t.files,e=dirSearchFiles(r,i),e?(o=getFile(r,t),a=i.indexOf(o),i.splice(a,1),terminal.save.fs()):output.innerHTML+="<p style='color:"+termtheme.text+"'>rm: cannot delete '"+r+"': File does not exist</p>"):output.innerHTML+="<p style='color:"+termtheme.text+"'>rm: cannot delete '"+r+"': Directory '"+n+"' does not exist</p>"):(i=pwd[1].files,r=getFile(s,i),null!==r&&"object"==typeof r?(a=i.indexOf(r),i.splice(a,1),terminal.save.fs()):output.innerHTML+="<p style='color:"+termtheme.text+"'>rm: cannot remove '"+s+"': File does not exist</p>")},r:function(){var e,t,r,n,o,i,a=commandArgs[2];"/"===a[0]?(o=getPreDirectory(a),t=o[0],r=o[1],n=o[2],null!==t&&"object"==typeof t?(e=Object.keys(t),t.hasOwnProperty(r)?(delete t[r],terminal.save.fs()):output.innerHTML+="<p style='color:"+termtheme.text+"'>rm: cannot remove '"+r+"': No such directory</p>"):output.innerHTML+="<p style='color:"+termtheme.text+"'>rm: cannot delete '"+r+"': Directory '"+n+"' does not exist</p>"):(i=Object.keys(pwd[1]),-1!=i.indexOf(a)?(delete pwd[1][a],terminal.save.fs()):output.innerHTML+="<p style='color:"+termtheme.text+"'>rm: cannot remove '"+a+"': No such directory</p>")}},mv:function(){var e,t,r,n,o,i,a,s,l,m,c,d,u,p,h=commandArgs[1],y=commandArgs[2],g=!1;h!==y?("/"===h[0]?(e=getPreDirectory(h),t=e[0],r=e[1],n=e[2],null!==t&&"object"==typeof t?(a=t.files,dirSearchFiles(r,a)?o=getFile(r,a):t.hasOwnProperty(r)?i=t[r]:(g=!0,output.innerHTML+="<p style='color:"+termtheme.text+"'>mv: cannot move '"+r+"': No such file or directory</p>")):(g=!0,output.innerHTML+="<p style='color:"+termtheme.text+"'>mv: cannot move '"+r+"': No such file or directory</p>")):(t=pwd[1],r=h,n=pwd[2],a=t.files,dirSearchFiles(r,a)?o=getFile(r,a):t.hasOwnProperty(r)?i=t[r]:(g=!0,output.innerHTML+="<p style='color:"+termtheme.text+"'>mv: cannot move '"+r+"': No such file or directory</p>")),"/"===y[0]&&g===!1?(s=getPreDirectory(y),l=s[0],m=s[1],c=s[2],dest=pathStringToObject(y),null!==dest&&"object"==typeof dest?(d=dest.files,dirSearchFiles(r,d)?output.innerHTML+="<p style='color:"+termtheme.text+"'>mv: cannot move '"+r+"': File with the same name already exists in destination directory</p>":dest.hasOwnProperty(r)?output.innerHTML+="<p style='color:"+termtheme.text+"'>mv: cannot move '"+r+"': Directory with the same name already exists in destination directory</p>":void 0===o&&"object"==typeof i?(dest[r]=i,delete t[r],terminal.save.fs()):"object"==typeof o&&void 0===i&&(u=a.indexOf(o),p=JSON.parse(JSON.stringify(o)),a.splice(u,1),d.push(p),terminal.save.fs())):null!==l&&"object"==typeof l?dirSearchFiles(m,l.files)?output.innerHTML+="<p style='color:"+termtheme.text+"'>mv: cannot move '"+r+"': File with the same name already exists in destination directory</p>":l.hasOwnProperty(m)?output.innerHTML+="<p style='color:"+termtheme.text+"'>mv: cannot move '"+r+"': Directory with the same name already exists in destination directory</p>":void 0===o&&"object"==typeof i?(l[m]=i,delete t[r],terminal.save.fs()):"object"==typeof o&&void 0===i&&(u=a.indexOf(o),p=JSON.parse(JSON.stringify(o)),p.name=m,p.shortname=m,p.created=new Date,p.modified=new Date,a.splice(u,1),l.files.push(p),terminal.save.fs()):output.innerHTML+="<p style='color:"+termtheme.text+"'>mv: cannot move '"+r+"': Destination directory '"+y+"' does not exist</p>"):g===!1&&(l=getDirectory(y),m=y,c=pwd[2],null!==l&&"object"==typeof l?(d=l.files,dirSearchFiles(r,d)?output.innerHTML+="<p style='color:"+termtheme.text+"'>mv: cannot move '"+r+"': File with the same name already exists in destination directory</p>":l.hasOwnProperty(r)?output.innerHTML+="<p style='color:"+termtheme.text+"'>mv: cannot move '"+r+"': Directory with the same name already exists in destination directory</p>":void 0===o&&"object"==typeof i?(l[r]=i,delete t[r],terminal.save.fs()):"object"==typeof o&&void 0===i&&(u=a.indexOf(o),p=JSON.parse(JSON.stringify(o)),a.splice(u,1),d.push(p),terminal.save.fs())):void 0===o&&"object"==typeof i?(pwd[1][m]=i,delete t[r],terminal.save.fs()):"object"==typeof o&&void 0===i&&(u=a.indexOf(o),p=JSON.parse(JSON.stringify(o)),p.name=m,p.shortname=m,p.created=new Date,p.modified=new Date,a.splice(u,1),d.push(p),terminal.save.fs()))):output.innerHTML+="<p style='color:"+termtheme.text+"'>mv: cannot move '"+h+"' to a subdirectory of itself"},cp:{defaultCase:function(){var e,t,r,n,o,i,a,s,l,m,c,d=commandArgs[1],u=commandArgs[2];"/"===d[0]?(i=getPreDirectory(d),n=i[0],o=i[1],r=i[2],null!==n&&"object"==typeof n?(srcFiles=n.files,dirSearchFiles(o,srcFiles)?(n=getFile(o,srcFiles),e=JSON.parse(JSON.stringify(n))):output.innerHTML+="<p style='color:"+termtheme.text+"'>cp: cannot copy '"+o+"': File does not exist</p>"):output.innerHTML+="<p style='color:"+termtheme.text+"'>cp: cannot copy '"+o+"': Directory '"+r+"' does not exist</p>"):(srcFiles=pwd[1].files,o=d,dirSearchFiles(d,srcFiles)?(t=getFile(d,srcFiles),e=JSON.parse(JSON.stringify(t))):output.innerHTML+="<p style='color:"+termtheme.text+"'>cp: cannot copy '"+d+"': No such file</p>"),"/"===u[0]?(c=pathStringToObject(u),m=getPreDirectory(u),s=m[0],l=m[1],a=m[2],s.hasOwnProperty(l)?(destFiles=c.files,dirSearchFiles(o,destFiles)?output.innerHTML+="<p style='color:"+termtheme.text+"'>cp: cannot copy '"+o+"': File '"+o+"' already exists in destination directory</p>":(destFiles.push(e),terminal.save.fs())):dirSearchFiles(l,s.files)?output.innerHTML+="<p style='color:"+termtheme.text+"'>cp: cannot copy '"+o+"': File '"+o+"' already exists in '"+a+"'</p>":null!==s&&"object"==typeof s?(e.name=l,e.shortname=l,e.created=new Date,e.modified=new Date,s.files.push(e),terminal.save.fs()):output.innerHTML+="<p style='color:"+termtheme.text+"'>cp: cannot copy '"+o+"': Directory '"+a+"' does not exist</p>"):d!==u?(e.name=u,e.shortname=u,e.created=new Date,e.modified=new Date,destFiles=pwd[1].files,destFiles.push(e),terminal.save.fs()):output.innerHTML+="<p style='color:"+termtheme.text+"'>cp: cannot copy '"+d+"': New file must have a different name</p>"},r:function(){var e,t,r,n,o,i,a,s,l,m,c=commandArgs[2],d=commandArgs[3],u=!1;"/"===c[0]?(e=getPreDirectory(c),t=e[0],r=e[1],n=e[2],null!==t&&"object"==typeof t&&t.hasOwnProperty(r)?o=t[r]:(u=!0,output.innerHTML+="<p style='color:"+termtheme.text+"'>cp: cannot copy '"+r+"': No such directory</p>")):(t=pwd[1],r=c,n=pwd[2],t.hasOwnProperty(r)?o=t[r]:(u=!0,output.innerHTML+="<p style='color:"+termtheme.text+"'>cp: cannot copy '"+r+"': No such directory</p>")),"/"===d[0]&&u===!1?(i=getPreDirectory(d),a=i[0],s=i[1],l=i[2],m=pathStringToObject(d),null!==m&&"object"==typeof m?m.hasOwnProperty(r)?output.innerHTML+="<p style='color:"+termtheme.text+"'>cp: cannot copy '"+r+"': Directory with the same name already exists in destination directory</p>":"object"==typeof o&&(m[r]=o,terminal.save.fs()):null!==a&&"object"==typeof a?a.hasOwnProperty(s)?output.innerHTML+="<p style='color:"+termtheme.text+"'>cp: cannot copy '"+r+"': Directory with the same name already exists in destination directory</p>":"object"==typeof o&&(a[s]=o,terminal.save.fs()):output.innerHTML+="<p style='color:"+termtheme.text+"'>cp: cannot copy '"+r+"': Destination directory '"+d+"' does not exist</p>"):u===!1&&(a=getDirectory(d),preDestObject=getPreDirectory(pwd[2]),s=d,l=pwd[2],console.log(a),console.log(preDestObject),null!==a&&"object"==typeof a?a.hasOwnProperty(r)?output.innerHTML+="<p style='color:"+termtheme.text+"'>cp: cannot copy '"+r+"': Directory with the same name already exists in destination directory</p>":"object"==typeof o&&(a[r]=o,terminal.save.fs()):null!==preDestObject[0]&&"object"==typeof preDestObject[0]&&(pwd[1][s]=o,terminal.save.fs()))}},touch:function(){var e,t,r,n,o,i,a,s=commandArgs.slice(1).join(" ");"/"===s[0]?(r=getPreDirectory(s),n=r[0],o=r[1],i=r[2],null!==n&&"object"==typeof n?(e=n.files,t=dirSearchFiles(o,e),t?output.innerHTML+="<p style='color:"+termtheme.text+"'>touch: cannot create file '"+o+"': File already exists in '"+i+"'</p>":(a=new terminal.File(o,o," "),e.push(a),output.innerHTML+="<p style='color:"+termtheme.text+"'>File called '"+o+"' successfully created in '"+i+"'</p>",terminal.save.fs())):output.innerHTML+="<p style='color:"+termtheme.text+"'>touch: cannot create file '"+o+"': Destination directory '"+i+"' does not exist</p>"):(e=pwd[1].files,t=dirSearchFiles(s,e),t===!0?output.innerHTML+="<p style='color:"+termtheme.text+"'>touch: cannot create file '"+s+"': File already exists</p>":(a=new terminal.File(s,s," "),e.push(a),output.innerHTML+="<p style='color:"+termtheme.text+"'>File called '"+s+"' successfully created.</p>",terminal.save.fs()))},up:function(){0===count&&(histindex=terminal.settings.hist.length),count<=terminal.settings.hist.length-1&&(histindex--,input.size=terminal.settings.hist[histindex].length+1,input.value=terminal.settings.hist[histindex],count++)},down:function(){count>1?(histindex++,input.size=terminal.settings.hist[histindex].length+1,input.value=terminal.settings.hist[histindex],count--):(input.value="",input.size=1,count=0)},tabComplete:function(){var e,t,r,n=[],o=input.value,i=o.split(" ");if(o.length>0)if(1===i.length){for(r in commands)commands[r].substring(0,o.length)===o&&n.push(commands[r]);void 0!==n[0]&&void 0===n[1]&&(input.value=n[0],input.size=n[0].length+1)}else 2===i.length?"/"===i[1][0]?(t=tabFull(i[1]),n=t[0],e=t[1],void 0!==n[0]&&"files"!==n[0]&&void 0===n[1]&&(input.value=i[0]+" "+e+n[0],input.size=input.value.length+1)):(n=tabRelative(i[1]),void 0!==n[0]&&"files"!==n[0]&&void 0===n[1]&&(input.value=i[0]+" "+n[0],input.size=input.value.length+1)):3===i.length?"/"===i[2][0]?(t=tabFull(i[2]),n=t[0],e=t[1],void 0!==n[0]&&"files"!==n[0]&&void 0===n[1]&&(input.value=i[0]+" "+i[1]+" "+e+n[0],input.size=input.value.length+1)):(n=tabRelative(i[2]),void 0!==n[0]&&"files"!==n[0]&&void 0===n[1]&&(input.value=i[0]+" "+i[1]+" "+n[0],input.size=input.value.length+1)):"/"===i[3][0]?(t=tabFull(i[3]),n=t[0],e=t[1],void 0!==n[0]&&"files"!==n[0]&&void 0===n[1]&&(input.value=i[0]+" "+i[1]+" "+i[2]+" "+e+n[0],input.size=input.value.length+1)):(n=tabRelative(i[3]),void 0!==n[0]&&"files"!==n[0]&&void 0===n[1]&&(input.value=i[0]+" "+i[1]+" "+i[2]+" "+n[0],input.size=input.value.length+1))},cat:function(e){function t(t,o){n=dirSearchFiles(t,o),n?(r=getFile(t,o),output.innerHTML+="<pre class='cat-output' style='color:"+termtheme.text+"; background:"+termtheme.background+"'>"+r.content+"</pre>"):output.innerHTML+="<p style='color:"+termtheme.text+"'>"+e+" does not exist.</p>"}var r,n,o,i,a,s;"/"===e[0]?(o=getPreDirectory(e),a=o[0],i=o[1],s=o[2],null!==a&&"object"==typeof a&&t(i,a.files)):t(e,pwd[1].files)},grep:function(e,t){var r,n,o,i,a,s,l,m;if(l=dirSearchFiles(t,pwd[1].files))if((e.indexOf(0)&&"'"===e.indexOf(-1)||e.indexOf(0)&&'"'===e.indexOf(-1))&&(e=e.substr(1,-1)),m=getFile(t,pwd[1].files),r=m.content,n=r.indexOf(e),-1===n)output.innerHTML+="<p style='color:"+termtheme.text+"'>"+e+" not found in "+t+".</p>";else for(i=r.split("\n"),o=0;o<i.length;o++)a=i[o],s=a.indexOf(e),s>-1&&(output.innerHTML+="<p style='color:"+termtheme.text+"'>"+a+"</p>");else output.innerHTML+="<p style='color:"+termtheme.text+"'>File "+t+" not found.</p>"},editor:{editor:document.getElementById("editor"),textArea:document.getElementById("editorText"),footer:document.getElementById("editorFooter"),footerNav:document.getElementById("footerNav"),highlight:document.getElementsByClassName("highlight"),header:document.getElementById("editorHeader"),savePrompt:document.getElementById("savePrompt"),consoleDomOutputStore:void 0,prompting:!1,currentFile:void 0,run:function(e){var t,r,n,o,i;for(document.getElementsByTagName("body")[0].removeEventListener("click",setCommandLineFocus,!1),terminal.editor.consoleDomOutputStore=output.innerHTML,terminal.clear(),e?(terminal.editor.header.innerHTML=e,t=e,r=pwd[1].files,n=getFile(t,r),terminal.editor.currentFile=n,terminal.editor.textArea.value=n.content):terminal.editor.header.innerHTML="new buffer",terminal.editor.editor.style.color=termtheme.text,terminal.editor.editor.style.background=termtheme.background,terminal.editor.header.style.color=termtheme.background,terminal.editor.header.style.background=termtheme.text,terminal.editor.textArea.style.color=termtheme.text,terminal.editor.textArea.style.background=termtheme.background,terminal.editor.footer.style.borderColor=termtheme.text,terminal.editor.footerNav.style.color=termtheme.text,terminal.editor.savePrompt.style.color=termtheme.background,terminal.editor.savePrompt.style.background=termtheme.text,i=0;i<terminal.editor.highlight.length;i++)o=terminal.editor.highlight[i],o.style.color=termtheme.background,o.style.background=termtheme.text;terminal.editor.editor.style.display="inline",terminal.editor.textArea.focus()},save:function(e){var t=terminal.editor.currentFile,r=terminal.editor.textArea.value;if(t)t.content=r,terminal.save.fs();else{var n=e.slice(0,e.indexOf(".")),o=terminal.editor.textArea.value;newFile=new terminal.File(e,n,o),terminal.fs.home.user.files.push(newFile),terminal.save.fs()}},changePrompt:function(){terminal.editor.savePrompt.innerHTML="File Name to Write: new buffer"},hidePrompt:function(){terminal.editor.savePrompt.style.display="none",terminal.editor.prompting=!1},showPrompt:function(){terminal.editor.prompting=!0,terminal.editor.savePrompt.style.display="inline",terminal.editor.footerNav.innerHTML="<li><span class='highlight'>^Y :</span> Yes</li><li><span class='highlight'>^N :</span> No</li><li><span class='highlight'>^C :</span> Cancel</li>";for(var e=0;e<terminal.editor.highlight.length;e++)item=terminal.editor.highlight[e],item.style.color=termtheme.background,item.style.background=termtheme.text},resetEditor:function(){document.getElementsByTagName("body")[0].addEventListener("click",setCommandLineFocus,!1),terminal.editor.editor.style.display="none",terminal.editor.savePrompt.style.display="none",terminal.editor.textArea.value="",terminal.editor.footerNav.innerHTML="<li><span class='highlight'>^X :</span> Save / Exit</li>",terminal.editor.prompting=!1,terminal.editor.currentFile=void 0,terminal.commandLine.focus()},exit:function(e){var t=terminal.editor.header.innerHTML;"new buffer"===t&&terminal.editor.changePrompt(),e&&(terminal.editor.save(t),terminal.editor.resetEditor()),e||terminal.editor.resetEditor(),output.innerHTML=terminal.editor.consoleDomOutputStore,input.focus()}},save:{settings:function(){saveItemToLocalStorage(terminal.userSettings,"settings")},fs:function(){saveItemToLocalStorage(terminal.fs,"fs")},tutorial:function(){saveItemToLocalStorage(tutorial.currentStage,"tutorial")}},tutorial:{launch:function(){terminal.clear(),
tutorial.stageArray=tutorial.stageArrayInit(),document.getElementsByTagName("body")[0].style.margin="1em",document.getElementById("tutorial").style.display="block",tutorial.current(),tutorial.on=!0},exit:function(){terminal.clear(),document.getElementById("tutorial").style.display="none",document.getElementsByTagName("body")[0].style.margin="0.5em",tutorial.on=!1}}};var tutorial={on:!1,stages:{one:{title:"Introduction",substage:"<span id='substage'>1.1: The Terminal</span>",content:"What is it?<br>The terminal is an interface for typing and executing text based commands.<br>Why use it?<br>It is often much faster to complete some tasks using a Terminal than with a graphical interface.<br>The terminal also provides access to broader, more advanced functionality via commands and scripts.<br/>Type '<span id='advice-command'>next</span>' then press enter and we'll get started.",advice:"",command:"next",completed:!1},two:{title:"The Basics",substage:"<span id='substage'>1.2: Commands</span>",content:"In order to tell a computer exactly what to do, we provide instructions in the form of commands. Commands are typed into the terminal and sent with the enter key. Throughout this tutorial we'll go over a variety of the more common commmands.<br/>Type '<span id='advice-command'>next</span>' then press enter and we'll move on to your first command.",advice:"",command:"next",completed:!1},three:{title:"The Working Directory",substage:"<span id='substage'>2.1: pwd</span>",content:"'pwd' stands for 'Print Working Directory', and is used to output the path of the current directory, also known as the working directory. It will show you where you are in the file system. In Windows or Mac OS, this is the equivalent of having a window open to a particular folder, like documents, or Pictures.<br/>Type and submit the command '<span id='advice-command'>pwd</span>' to see where we are in your file system.",advice:"Submit a command by pressing the 'enter' key.",command:"pwd",completed:!1},four:{title:"The Working Directory",substage:"<span id='substage'>2.2: cd I</span>",content:"'cd' stands for 'Change Directory', and is used to traverse your file system. This is the equivalent of clicking through your finder/file explorer windows. So rather than clicking from your particular user folder, into the documents folder, we issue a 'change directory' command.<br>Type and submit the command '<span id='advice-command'>cd /home/user/documents</span>' to change your working directory to 'documents', or more specifically '/home/user/documents'",advice:"'The words 'directory' and 'folder' may be used interchangeably throughout this tutorial. 'Folder' is more common in a Windows environment, whereas 'directory' is a bit of an older term, used since the early days of filesystems.",command:"cd",completed:!1},five:{title:"The Working Directory",substage:"<span id='substage'>2.3: Paths I</span>",content:"As with the previous example, many commands will require that we provide a 'path' that describes the particular location of a file or folder. In the previous example, the folder 'documents' existed within the folder 'user', which was inside another folder called 'home', the command was 'cd /home/user/documents' to change our 'working directory' to '/home/user/documents'. '/home/user/documents' is called a 'full', or 'absolute path'. It describes the exact location of 'documents', including all those folders that come before it in the filesystem.<br/>Submit the command '<span id='advice-command'>next</span>' when you're ready to move on.",advice:"There is another type of 'path', called a 'relative path'. Any ideas how this other type of 'path' might look? We'll revisit 'paths' later in the tutorial.",command:"pwd",completed:!1},six:{title:"The Working Directory",substage:"<span id='substage'>2.4: ls I</span>",content:"Now that we've covered the terminal basics 'working directory', 'change directory', and 'paths', we can move on to actually interacting with the contents of a directory. Because the terminal is text based, simply viewing the contents of a folder requires that we submit a command. The command 'ls' stands for 'list', and will allow us to check out the contents of your 'working directory'.<br/>Submit the command '<span id='advice-command'>ls</span>' to list the contents of your 'working directory'.",advice:"The command 'ls -l' will provide a long-form list. Putting each entry on its own line.",command:"ls",completed:!1},seven:{title:"The Working Directory",substage:"<span id='substage'>2.5: ls II</span>",content:"<br/>Submit the command '<span id='advice-command'>ls -l /home/user/desktop</span>' to list the contents of the directory 'desktop'.",advice:"",command:"ls /home/user/desktop",completed:!1},eight:{title:"Basic Commands: Making files and directories",substage:"<span id='substage'>3.1: mkdir</span>",content:"Let's try creating a folder. The command 'mkdir' stands for 'make directory'. This command will make a directory with the provided name within your 'working directory'<br>Submit the command <span id='advice-command'>mkdir newFolder</span>' to create a directory called 'newFolder'.",advice:"The option also exists to create a directory by providing 'mkdir' an 'absolute path', like so: 'mkdir /home/user/documents/newFolder'. That command would also create a directory called 'newFolder' in 'documents'.",command:"mkdir newFolder",completed:!1},nine:{title:"Basic Commands: Making Files and Directories",substage:"<span id='substage'>3.2: touch</span>",content:"So how about creating files? The command 'touch' can be used to create a file with the provided name.<br>Submit the command <span id='advice-command'>touch newFile</span>' to create a file called 'newFile'.",advice:"As with 'mkdir', the command 'touch' can also work with an 'absolute path', such as 'touch /home/user/documents/newFile', in this case to create a file called 'newFile' in the directory 'documents'.",command:"touch newFile",completed:!1},ten:{title:"Return to the Working Directory",substage:"<span id='substage'>4.1: Paths II</span>",content:"'Absolute paths' are great, but sort of time consuming. We don't want to be typing in the entire 'path' all the time, especially not when we're ten directories deep into the filesystem. This is where 'relative paths' are useful. Rather than referring to a 'file' called 'newFolder' (which we just created in 'documents') by typing out '/home/user/documents/newFolder', we can just type 'newFolder'.<br>Submit the command <span id='advice-command'>cd newFolder</span>' to change our working directory to 'newFolder'.",advice:"",command:"cd newFolder",completed:!1},eleven:{title:"Return to the Working Directory",substage:"<span id='substage'>4.2: cd II</span>",content:"There you have it. We just changed our 'working directory' to 'newFolder' in 1/3 the keystrokes, thanks to 'relative paths'. Feel free to experiment. 'Relative' or 'absolute' paths, the choice is yours. We're going to change our 'working directory' back to '/home/user/documents' in a lot less keystrokes as well. 'cd' not only accepts relative paths, but also some shortcuts, like '..'. 'cd ..' will change the 'working directory' to our current 'working directory's' parent.<br>Submit the command <span id='advice-command'>cd ..</span>' to change our working directory back to 'documents'.",advice:"The 'parent' of a 'directory' is the 'directory' to which it belongs. ex. the 'parent' of 'documents' is 'user' --> '/home/user(the parent)/documents(the child)'",command:"cd newFolder",completed:!1}},currentStage:"one",title:document.getElementById("stage-title"),substage:document.getElementById("stage-substage"),content:document.getElementById("stage-content"),advice:document.getElementById("stage-advice"),command:document.getElementById("stage-command"),stageArrayInit:function(){return Object.keys(tutorial.stages)},stageArray:void 0,swapContent:function(){tutorial.title.innerHTML=tutorial.stages[tutorial.currentStage].substage+" "+tutorial.stages[tutorial.currentStage].title,tutorial.content.innerHTML=tutorial.stages[tutorial.currentStage].content,tutorial.advice.innerHTML=tutorial.stages[tutorial.currentStage].advice},current:function(){var e=tutorial.stageArray;getItemFromLocalStorage("tutorial")&&(tutorial.currentStage=getItemFromLocalStorage("tutorial")),console.log(e),console.log(tutorial.currentStage),console.log(e.indexOf(tutorial.currentStage));var t=e.indexOf(tutorial.currentStage);tutorial.currentStage=e[t],console.log(tutorial.currentStage),console.log(tutorial.stages[tutorial.currentStage].title),tutorial.swapContent()},next:function(){var e=tutorial.stageArray;console.log(e),console.log(tutorial.currentStage),console.log(e.indexOf(tutorial.currentStage));var t=e.indexOf(tutorial.currentStage);tutorial.stages[tutorial.currentStage].completed=!0,tutorial.currentStage=e[t+1],console.log(tutorial.currentStage),console.log(tutorial.stages[tutorial.currentStage].title),tutorial.swapContent(),terminal.save.tutorial()},previous:function(){var e=tutorial.stageArray,t=e.indexOf(tutorial.currentStage);tutorial.currentStage=e[t-1],tutorial.swapContent(),terminal.save.tutorial()}},commands,pwd,input,histindex,count,termtheme,commandArgs,outputHTML,terminal,helplist;commands=Object.keys(helpList),pwd=["~",terminal.fs.home.user,"/home/user"],input=document.getElementById("input"),histindex=0,count=0,termtheme=terminal.termthemes[terminal.settings.themeDefault],terminal.init();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZ1bmNzLmpzIiwiY2hlY2tDb21tYW5kLmpzIiwiaGVscExpc3QuanMiLCJ0ZXJtaW5hbC5qcyIsInR1dG9yaWFsLmpzIiwiYXBwLmpzIl0sIm5hbWVzIjpbImRpclNlYXJjaEZpbGVzIiwiZmlsZSIsImFyciIsImkiLCJsZW5ndGgiLCJnZXRGaWxlIiwiZGlyZWN0b3J5IiwidGFiRnVsbCIsImZ1bGwiLCJwYXJ0MSIsImRpck9iamVjdCIsImZpbGVzIiwia2V5Iiwia2V5cyIsImNvbXBsZXRpb25zIiwicGFydDIiLCJjaGFyQXQiLCJzdWJzdHIiLCJwYXRoU3RyaW5nVG9PYmplY3QiLCJPYmplY3QiLCJzdWJzdHJpbmciLCJwdXNoIiwidGFiUmVsYXRpdmUiLCJwd2QiLCJnZXRQcmVEaXJlY3RvcnkiLCJnZXREaXJlY3RvcnkiLCJjdXJyZW50RGlyIiwiaW5kZXgiLCJvYmoiLCJpcyIsInZhbHVlIiwic3BsaXQiLCJ1bmRlZmluZWQiLCJzbGljZSIsInJlcGxhY2VBbGwiLCJmaW5kIiwicmVwbGFjZSIsInN0ciIsIlJlZ0V4cCIsImRpclN0cmluZyIsImRvdGRpciIsInRlcm1pbmFsIiwiZnMiLCJhZGRUb0hpc3RvcnkiLCJjb21tYW5kIiwic2V0dGluZ3MiLCJoaXN0IiwidXNlclNldHRpbmdzIiwic2F2ZSIsInRhYiIsImUiLCJrZXlDb2RlIiwicHJldmVudERlZmF1bHQiLCJ0ZXh0RWRpdG9yIiwiY3RybEtleSIsImVkaXRvciIsInByb21wdGluZyIsInNob3dQcm9tcHQiLCJleGl0IiwiaGlkZVByb21wdCIsInNhdmVJdGVtVG9Mb2NhbFN0b3JhZ2UiLCJpdGVtIiwia2V5bmFtZSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0SXRlbUZyb21Mb2NhbFN0b3JhZ2UiLCJrZXlTdHJpbmciLCJnZXRJdGVtIiwicGFyc2UiLCJyZW1vdmVJdGVtRnJvbUxvY2FsU3RvcmFnZSIsInJlbW92ZUl0ZW0iLCJzZXRDb21tYW5kTGluZUZvY3VzIiwiaW5wdXQiLCJmb2N1cyIsInNjcm9sbFRvQm90dG9tIiwid2luZG93Iiwic2Nyb2xsIiwiY2hlY2tDb21tYW5kIiwicnVuQ29tbWFuZCIsImFyZzEiLCJhcmcyIiwidGhpcyIsIm91dHB1dCIsImlubmVySFRNTCIsIm91dHB1dEhUTUwiLCJjb21tYW5kSW5wdXQiLCJkaXNwbGF5SW5wdXRFcnJvciIsInNldFRpbWVvdXQiLCJkZWZhdWx0RXJyb3JIYW5kbGVyIiwiY29tbWFuZEFyZyIsImNvbW1hbmRzIiwiaW5kZXhPZiIsInRlcm10aGVtZSIsInRleHQiLCJ0b0xvd2VyQ2FzZSIsImxlbiIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjb21tYW5kQXJncyIsImNvbW1hbmRMaW5lIiwidXNlciIsInNpemUiLCJ0YWJDb21wbGV0ZSIsInVwIiwiZG93biIsImFwcGx5IiwibWtkaXIiLCJ0b3VjaCIsImhpc3RvcnkiLCJhcmciLCJzaWduaW4iLCJ0aGVtZSIsImRlZmF1bHRDYXNlIiwicm0iLCJlY2hvIiwibHMiLCJsIiwiY2QiLCJydW4iLCJjYXQiLCJtYW4iLCJoZWxwIiwiaW5mbyIsInlvdXR1YmUiLCJjaGVjayIsInIiLCJzZXQiLCJtdiIsImdyZXAiLCJjcCIsImxpc3QiLCJzaWdub3V0IiwidmVyc2lvbiIsImhvbWUiLCJnaXRodWIiLCJjbGVhciIsImRhdGUiLCJ0dXRvcmlhbCIsIm9uIiwibGF1bmNoIiwic3RhZ2VBcnJheSIsImN1cnJlbnRTdGFnZSIsIm5leHQiLCJwcmV2aW91cyIsImNvdW50IiwiaGVscExpc3QiLCJuYW1lIiwiZGVza3RvcCIsInNob3J0bmFtZSIsImNvbnRlbnQiLCJjcmVhdGVkIiwibW9kaWZpZWQiLCJkb3dubG9hZHMiLCJkb2N1bWVudHMiLCJleHRlbnNpb24iLCJiaW4iLCJsYXN0TG9naW4iLCJ0aGVtZURlZmF1bHQiLCJ2ZXIiLCJ0ZXJtdGhlbWVzIiwib2xkIiwiYmFja2dyb3VuZCIsImZvbGRlciIsIndoaXRlIiwiYmxhY2siLCJpbml0Iiwib2xkRGF0ZSIsImQiLCJEYXRlIiwidG9TdHJpbmciLCJ1cGRhdGVEb20iLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ0ZXh0QXJlYSIsIkZpbGUiLCJkaXNwbGF5Q29tbWFuZHMiLCJxdWVyeSIsImpvaW4iLCJ0aGVtZUxpc3QiLCJ0aGVtZXMiLCJkaXNwbGF5VGhlbWVzIiwic3BhbnMiLCJwdXROb2RlcyIsInQiLCJib2R5Iiwic3R5bGUiLCJjb2xvciIsImNoaWxkTm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYXJndW1lbnQiLCJkaXNwbGF5QXJyIiwiaXNOYU4iLCJ1bnNoaWZ0IiwicmV0dXJucyIsInBhdGgiLCJmb2xkZXJOYW1lIiwiaGFzT3duUHJvcGVydHkiLCJyZWxkaXIiLCJsZSIsInMiLCJvcGVuIiwidXJsIiwiYmFzZSIsInRlcm0iLCJmbGFnIiwiZmlsZUJvb2wiLCJmaWxlT2JqZWN0IiwiZmlsZU5hbWUiLCJzcGxpY2UiLCJkaXJLZXlzIiwic3JjUmV0dXJucyIsInNyY09iamVjdCIsInNyY0ZpbGUiLCJzcmNQYXRoIiwic3JjRmlsZU9iamVjdCIsInNyY0Rpck9iamVjdCIsInNyY0ZpbGVzIiwiZGVzdFJldHVybnMiLCJkZXN0T2JqZWN0IiwiZGVzdEZpbGUiLCJkZXN0UGF0aCIsImRlc3RGaWxlcyIsIm5ld0ZpbGUiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsImVycm9yIiwiZGVzdCIsImRlc3REaXJPYmoiLCJzcmNGb2xkZXIiLCJkZXN0Rm9sZGVyIiwicHJlRGVzdE9iamVjdCIsImNvbnNvbGUiLCJsb2ciLCJoaXN0aW5kZXgiLCJwcmludEZpbGUiLCJmaWxlc0FyciIsImlzRmlsZSIsImZpbGVPYmoiLCJkaXJPYmoiLCJzZWFyY2giLCJmaWxlQ29udGVudCIsInNlYXJjaEluZGV4IiwibGluZSIsImxpbmVzIiwibGluZVZhbCIsImZvdW5kIiwiZm9vdGVyIiwiZm9vdGVyTmF2IiwiaGlnaGxpZ2h0IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImhlYWRlciIsInNhdmVQcm9tcHQiLCJjb25zb2xlRG9tT3V0cHV0U3RvcmUiLCJjdXJyZW50RmlsZSIsImZpbGVEYXRhIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImJvcmRlckNvbG9yIiwiZGlzcGxheSIsIm5ld0NvbnRlbnQiLCJjaGFuZ2VQcm9tcHQiLCJyZXNldEVkaXRvciIsInN0YWdlQXJyYXlJbml0IiwibWFyZ2luIiwiY3VycmVudCIsInN0YWdlcyIsIm9uZSIsInRpdGxlIiwic3Vic3RhZ2UiLCJhZHZpY2UiLCJjb21wbGV0ZWQiLCJ0d28iLCJ0aHJlZSIsImZvdXIiLCJmaXZlIiwic2l4Iiwic2V2ZW4iLCJlaWdodCIsIm5pbmUiLCJ0ZW4iLCJlbGV2ZW4iLCJzd2FwQ29udGVudCIsImhlbHBsaXN0Il0sIm1hcHBpbmdzIjoiQUFFQSxRQUFBQSxnQkFBQUMsRUFBQUMsR0FDQSxJQUFBLEdBQUFDLEdBQUEsRUFBQUEsRUFBQUQsRUFBQUUsT0FBQUQsSUFDQSxHQUFBRixJQUFBQyxFQUFBQyxHQUFBLEtBQ0EsT0FBQSxFQUtBLFFBQUFFLFNBQUFKLEVBQUFLLEdBQ0EsSUFBQSxHQUFBSCxHQUFBLEVBQUFBLEVBQUFHLEVBQUFGLE9BQUFELElBQ0EsR0FBQUYsSUFBQUssRUFBQUgsR0FBQSxLQUNBLE1BQUFHLEdBQUFILEdBS0EsUUFBQUksU0FBQUMsR0FXQSxJQVZBLEdBQUFDLEdBQ0FDLEVBQ0FULEVBQ0FVLEVBQ0FDLEVBQ0FDLEVBQ0FDLEtBQ0FDLEVBQUEsR0FDQVgsRUFBQUksRUFBQUosT0FBQSxFQUVBLE1BQUFJLEVBQUFRLE9BQUFaLElBQ0FXLEVBQUFQLEVBQUFRLE9BQUFaLEdBQUFXLEVBQ0FQLEVBQUFBLEVBQUFTLE9BQUEsRUFBQWIsR0FDQUEsR0FFQUssR0FBQUQsRUFDQUEsRUFBQUEsRUFBQVMsT0FBQSxFQUFBYixHQUNBTSxFQUFBUSxtQkFBQVYsR0FFQSxPQUFBRSxHQUFBLGdCQUFBQSxLQUNBRyxFQUFBTSxPQUFBTixLQUFBSCxHQUdBLEtBQUFF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QUFHLFdBRUFuSCxFQUFBbUgsRUFBQWpELFFBQUE4QyxTQUFBSSxhQUNBSixVQUFBSSxhQUFBRCxFQUFBbkgsRUFBQSxHQUVBZ0gsU0FBQStJLGNBRUFqUCxTQUFBTyxLQUFBMkYsYUN0TkEvQyxTQUNBckUsSUFDQW1ELE1BQ0FpSyxVQUNBekYsTUFDQXBELFVBQ0FNLFlBQ0FkLFdBQ0E3QyxTQUNBa1AsUUFjQS9MLFVBQUF6RSxPQUFBTixLQUFBc0ksVUFDQTVILEtBQUEsSUFBQWtCLFNBQUFDLEdBQUE2RixLQUFBakMsS0FBQSxjQUNBNUIsTUFBQXdCLFNBQUFDLGVBQUEsU0FDQXdJLFVBQUEsRUFDQXpGLE1BQUEsRUFDQXBELFVBQUFyRCxTQUFBd0gsV0FBQXhILFNBQUFJLFNBQUFrSCxjQUlBdEgsU0FBQThIIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZVTkNUSU9OIERFQ0xBUkFUSU9OU1xuXG5mdW5jdGlvbiBkaXJTZWFyY2hGaWxlcyhmaWxlLCBhcnIpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZmlsZSA9PT0gYXJyW2ldW1wibmFtZVwiXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEZpbGUoZmlsZSwgZGlyZWN0b3J5KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJlY3RvcnkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGZpbGUgPT09IGRpcmVjdG9yeVtpXVtcIm5hbWVcIl0pIHtcbiAgICAgICAgICAgIHJldHVybiBkaXJlY3RvcnlbaV07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRhYkZ1bGwoZnVsbCkge1xuICAgIHZhciBwYXJ0MSxcbiAgICAgICAgZGlyT2JqZWN0LFxuICAgICAgICBmaWxlLFxuICAgICAgICBmaWxlcyxcbiAgICAgICAga2V5LFxuICAgICAgICBrZXlzLFxuICAgICAgICBjb21wbGV0aW9ucyA9IFtdLFxuICAgICAgICBwYXJ0MiA9IFwiXCIsXG4gICAgICAgIGxlbmd0aCA9IGZ1bGwubGVuZ3RoIC0gMTtcbiAgICBcbiAgICB3aGlsZShmdWxsLmNoYXJBdChsZW5ndGgpICE9PSAnLycpIHsgLy8gdW50aWwgdGhlIGxhc3QgY2hhcmFjdGVyIG9mIGZ1bGwgaXMgYSAvXG4gICAgICAgIHBhcnQyID0gZnVsbC5jaGFyQXQobGVuZ3RoKSArIHBhcnQyOyAvLyBhZGQgdGhlIGxhc3QgY2hhcmFjdGVyIG9mIGZ1bGwgdG8gcGFydDIgc3RyaW5nXG4gICAgICAgIGZ1bGwgPSBmdWxsLnN1YnN0cigwLCBsZW5ndGgpOyAvLyByZW1vdmUgdGhlIGxhc3QgY2hhcmFjdGVyIGZyb20gZnVsbFxuICAgICAgICBsZW5ndGgtLTsgLy8gZGVjcmVtZW50IGxlbmd0aFxuICAgIH1cbiAgICBwYXJ0MSA9IGZ1bGw7IC8vIHBhcnQxIGlzIGZ1bGwsIG1pbnVzIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIC9cbiAgICBmdWxsID0gZnVsbC5zdWJzdHIoMCwgbGVuZ3RoKTsgLy8gcmVtb3ZlIHRoZSBsYXN0IGNoYXJhY3RlciBmcm9tIGZ1bGwsIGEgL1xuICAgIGRpck9iamVjdCA9IHBhdGhTdHJpbmdUb09iamVjdChmdWxsKTsgLy8gcmV0cmlldmUgdGhlIG9iamVjdCB0aGF0IGZ1bGwgbm93IHJlcHJlc2VudHNcblxuICAgIGlmIChkaXJPYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIGRpck9iamVjdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKGRpck9iamVjdCk7XG4gICAgfVxuXG4gICAgZm9yIChrZXkgaW4ga2V5cykge1xuICAgICAgICBpZiAoa2V5c1trZXldLnN1YnN0cmluZygwLCBwYXJ0Mi5sZW5ndGgpID09PSBwYXJ0Mikge1xuICAgICAgICAgICAgY29tcGxldGlvbnMucHVzaChrZXlzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGZpbGVzID0gZGlyT2JqZWN0LmZpbGVzO1xuXG4gICAgZm9yIChmaWxlIGluIGZpbGVzKSB7XG4gICAgICAgIGlmIChmaWxlc1tmaWxlXVtcIm5hbWVcIl0uc3Vic3RyaW5nKDAsIHBhcnQyLmxlbmd0aCkgPT09IHBhcnQyKSB7XG4gICAgICAgICAgICBjb21wbGV0aW9ucy5wdXNoKGZpbGVzW2ZpbGVdW1wibmFtZVwiXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFtjb21wbGV0aW9ucywgcGFydDFdO1xufVxuXG5mdW5jdGlvbiB0YWJSZWxhdGl2ZShmdWxsKSB7XG4gICAgdmFyIGNvbXBsZXRpb25zID0gW10sXG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhwd2RbMV0pLFxuICAgICAgICBmaWxlcyA9IHB3ZFsxXS5maWxlcyxcbiAgICAgICAga2V5LFxuICAgICAgICBmaWxlO1xuXG4gICAgZm9yIChrZXkgaW4ga2V5cykge1xuXG4gICAgICAgIGlmIChrZXlzW2tleV0uc3Vic3RyaW5nKDAsIGZ1bGwubGVuZ3RoKSA9PT0gZnVsbCkge1xuXG4gICAgICAgICAgICBjb21wbGV0aW9ucy5wdXNoKGtleXNba2V5XSk7XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoZmlsZSBpbiBmaWxlcykge1xuXG4gICAgICAgIGlmIChmaWxlc1tmaWxlXVtcIm5hbWVcIl0uc3Vic3RyaW5nKDAsIGZ1bGwubGVuZ3RoKSA9PT0gZnVsbCkge1xuXG4gICAgICAgICAgICBjb21wbGV0aW9ucy5wdXNoKGZpbGVzW2ZpbGVdW1wibmFtZVwiXSk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuICAgIFxuICAgIHJldHVybiBjb21wbGV0aW9ucztcbn1cblxuZnVuY3Rpb24gZ2V0UHJlRGlyZWN0b3J5KGRpcmVjdG9yeSkge1xuICAgIFxuICAgIHZhciBmdWxsID0gZGlyZWN0b3J5LFxuICAgICAgICBwYXJ0MiA9IFwiXCIsXG4gICAgICAgIGxlbmd0aCA9IGZ1bGwubGVuZ3RoIC0gMSxcbiAgICAgICAgcGFydDEsXG4gICAgICAgIGRpck9iamVjdDtcblxuICAgIHdoaWxlKGZ1bGwuY2hhckF0KGxlbmd0aCkgIT09ICcvJykge1xuICAgICAgICBwYXJ0MiA9IGZ1bGwuY2hhckF0KGxlbmd0aCkgKyBwYXJ0MjtcbiAgICAgICAgZnVsbCA9IGZ1bGwuc3Vic3RyKDAsIGxlbmd0aCk7XG4gICAgICAgIGxlbmd0aC0tO1xuICAgIH1cblxuICAgIHBhcnQxID0gZnVsbDtcbiAgICBmdWxsID0gZnVsbC5zdWJzdHIoMCwgbGVuZ3RoKTtcbiAgICBkaXJPYmplY3QgPSBwYXRoU3RyaW5nVG9PYmplY3QoZnVsbCk7XG4gICAgXG4gICAgcmV0dXJuIFtkaXJPYmplY3QsIHBhcnQyLCBwYXJ0MV07XG4gICAgXG59XG5cbmZ1bmN0aW9uIGdldERpcmVjdG9yeShkaXJlY3RvcnkpIHtcbiAgICB2YXIgY3VycmVudERpciA9IHB3ZFsyXSArIFwiL1wiICsgZGlyZWN0b3J5LFxuICAgICAgICBkaXJPYmplY3QgPSBwYXRoU3RyaW5nVG9PYmplY3QoY3VycmVudERpcik7XG4gICAgcmV0dXJuIGRpck9iamVjdDtcbn1cblxuZnVuY3Rpb24gaW5kZXgob2JqLGlzLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgaXMgPT0gJ3N0cmluZycpIHsgcmV0dXJuIGluZGV4KG9iaiwgaXMuc3BsaXQoJy4nKSwgdmFsdWUpOyB9XG5cbiAgICBlbHNlIGlmIChpcy5sZW5ndGggPT09IDEgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkgeyByZXR1cm4gb2JqW2lzWzBdXSA9IHZhbHVlOyB9XG5cbiAgICBlbHNlIGlmIChpcy5sZW5ndGggPT09IDApIHsgcmV0dXJuIG9iajsgfVxuXG4gICAgZWxzZSB7IHJldHVybiBpbmRleChvYmpbaXNbMF1dLGlzLnNsaWNlKDEpLCB2YWx1ZSk7IH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZUFsbChmaW5kLCByZXBsYWNlLCBzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cChmaW5kLCAnZycpLCByZXBsYWNlKTtcbn1cblxuZnVuY3Rpb24gcGF0aFN0cmluZ1RvT2JqZWN0KGRpclN0cmluZykge1xuICAgIHZhciBkaXJPYmplY3QsXG4gICAgICAgIGRvdGRpciA9IHJlcGxhY2VBbGwoXCIvXCIsIFwiLlwiLCBkaXJTdHJpbmcpO1xuICAgIFxuICAgIHdoaWxlKGRvdGRpci5jaGFyQXQoMCkgPT09ICcuJykge1xuICAgICAgICBkb3RkaXIgPSBkb3RkaXIuc3Vic3RyKDEpO1xuICAgICB9XG4gICAgXG4gICAgZGlyT2JqZWN0ID0gaW5kZXgodGVybWluYWwuZnMsIGRvdGRpcik7XG4gICAgXG4gICAgcmV0dXJuIGRpck9iamVjdDtcbn1cblxuZnVuY3Rpb24gYWRkVG9IaXN0b3J5KGNvbW1hbmQpIHtcbiAgICBcbiAgICBpZiAodGVybWluYWwuc2V0dGluZ3MuaGlzdC5zbGljZSgtMSkgIT0gY29tbWFuZCkge1xuICAgICAgICBcbiAgICAgICAgdGVybWluYWwuc2V0dGluZ3MuaGlzdC5wdXNoKGNvbW1hbmQpO1xuICAgICAgICB0ZXJtaW5hbC51c2VyU2V0dGluZ3MuaGlzdCA9IHRlcm1pbmFsLnNldHRpbmdzLmhpc3Q7XG4gICAgICAgIHRlcm1pbmFsLnNhdmUuc2V0dGluZ3MoKTtcbiAgICAgICAgXG4gICAgfVxufVxuXG5mdW5jdGlvbiB0YWIoZSkgeyAvL3ByZXZlbnQgZGVmYXVsdCB0YWIgZnVuY3Rpb25hbGl0eVxuICAgIGlmIChlLmtleUNvZGUgPT09IDkpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyB9XG59XG5cblxuZnVuY3Rpb24gdGV4dEVkaXRvcihlKSB7IC8vIGZvciBoYW5kbGluZyBzYXZpbmcgYW5kIGV4aXRpbmcgY2FzZXNcbiAgICBpZiAoZS5rZXlDb2RlID09PSA4OCAmJiBlLmN0cmxLZXkgJiYgdGVybWluYWwuZWRpdG9yLnByb21wdGluZyA9PT0gZmFsc2UpIHsgdGVybWluYWwuZWRpdG9yLnNob3dQcm9tcHQoKTsgfSAvLyB4IGtleVxuICAgIGlmIChlLmtleUNvZGUgPT09IDg5ICYmIGUuY3RybEtleSAmJiB0ZXJtaW5hbC5lZGl0b3IucHJvbXB0aW5nID09PSB0cnVlKSB7IHRlcm1pbmFsLmVkaXRvci5leGl0KHRydWUpOyB9IC8vIHkga2V5XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gNzggJiYgZS5jdHJsS2V5ICYmIHRlcm1pbmFsLmVkaXRvci5wcm9tcHRpbmcgPT09IHRydWUpIHsgdGVybWluYWwuZWRpdG9yLmV4aXQoKTsgfSAvLyBuIGtleVxuICAgIGlmIChlLmtleUNvZGUgPT09IDY3ICYmIGUuY3RybEtleSAmJiB0ZXJtaW5hbC5lZGl0b3IucHJvbXB0aW5nID09PSB0cnVlKSB7IHRlcm1pbmFsLmVkaXRvci5oaWRlUHJvbXB0KCk7IH0gLy8gYyBrZXlcbn1cblxuZnVuY3Rpb24gc2F2ZUl0ZW1Ub0xvY2FsU3RvcmFnZSAoaXRlbSwga2V5bmFtZSkgeyAgXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oIGtleW5hbWUsIEpTT04uc3RyaW5naWZ5KGl0ZW0pICk7IC8vY3JlYXRlIG5ldyBrZXkgdmFsdWVzIGFuZCBzdG9yZSBpbiBsb2NhbFN0b3JhZ2UuIGNvbnZlcnQgb2JqZWN0IHRvIHN0cmluZy5cbn1cblxuZnVuY3Rpb24gZ2V0SXRlbUZyb21Mb2NhbFN0b3JhZ2UgKGtleW5hbWUpIHtcblxuICAgICAgICB2YXIga2V5LFxuICAgICAgICAgICAga2V5U3RyaW5nO1xuXG4gICAgICAgIGlmICggbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5bmFtZSkgKSB7ICAvL2lmIG5vdGUgZXhpc3RzIGluIGxvY2FsU3RvcmFnZSBnZXQgaXQgYW5kIHBhcnNlIGZyb20gc3RyaW5nIHRvIG9iamVjdC5cblxuICAgICAgICAgICAga2V5U3RyaW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5bmFtZSk7XG4gICAgICAgICAgICBrZXkgPSBKU09OLnBhcnNlKGtleVN0cmluZyk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuXG5mdW5jdGlvbiByZW1vdmVJdGVtRnJvbUxvY2FsU3RvcmFnZSAoa2V5bmFtZSkge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleW5hbWUpO1xufVxuXG5mdW5jdGlvbiBzZXRDb21tYW5kTGluZUZvY3VzKCkge1xuICAgIGlucHV0LmZvY3VzKCk7XG59XG5cblxuZnVuY3Rpb24gc2Nyb2xsVG9Cb3R0b20oKSB7XG4gICAgd2luZG93LnNjcm9sbCgwLCAxMDAwMCk7XG59XG4iLCJmdW5jdGlvbiBjaGVja0NvbW1hbmQoZSkge1xuXG4gICAgLy8gc2VlbXMgbW9yZSBmbGV4aWJsZSBkb2luZyBpdCB0aGlzIHdheSwgYXMgdGhlIGFtb3VudCBvZiBjb21tYW5kcyBncm93cy4gICAgXG4gICAgZnVuY3Rpb24gcnVuQ29tbWFuZChhcmcxLCBhcmcyKSB7XG4gICAgICAgIHZhciBjb21tYW5kID0gdGhpcztcbiAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBvdXRwdXRIVE1MO1xuICAgICAgICBjb21tYW5kKGFyZzEsIGFyZzIpO1xuICAgICAgICBzY3JvbGxUb0JvdHRvbSgpO1xuICAgICAgICBhZGRUb0hpc3RvcnkoY29tbWFuZElucHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkaXNwbGF5SW5wdXRFcnJvcigpIHtcblxuICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IG91dHB1dEhUTUw7XG4gICAgICAgIHNldFRpbWVvdXQoc2Nyb2xsVG9Cb3R0b20sIDApOyAvLyBkb2luZyB0aGlzIHB1c2hlcyBzY3JvbGxUb0JvdHRvbSB0byBuZXh0IGN5Y2xlIG9mIGV2ZW50IGxvb3AsIGdpdmluZyB1cyB0aGUgYmVoYXZpb3Igd2Ugd2FudCBpbiB0aGUgZGVmYXVsdCBjYXNlcy4gRWxzZSB3ZSB3b3VsZCBoYXZlIHRvIGNhbGwgaXQgdHdpY2UgYW5kIGFkZCBsaW5lcyBvZiBjb2RlIChib28gaG9vIHRvIHRoYXQpXG4gICAgICAgIGFkZFRvSGlzdG9yeShjb21tYW5kSW5wdXQpO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihjb21tYW5kQXJnKSB7XG4gICAgICAgIGlmIChjb21tYW5kcy5pbmRleE9mKGNvbW1hbmRBcmcpID09IC0xKSB7XG4gICAgICAgICAgICBkaXNwbGF5SW5wdXRFcnJvcigpO1xuICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPk5vIGNvbW1hbmQgJ1wiICsgY29tbWFuZEFyZyArIFwiJyBmb3VuZC4gVHlwZSAnaGVscCcgZm9yIGEgbGlzdCBvZiBjb21tYW5kcy48L3A+XCI7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpc3BsYXlJbnB1dEVycm9yKCk7XG4gICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+VHJ5ICdcIiArIGNvbW1hbmRBcmcgKyBcIiAtaGVscCcgZm9yIGluZm9ybWF0aW9uIG9uIHByb3BlciB1c2FnZTwvcD5cIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjb21tYW5kSW5wdXQgPSBpbnB1dC52YWx1ZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICBsZW4gPSBjb21tYW5kSW5wdXQubGVuZ3RoLFxuICAgICAgICBvdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm91dHB1dFwiKTtcbiAgICBcbiAgICBjb21tYW5kQXJncyA9IGNvbW1hbmRJbnB1dC5zcGxpdChcIiBcIik7XG4gICAgb3V0cHV0SFRNTCA9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+PHNwYW4gc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLmNvbW1hbmRMaW5lICsgXCInPldlYlRlcm06XCIgKyBwd2RbMF0gKyBcIiBcIiArIHRlcm1pbmFsLnNldHRpbmdzLnVzZXIgKyBcIiQgPC9zcGFuPlwiICsgY29tbWFuZElucHV0ICsgXCI8L3A+XCI7XG5cbiAgICBpZiAobGVuID4gMCkgeyAvLyBhZGp1c3QgdGhlIGNhcmV0XG4gICAgICAgIGlucHV0LnNpemUgPSBsZW4gKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlucHV0LnNpemUgPSAxO1xuICAgIH1cblxuICAgIGlmIChlLmtleUNvZGUgPT09IDkpIHsgdGVybWluYWwudGFiQ29tcGxldGUoKTsgfVxuXG4gICAgaWYgKGUua2V5Q29kZSA9PT0gMzgpIHsgdGVybWluYWwudXAoKTsgfVxuXG4gICAgaWYgKGUua2V5Q29kZSA9PT0gNDApIHsgdGVybWluYWwuZG93bigpOyB9XG5cbiAgICBpZiAoZS5rZXlDb2RlID09PSAxMykgeyAvLyBlbnRlciBrZXlcbiAgICAgICAgXG4gICAgICAgIGlmIChjb21tYW5kQXJncy5sZW5ndGggPT09IDIpIHsgLy8gaWYgdGhlIGNvbW1hbmQgZW50ZXJlZCBoYXMgb25lIGFyZ3VtZW50XG4gICAgICAgICAgICBpZiAoY29tbWFuZEFyZ3NbMV0gIT0gXCItaGVscFwiICYmIGNvbW1hbmRBcmdzWzFdICE9IFwiLS1oZWxwXCIgJiYgY29tbWFuZEFyZ3NbMV0gIT0gXCItaFwiKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChjb21tYW5kQXJnc1swXSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJta2RpclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuQ29tbWFuZC5hcHBseSh0ZXJtaW5hbC5ta2Rpcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidG91Y2hcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkNvbW1hbmQuYXBwbHkodGVybWluYWwudG91Y2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImhpc3RvcnlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkNvbW1hbmQuYXBwbHkodGVybWluYWwuaGlzdG9yeS5hcmcsIFtjb21tYW5kQXJnc1sxXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNpZ25pblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuQ29tbWFuZC5hcHBseSh0ZXJtaW5hbC5zaWduaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInRoZW1lXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5Db21tYW5kLmFwcGx5KHRlcm1pbmFsLnRoZW1lLmRlZmF1bHRDYXNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJybVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuQ29tbWFuZC5hcHBseSh0ZXJtaW5hbC5ybS5kZWZhdWx0Q2FzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZWNob1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuQ29tbWFuZC5hcHBseSh0ZXJtaW5hbC5lY2hvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJsc1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuQ29tbWFuZC5hcHBseSh0ZXJtaW5hbC5scy5sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuQ29tbWFuZC5hcHBseSh0ZXJtaW5hbC5jZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZWRpdG9yXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5Db21tYW5kLmFwcGx5KHRlcm1pbmFsLmVkaXRvci5ydW4sIFtjb21tYW5kQXJnc1sxXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbCgwLCAwKTsgLy8gTkVFREVEIFRPIFJFU0VUIFNDUk9MTCBUTyBUT1BcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjYXRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkNvbW1hbmQuYXBwbHkodGVybWluYWwuY2F0LCBbY29tbWFuZEFyZ3NbMV1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtYW5cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkNvbW1hbmQuYXBwbHkodGVybWluYWwubWFuLCBbY29tbWFuZEFyZ3NbMV1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0RXJyb3JIYW5kbGVyKGNvbW1hbmRBcmdzWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHN3aXRjaChjb21tYW5kQXJnc1sxXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCItLWhlbHBcIjogIFxuICAgICAgICAgICAgICAgIGNhc2UgIFwiLWhlbHBcIjpcbiAgICAgICAgICAgICAgICBjYXNlICAgICBcIi1oXCI6XG4gICAgICAgICAgICAgICAgICAgIHJ1bkNvbW1hbmQuYXBwbHkodGVybWluYWwuaGVscC5pbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfSBlbHNlIGlmIChjb21tYW5kQXJncy5sZW5ndGggPiAyKSB7IC8vIGlmIHRoZSBjb21tYW5kIGVudGVyZWQgaGFzIG1vcmUgdGhhbiBvbmUgYXJndW1lbnRcbiAgICAgICAgICAgIGlmIChjb21tYW5kQXJnc1swXSAhPSBcIm12XCIgJiYgY29tbWFuZEFyZ3NbMF0gIT0gXCJjcFwiICYmIGNvbW1hbmRBcmdzWzBdICE9IFwiZ3JlcFwiKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChjb21tYW5kQXJnc1swXSArIFwiIFwiICsgY29tbWFuZEFyZ3NbMV0pIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInlvdXR1YmUgLXNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkNvbW1hbmQuYXBwbHkodGVybWluYWwueW91dHViZS5jaGVjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3Rlcm1pbmFsLnlvdXR1YmUuY2hlY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJybSAtclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuQ29tbWFuZC5hcHBseSh0ZXJtaW5hbC5ybS5yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0aGVtZSAtc2V0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5Db21tYW5kLmFwcGx5KHRlcm1pbmFsLnRoZW1lLnNldCwgW2NvbW1hbmRBcmdzWzJdXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEVycm9ySGFuZGxlcihjb21tYW5kQXJnc1swXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoY29tbWFuZEFyZ3NbMF0gPT09IFwibXZcIikgeyBydW5Db21tYW5kLmFwcGx5KHRlcm1pbmFsLm12KTsgfVxuXG4gICAgICAgICAgICBpZiAoY29tbWFuZEFyZ3NbMF0gPT09IFwiZ3JlcFwiKSB7IHJ1bkNvbW1hbmQuYXBwbHkodGVybWluYWwuZ3JlcCwgW2NvbW1hbmRBcmdzWzFdLCBjb21tYW5kQXJnc1syXV0pOyB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChjb21tYW5kQXJnc1swXSArIFwiIFwiICsgY29tbWFuZEFyZ3NbMV0gPT09IFwiY3AgLXJcIikgeyBydW5Db21tYW5kLmFwcGx5KHRlcm1pbmFsLmNwLnIpOyB9XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbW1hbmRBcmdzWzBdID09PSBcImNwXCIpIHsgcnVuQ29tbWFuZC5hcHBseSh0ZXJtaW5hbC5jcC5kZWZhdWx0Q2FzZSk7IH1cbiAgICAgICAgICAgIFxuICAgICAgICB9IGVsc2UgeyAvLyBpZiB0aGUgY29tbWFuZCBlbnRlcmVkIGhhcyBubyBhcmd1bWVudHNcblxuICAgICAgICAgICAgc3dpdGNoIChjb21tYW5kSW5wdXQpIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJoZWxwXCI6XG4gICAgICAgICAgICAgICAgICAgIHJ1bkNvbW1hbmQuYXBwbHkodGVybWluYWwuaGVscC5saXN0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNhc2UgXCJzaWdub3V0XCI6XG4gICAgICAgICAgICAgICAgICAgIHJ1bkNvbW1hbmQuYXBwbHkodGVybWluYWwuc2lnbm91dCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjYXNlIFwidmVyc2lvblwiOlxuICAgICAgICAgICAgICAgICAgICBydW5Db21tYW5kLmFwcGx5KHRlcm1pbmFsLnZlcnNpb24pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2FzZSBcImhpc3RvcnlcIjpcbiAgICAgICAgICAgICAgICAgICAgcnVuQ29tbWFuZC5hcHBseSh0ZXJtaW5hbC5oaXN0b3J5LmRlZmF1bHRDYXNlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwicHdkXCI6XG4gICAgICAgICAgICAgICAgICAgIHJ1bkNvbW1hbmQuYXBwbHkodGVybWluYWwucHdkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwiY2RcIjpcbiAgICAgICAgICAgICAgICAgICAgcHdkID0gW1wiflwiLCB0ZXJtaW5hbC5mcy5ob21lLnVzZXIsIFwiL2hvbWUvdXNlclwiXTtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZExpbmUuaW5uZXJIVE1MID0gXCJXZWJUZXJtOlwiICsgcHdkWzBdICsgXCIgXCIgKyB0ZXJtaW5hbC5zZXR0aW5ncy51c2VyICsgXCIkIFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJsc1wiOlxuICAgICAgICAgICAgICAgICAgICBydW5Db21tYW5kLmFwcGx5KHRlcm1pbmFsLmxzLmRlZmF1bHRDYXNlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwiZ2l0aHViXCI6XG4gICAgICAgICAgICAgICAgICAgIHJ1bkNvbW1hbmQuYXBwbHkodGVybWluYWwuZ2l0aHViKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwiY2xlYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgcnVuQ29tbWFuZC5hcHBseSh0ZXJtaW5hbC5jbGVhcik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcInlvdXR1YmVcIjpcbiAgICAgICAgICAgICAgICAgICAgcnVuQ29tbWFuZC5hcHBseSh0ZXJtaW5hbC55b3V0dWJlLmNoZWNrKTtcbiAgICAgICAgICAgICAgICAgICAgLy90ZXJtaW5hbC55b3V0dWJlLmNoZWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjYXNlIFwiZGF0ZVwiOlxuICAgICAgICAgICAgICAgICAgICBydW5Db21tYW5kLmFwcGx5KHRlcm1pbmFsLmRhdGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJlZGl0b3JcIjpcbiAgICAgICAgICAgICAgICAgICAgcnVuQ29tbWFuZC5hcHBseSh0ZXJtaW5hbC5lZGl0b3IucnVuKTtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNjcm9sbCgwLCAwKTsgLy8gTkVFREVEIFRPIFJFU0VUIFNDUk9MTCBUTyBUT1BcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cblxuICAgICAgICAgICAgICAgIC8vIFRVVE9SSUFMIFNUVUZGXG4gICAgICAgICAgICAgICAgY2FzZSBcInR1dG9yaWFsXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmICggISB0dXRvcmlhbC5vbiApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bkNvbW1hbmQuYXBwbHkodGVybWluYWwudHV0b3JpYWwubGF1bmNoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJuZXh0XCI6XG4gICAgICAgICAgICAgICAgICAgIGlmICggdHV0b3JpYWwub24gJiYgdHV0b3JpYWwuc3RhZ2VBcnJheS5pbmRleE9mKHR1dG9yaWFsLmN1cnJlbnRTdGFnZSkgIT0gdHV0b3JpYWwuc3RhZ2VBcnJheS5sZW5ndGggLSAxICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHV0b3JpYWwubmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcInByZXZcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0dXRvcmlhbC5vbiAmJiB0dXRvcmlhbC5zdGFnZUFycmF5LmluZGV4T2YodHV0b3JpYWwuY3VycmVudFN0YWdlKSAhPSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHV0b3JpYWwucHJldmlvdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJleGl0XCI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0dXRvcmlhbC5vbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWwudHV0b3JpYWwuZXhpdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIC8vIEVORCBUVVRPUklBTCBTVFVGRlxuXG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0RXJyb3JIYW5kbGVyKGNvbW1hbmRJbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dC52YWx1ZSA9IFwiXCI7IC8vIHJlc2V0IGNvbW1hbmQgbGluZVxuICAgICAgICBpbnB1dC5zaXplID0gMTsgLy8gcmVzZXQgY2FyZXRcbiAgICAgICAgY291bnQgPSAwOyAvLyByZXNldCB1cC9kb3duIGhpc3RvcnlcbiAgICBcbiAgICB9IC8vIEVORCBFTlRFUiBLRVlcblxufSAvLyBFTkQgY2hlY2tDb21tYW5kXG4iLCIvLyBTVEFSVCBIRUxQTElTVFxuXG5oZWxwTGlzdCA9IHtcbiAgICBcInR1dG9yaWFsXCI6IHtcbiAgICAgICAgbmFtZTogXCJ0dXRvcmlhbFwiLFxuICAgICAgICBpbmZvOiBcIkxhdW5jaCB0aGUgdHV0b3JpYWwuIFR5cGUgJ2V4aXQnIHRvIHF1aXQgdHV0b3JpYWwgd2hlbiBsYXVuY2hlZC5cIlxuICAgIH0sXG4gICAgXCJ0b3VjaFwiOiB7XG4gICAgICAgIG5hbWU6IFwidG91Y2hcIixcbiAgICAgICAgaW5mbzogXCJDcmVhdGUgYSBuZXcgZmlsZSBpbiB0aGUgcHJlc2VudCB3b3JraW5nIGRpcmVjdG9yeTxicj50b3VjaCBbZmlsZV08YnI+ZXguIHRvdWNoIG15ZG9jdW1lbnQudHh0XCJcbiAgICB9LFxuICAgIFwiY2xlYXJcIjoge1xuICAgICAgICBuYW1lOiBcImNsZWFyXCIsXG4gICAgICAgIGluZm86IFwiQ2xlYXIgdGhlIHRlcm1pbmFsIG91dHB1dDxicj5jbGVhclwiXG4gICAgfSxcbiAgICBcImVkaXRvclwiOiB7XG4gICAgICAgIG5hbWU6IFwiZWRpdG9yXCIsXG4gICAgICAgIGluZm86IFwiT3BlbiB0aGUgYnVpbHQgaW4gdGV4dCBlZGl0b3I8YnI+ZWRpdG9yPGJyPk9wZW4gdGhlIHByb3ZpZGVkIGZpbGUgaW4gdGhlIHRleHQgZWRpdG9yPGJyPmVkaXRvciBbZmlsZV08YnI+ZXguIGVkaXRvciByZWFkbWUudHh0XCJcbiAgICB9LFxuICAgIFwic2lnbmluXCI6IHtcbiAgICAgICAgbmFtZTogXCJzaWduaW5cIixcbiAgICAgICAgaW5mbzogXCJTaWduIGluIHRoZSBwcm92aWRlZCB1c2VyPGJyPnNpZ25pbiBbdXNlck5hbWVdPGJyPmV4LiBzaWduaW4gcnRcIlxuICAgIH0sXG4gICAgXCJzaWdub3V0XCI6IHtcbiAgICAgICAgbmFtZTogXCJzaWdub3V0XCIsXG4gICAgICAgIGluZm86IFwiU2lnbm91dCB0aGUgY3VycmVudGx5IHNpZ25lZCBpbiB1c2VyPGJyPnNpZ25vdXRcIlxuICAgIH0sXG4gICAgXCJ2ZXJzaW9uXCI6IHtcbiAgICAgICAgbmFtZTogXCJ2ZXJzaW9uXCIsXG4gICAgICAgIGluZm86IFwiT3V0cHV0IHRoZSB2ZXJzaW9uIG9mIHRoZSBXZWIgVGVybWluYWw8YnI+dmVyc2lvblwiXG4gICAgfSxcbiAgICBcImVjaG9cIjoge1xuICAgICAgICBuYW1lOiBcImVjaG9cIixcbiAgICAgICAgaW5mbzogXCJPdXRwdXQgdGhlIHByb3ZpZGVkIHN0cmluZzxicj5lY2hvIFtzdHJpbmddPGJyPmV4LiBlY2hvIEhlbGxvXCJcbiAgICB9LFxuICAgIFwiZGF0ZVwiOiB7XG4gICAgICAgIG5hbWU6IFwiZGF0ZVwiLFxuICAgICAgICBpbmZvOiBcIk91dHB1dCB0aGUgY3VycmVudCBkYXRlLCB0aW1lLCBhbmQgdGltZXpvbmU8YnI+ZGF0ZVwiXG4gICAgfSxcbiAgICBcInJtXCI6IHtcbiAgICAgICAgbmFtZTogXCJybVwiLFxuICAgICAgICBpbmZvOiBcIlJlbW92ZSB0aGUgcHJvdmlkZWQgZmlsZTxicj5ybSBbZmlsZV08YnI+ZXguIHJtIHJlYWRtZS50eHQ8YnI+UmVtb3ZlIHRoZSBwcm92aWRlZCBkaXJlY3Rvcnk8YnI+cm0gLXIgW2RpcmVjdG9yeV08YnI+ZXguIHJtIC1yIGRvY3VtZW50c1wiXG4gICAgfSxcbiAgICBcImhpc3RvcnlcIjoge1xuICAgICAgICBuYW1lOiBcImhpc3RvcnlcIixcbiAgICAgICAgaW5mbzogXCJPdXRwdXQgYSBsaXN0IG9mIHByZXZpb3VzbHkgZW50ZXJlZCBjb21tYW5kczxicj5oaXN0b3J5PGJyPjxicj5PdXRwdXQgYSBudW1iZXIgb2YgcHJldmlvdXNseSBlbnRlcmVkIGNvbW1hbmRzPGJyPmhpc3RvcnkgW251bWJlcl08L2JyPmV4LiAnaGlzdG9yeSA1JyB3aWxsIGxpc3QgaGlzdG9yeSBpdGVtcyAxLTU8YnI+PGJyPkNsZWFyIHRoZSBsaXN0IG9mIHByZXZpb3VzbHkgZW50ZXJlZCBjb21tYW5kczwvYnI+aGlzdG9yeSAtY1wiXG4gICAgfSxcbiAgICBcImNkXCI6IHtcbiAgICAgICAgbmFtZTogXCJjZFwiLFxuICAgICAgICBpbmZvOiBcIkNoYW5nZSB0aGUgcHJlc2VudCB3b3JraW5nIGRpcmVjdG9yeTxicj5jZDxicj5jZCAuLjxicj5jZCBbZGlyZWN0b3J5XTxicj5leC4gY2QgRG9jdW1lbnRzPGJyPmV4LiBjZCAvaG9tZS91c2VyL0RvY3VtZW50c1wiXG4gICAgfSxcbiAgICBcImxzXCI6IHtcbiAgICAgICAgbmFtZTogXCJsc1wiLFxuICAgICAgICBpbmZvOiBcIk91dHB1dCBhIGxpc3Qgb2YgdGhlIGZpbGVzIGFuZCBkaXJlY3RvcmllcyBpbiB0aGUgcHJlc2VudCB3b3JraW5nIGRpcmVjdG9yeTxicj5sczxicj5PdXRwdXQgaW4gbG9uZyBmb3JtYXQ8YnI+bHMgLWxcIlxuICAgIH0sXG4gICAgXCJ0aGVtZVwiOiB7XG4gICAgICAgIG5hbWU6IFwidGhlbWVcIixcbiAgICAgICAgaW5mbzogXCJDaGFuZ2UgdGhlIGNvbG9yIHNjaGVtZSBvZiB0aGUgV2ViIFRlcm1pbmFsPGJyPnRoZW1lIFt0aGVtZV08YnI+ZXguIHRoZW1lIHdoaXRlPGJyPk91dHB1dCBhIGxpc3Qgb2YgYXZhaWxhYmxlIHRoZW1lczxicj50aGVtZSAtbFwiXG4gICAgfSxcbiAgICBcImhlbHBcIjoge1xuICAgICAgICBuYW1lOiBcImhlbHBcIixcbiAgICAgICAgaW5mbzogXCJQcm92aWRlcyBhIGxpc3Qgb2YgYXZhaWxhYmxlIGNvbW1hbmRzLCBhbmQgaW5mb3JtYXRpb24gb24gdGhlIFdlYiBUZXJtaW5hbDxicj5oZWxwXCJcbiAgICB9LFxuICAgIFwieW91dHViZVwiOiB7XG4gICAgICAgIG5hbWU6IFwieW91dHViZVwiLFxuICAgICAgICBpbmZvOiBcIk9wZW4gYSBuZXcgdGFiIGluIHlvdXIgYnJvd3NlciB0byB5b3V0dWJlLmNvbTxicj55b3V0dWJlPGJyPlNlYXJjaCB5b3V0dWJlLmNvbSB3aXRoIHRoZSBwcm92aWRlZCBzZWFyY2ggcXVlcnk8YnI+eW91dHViZSAtcyBbcXVlcnldPGJyPmV4LiB5b3V0dWJlIC1zIGZ1bm55IGNhdHNcIlxuICAgIH0sXG4gICAgXCJwd2RcIjoge1xuICAgICAgICBuYW1lOiBcInB3ZFwiLFxuICAgICAgICBpbmZvOiBcIk91dHB1dCB0aGUgcHJlc2VudCB3b3JraW5nIGRpcmVjdG9yeTxicj5wd2RcIlxuICAgIH0sXG4gICAgXCJta2RpclwiOiB7XG4gICAgICAgIG5hbWU6IFwibWtkaXJcIixcbiAgICAgICAgaW5mbzogXCJDcmVhdGUgYSBuZXcgZGlyZWN0b3J5IGluIHRoZSBwcmVzZW50IHdvcmtpbmcgZGlyZWN0b3J5PGJyPm1rZGlyIFtkaXJlY3RvcnldPGJyPmV4LiBta2RpciBQaWN0dXJlc1wiXG4gICAgfSxcbiAgICBcImNwXCI6IHtcbiAgICAgICAgbmFtZTogXCJjcFwiLFxuICAgICAgICBpbmZvOiBcIkNvcHkgYSBmaWxlPGJyPmNwIFtmaWxlXSBbZGVzdGluYXRpb25dPGJyPmV4LiBjcCByZWFkbWUudHh0IC9ob21lL3VzZXIvZGVza3RvcDxicj5jcCBbZmlsZV0gW25ld05hbWVdPGJyPmV4LiBjcCByZWFkbWUudHh0IHJlYWRtZTIudHh0PGJyPkNvcHkgYSBkaXJlY3Rvcnk8YnI+Y3AgLXIgW2RpcmVjdG9yeV0gW2Rlc3RpbmF0aW9uXTxicj5leC4gY3AgLXIgZG93bmxvYWRzIGRlc2t0b3BcIlxuICAgIH0sXG4gICAgXCJtdlwiOiB7XG4gICAgICAgIG5hbWU6IFwibXZcIixcbiAgICAgICAgaW5mbzogXCJNb3ZlIChjdXQgYW5kIHBhc3RlKSBhIGZpbGUgb3IgZGlyZWN0b3J5PGJyPm12IFtmaWxlXSBbZGVzdGluYXRpb25dPGJyPmV4LiBtdiByZWFkbWUudHh0IC9ob21lL3VzZXIvZGVza3RvcDxicj5tdiBbZGlyZWN0b3J5XSBbZGVzdGluYXRpb25dPGJyPmV4LiBtdiBEb2N1bWVudHMgL2hvbWUvdXNlci9EZXNrdG9wXCJcbiAgICB9LFxuICAgIFwiY2F0XCI6IHtcbiAgICAgICAgbmFtZTogXCJjYXRcIixcbiAgICAgICAgaW5mbzogXCJUaGUgJ2NhdCcgdXRpbGl0eSByZWFkcyBmaWxlcyBhbmQgd3JpdGVzIHRoZW0gdG8gdGhlIHN0YW5kYXJkIG91dHB1dC48YnI+Y2F0IFtmaWxlXTxicj5leC4gY2F0IHJlYWRtZS50eHRcIlxuICAgIH0sXG4gICAgXCJtYW5cIjoge1xuICAgICAgICBuYW1lOiBcIm1hblwiLFxuICAgICAgICBpbmZvOiBcIk1hbiBpcyBhIHZlcmJvc2UgZm9ybSBvZiBoZWxwLjxicj5tYW4gW2NvbW1hbmRdPGJyPm1hbiBoZWxwXCJcbiAgICB9LFxuICAgIFwiZ3JlcFwiOiB7XG4gICAgICAgIG5hbWU6IFwiZ3JlcFwiLFxuICAgICAgICBpbmZvOiBcIkdyZXAgaXMgYSBzZWFyY2ggdG9vbC48YnI+Z3JlcCBbc2VhcmNoIHRlcm1dIFtmaWxlXTxicj5ncmVwIGZvbyBiYXIudHh0XCJcbiAgICB9XG59OyBcblxuLy8gRU5EIEhFTFBMSVNUXG4iLCIvLyBTVEFSVCBURVJNSU5BTFxuXG50ZXJtaW5hbCA9IHtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFZJUlRVQUwgRklMRVNZU1RFTVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBcImZzXCI6IHtcbiAgICAgICAgXCJob21lXCI6IHtcbiAgICAgICAgICAgIFwidXNlclwiOiB7XG4gICAgICAgICAgICAgICAgXCJkZXNrdG9wXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJmaWxlc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYWJjLnR4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2hvcnRuYW1lXCI6IFwiYWJjXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb250ZW50XCI6IFwiSSBhbSBjb250ZW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjcmVhdGVkXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtb2RpZmllZFwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInVybXVtLnR4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2hvcnRuYW1lXCI6IFwidXJtdW1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbnRlbnRcIjogXCJJIGhhdmUgY29udGVudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3JlYXRlZFwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibW9kaWZpZWRcIjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcImRvd25sb2Fkc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiZmlsZXNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImV4YW1wbGUudHh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaG9ydG5hbWVcIjogXCJleGFtcGxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb250ZW50XCI6IFwiSSBhbSBjb250ZW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjcmVhdGVkXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtb2RpZmllZFwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRvY3VtZW50LnR4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2hvcnRuYW1lXCI6IFwiZG9jdW1lbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbnRlbnRcIjogXCJJIGFtIGNvbnRlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNyZWF0ZWRcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1vZGlmaWVkXCI6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiYW5vdGhlci50eHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNob3J0bmFtZVwiOiBcImFub3RoZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbnRlbnRcIjogXCJJIGFtIGNvbnRlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNyZWF0ZWRcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1vZGlmaWVkXCI6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJkb2N1bWVudHNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImZpbGVzXCI6IFtdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcImZpbGVzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwicmVhZG1lLnR4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzaG9ydG5hbWVcIjogXCJyZWFkbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY29udGVudFwiOiBcIkkgYW0gY29udGVudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJleHRlbnNpb25cIjogXCIubWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY3JlYXRlZFwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtb2RpZmllZFwiOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICBcImJpblwiOiB7IFwiZmlsZXNcIjogW10gfSxcbiAgICAgICAgXCJmaWxlc1wiOiBbXVxuICAgICAgICB9XG4gICAgfSxcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBNT1JFIFRFUk1JTkFMIFBST1BFUlRJRVNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgXCJ1c2VyU2V0dGluZ3NcIjoge1xuICAgICAgICBcImhpc3RcIjogW10sXG4gICAgICAgIFwidXNlclwiOiBcInVzZXJcIixcbiAgICAgICAgXCJsYXN0TG9naW5cIjogXCJcIixcbiAgICAgICAgXCJ0aGVtZURlZmF1bHRcIjogXCJibGFja1wiXG4gICAgfSxcbiAgICBcInNldHRpbmdzXCI6IHtcbiAgICAgICAgXCJoaXN0XCI6IFtdLFxuICAgICAgICBcInVzZXJcIjogXCJ1c2VyXCIsXG4gICAgICAgIFwibGFzdExvZ2luXCI6IFwiXCIsXG4gICAgICAgIFwidGhlbWVEZWZhdWx0XCI6IFwiYmxhY2tcIlxuICAgIH0sXG4gICAgdmVyOiBcIjAuNlwiLFxuICAgIHRlcm10aGVtZXM6IHtcbiAgICAgICAgb2xkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBcIiMyRTMxMkNcIixcbiAgICAgICAgICAgIHRleHQ6IFwiIzlEQ0U5MVwiLFxuICAgICAgICAgICAgZmlsZTogXCJHcmF5XCIsXG4gICAgICAgICAgICBmb2xkZXI6IFwiU2xhdGVCbHVlXCIsXG4gICAgICAgICAgICBjb21tYW5kTGluZTogXCIjRkZGXCJcbiAgICAgICAgfSxcbiAgICAgICAgd2hpdGU6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IFwiI0ZGRlwiLFxuICAgICAgICAgICAgdGV4dDogXCIjMDAwXCIsXG4gICAgICAgICAgICBmaWxlOiBcIiM5OTlcIixcbiAgICAgICAgICAgIGZvbGRlcjogXCJHcmVlblwiLFxuICAgICAgICAgICAgY29tbWFuZExpbmU6IFwiIzAwMDA4MFwiXG4gICAgICAgIH0sXG4gICAgICAgIGJsYWNrOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBcIiMyMjJcIixcbiAgICAgICAgICAgIHRleHQ6IFwiI0Y5RjlGOVwiLFxuICAgICAgICAgICAgZmlsZTogXCIjQUFBXCIsXG4gICAgICAgICAgICBmb2xkZXI6IFwiIzY1OUVGOVwiLFxuICAgICAgICAgICAgY29tbWFuZExpbmU6IFwiIzhCRkE3RlwiXG4gICAgICAgICAgICAvL2ZvbnQ6IFwiJ0x1Y2lkYSBDb25zb2xlJywgTW9uYWNvLCBtb25vc3BhY2VcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBjb21tYW5kTGluZTogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb21tYW5kTGluZVwiKSxcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIGxvYWQgYW5kIGFwcGx5IHVzZXIgc2V0dGluZ3MgYW5kIGZzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgZGF0ZSA9IGQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIG9sZERhdGU7XG5cbiAgICAgICAgaWYgKCBnZXRJdGVtRnJvbUxvY2FsU3RvcmFnZSgnc2lnbmluJykgKSB7XG5cbiAgICAgICAgICAgIGlmICggZ2V0SXRlbUZyb21Mb2NhbFN0b3JhZ2UoJ2ZzJykgKSB7IC8vbG9hZCBhbmQgYXBwbHkgdXNlciBmc1xuXG4gICAgICAgICAgICAgICAgdGVybWluYWwuZnMgPSBnZXRJdGVtRnJvbUxvY2FsU3RvcmFnZSgnZnMnKTtcbiAgICAgICAgICAgICAgICBwd2RbMV0gPSB0ZXJtaW5hbC5mcy5ob21lLnVzZXI7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCBnZXRJdGVtRnJvbUxvY2FsU3RvcmFnZSgnc2V0dGluZ3MnKSApIHtcblxuICAgICAgICAgICAgICAgIHRlcm1pbmFsLnVzZXJTZXR0aW5ncyA9IGdldEl0ZW1Gcm9tTG9jYWxTdG9yYWdlKCdzZXR0aW5ncycpOyAvLyBsb2FkIHNldHRpbmdzOiBoaXN0b3J5LCB1c2VyLCBsYXN0IGxvZ2luLCB0aGVtZVxuICAgICAgICAgICAgICAgIHRlcm10aGVtZSA9IHRlcm1pbmFsLnRlcm10aGVtZXNbdGVybWluYWwudXNlclNldHRpbmdzLnRoZW1lRGVmYXVsdF07XG4gICAgICAgICAgICAgICAgdGVybWluYWwudGhlbWUudXBkYXRlRG9tKCk7XG4gICAgICAgICAgICAgICAgdGVybWluYWwuc2V0dGluZ3MuaGlzdCA9IHRlcm1pbmFsLnVzZXJTZXR0aW5ncy5oaXN0O1xuICAgICAgICAgICAgICAgIG9sZERhdGUgPSB0ZXJtaW5hbC51c2VyU2V0dGluZ3MubGFzdExvZ2luO1xuICAgICAgICAgICAgICAgIHRlcm1pbmFsLnVzZXJTZXR0aW5ncy5sYXN0TG9naW4gPSBkYXRlO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCIgJz5XZWxjb21lIGJhY2sgXCIgKyB0ZXJtaW5hbC51c2VyU2V0dGluZ3MudXNlciArIFwiLiBMYXN0IGxvZ2luIFwiICsgb2xkRGF0ZSArIFwiLlwiO1xuICAgICAgICAgICAgdGVybWluYWwuc2F2ZS5zZXR0aW5ncygpO1xuXG4gICAgICAgIH0gZWxzZSB7IFxuICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCA9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIiAnPldlbGNvbWUgdG8gdGhlIHRlcm1pbmFsIG9uIHRoZSB3ZWIuIFR5cGUgaGVscCBmb3IgYSBsaXN0IG9mIGNvbW1hbmRzLlwiO1xuICAgICAgICAgICAgdGVybWluYWwuc2V0dGluZ3MubGFzdExvZ2luID0gZGF0ZTtcbiAgICAgICAgICAgIHRlcm1pbmFsLnRoZW1lLnVwZGF0ZURvbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0IGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgY2hlY2tDb21tYW5kLCBmYWxzZSk7XG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRhYiwgZmFsc2UpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2V0Q29tbWFuZExpbmVGb2N1cywgZmFsc2UpO1xuICAgICAgICB0ZXJtaW5hbC5lZGl0b3IudGV4dEFyZWEuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRleHRFZGl0b3IsIGZhbHNlKTtcbiAgICAgICAgXG4gICAgfSxcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIE5ldyBmaWxlIGNvbnN0cnVjdG9yXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBGaWxlOiBmdW5jdGlvbiAobmFtZSwgc2hvcnRuYW1lLCBjb250ZW50KSB7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zaG9ydG5hbWUgPSBzaG9ydG5hbWU7XG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgIHRoaXMuY3JlYXRlZCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHRoaXMubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xuXG4gICAgfSxcbiAgICBcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBURVJNSU5BTCBNRVRIT0RTXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gRGlzcGxheSBoZWxwIGluZm9ybWF0aW9uLCBsaXN0IG9mIGNvbW1hbmRzLiBNZXRob2RzOiBsaXN0LCBpbmZvXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBoZWxwOiB7XG4gICAgICAgIGxpc3Q6IGZ1bmN0aW9uKCkgeyAvLyBsaXN0IGVhY2ggY29tbWFuZFxuICAgICAgICAgICAgdmFyIGRpc3BsYXlDb21tYW5kcyA9IFwiXCI7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tbWFuZHMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgIGRpc3BsYXlDb21tYW5kcyArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPlwiICsgY29tbWFuZHNbaV0gKyBcIjwvcD5cIjtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IGRpc3BsYXlDb21tYW5kcztcbiAgICAgICAgfSxcbiAgICAgICAgaW5mbzogZnVuY3Rpb24oKSB7IC8vIHNob3cgdGhlIGhlbHAgaW5mbyBmb3IgYSBjb21tYW5kXG4gICAgICAgICAgICB2YXIgcXVlcnkgPSBjb21tYW5kQXJnc1swXTtcbiAgICAgICAgICAgIGlmIChjb21tYW5kcy5pbmRleE9mKHF1ZXJ5KSAhPSAtMSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5cIiArIGhlbHBMaXN0W3F1ZXJ5XS5pbmZvICsgXCI8L3A+XCI7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5ObyBjb21tYW5kICdcIiArIHF1ZXJ5ICsgXCInIGZvdW5kLiBUeXBlICdoZWxwJyBmb3IgYSBsaXN0IG9mIGNvbW1hbmRzLjwvcD5cIjtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBtYW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gY29tbWFuZEFyZ3NbMV07XG4gICAgICAgICAgICBpZiAoY29tbWFuZHMuaW5kZXhPZihxdWVyeSkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+XCIgKyBoZWxwTGlzdFtxdWVyeV0uaW5mbyArIFwiPC9wPlwiO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+Tm8gY29tbWFuZCAnXCIgKyBxdWVyeSArIFwiJyBmb3VuZC4gVHlwZSAnaGVscCcgZm9yIGEgbGlzdCBvZiBjb21tYW5kcy48L3A+XCI7XG5cbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBDbGVhciB0aGUgdGVybWluYWwgb3V0cHV0XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIG91dHB1dC5pbm5lckhUTUwgPSBcIlwiO1xuICAgIH0sXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBEaXNwbGF5IGN1cnJlbnQgZGF0ZSwgdGltZSwgYW5kIHRpbWV6b25lXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPlwiICsgbmV3IERhdGUoKSArIFwiPC9wPlwiO1xuICAgIH0sXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBPdXRwdXQgYXJndW1lbnQgYXMgYSBzdHJpbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGVjaG86IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZWNobyA9IGNvbW1hbmRBcmdzLnNsaWNlKDEpLmpvaW4oXCIgXCIpO1xuXG4gICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5cIiArIGVjaG8gKyBcIjwvcD5cIjtcbiAgICAgICAgICAgIFxuICAgIH0sXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBDaGFuZ2UgdGhlIHRlcm1pbmFsIHRoZW1lLiBNZXRob2RzOiBkZWZhdWx0Q2FzZSwgdXBkYXRlRG9tLCBzZXRcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHRoZW1lOiB7XG4gICAgICAgIGRlZmF1bHRDYXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGVtZSA9IGNvbW1hbmRBcmdzLnNsaWNlKDEpLmpvaW4oXCIgXCIpLFxuICAgICAgICAgICAgICAgIHRoZW1lcyA9IE9iamVjdC5rZXlzKHRlcm1pbmFsLnRlcm10aGVtZXMpLFxuICAgICAgICAgICAgICAgIHRoZW1lTGlzdCxcbiAgICAgICAgICAgICAgICBkaXNwbGF5VGhlbWVzID0gdGhlbWVzLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHRoZW1lICE9IFwiLWxcIikge1xuXG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKCB0aGVtZSApIHtcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwib2xkXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtdGhlbWUgPSB0ZXJtaW5hbC50ZXJtdGhlbWVzLm9sZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1pbmFsLnRoZW1lLnVwZGF0ZURvbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJsYWNrXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtdGhlbWUgPSB0ZXJtaW5hbC50ZXJtdGhlbWVzLmJsYWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWwudGhlbWUudXBkYXRlRG9tKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwid2hpdGVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlcm10aGVtZSA9IHRlcm1pbmFsLnRlcm10aGVtZXMud2hpdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbC50aGVtZS51cGRhdGVEb20oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+dGhlbWU6IFRoZXJlIGlzIG5vIHN1Y2ggdGhlbWUuIHRoZW1lcyBhdmFpbGFibGU6IFwiICsgZGlzcGxheVRoZW1lcyArIFwiPC9wPlwiO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGVtZUxpc3QgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgZm9yICh0aGVtZSBpbiB0aGVtZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhlbWVMaXN0ICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+XCI7XG4gICAgICAgICAgICAgICAgICAgIHRoZW1lTGlzdCArPSB0aGVtZXNbdGhlbWVdO1xuICAgICAgICAgICAgICAgICAgICB0aGVtZUxpc3QgKz0gXCI8L3A+XCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSB0aGVtZUxpc3Q7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlRG9tOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3BhbnMsXG4gICAgICAgICAgICAgICAgcHV0Tm9kZXMsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICB0O1xuXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmQgPSB0ZXJtdGhlbWUuYmFja2dyb3VuZDtcbiAgICAgICAgICAgIGlucHV0LnN0eWxlLmNvbG9yID0gdGVybXRoZW1lLnRleHQ7XG4gICAgICAgICAgICBpbnB1dC5zdHlsZS5iYWNrZ3JvdW5kID0gdGVybXRoZW1lLmJhY2tncm91bmQ7XG4gICAgICAgICAgICBjb21tYW5kTGluZS5zdHlsZS5jb2xvciA9IHRlcm10aGVtZS5jb21tYW5kTGluZTtcblxuICAgICAgICAgICAgcHV0Tm9kZXMgPSBvdXRwdXQuY2hpbGROb2RlcztcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwdXROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHB1dE5vZGVzW2ldLnN0eWxlLmNvbG9yID0gdGVybXRoZW1lLnRleHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNwYW5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNvdXRwdXQgPiBwID4gc3BhblwiKTtcbiAgICAgICAgICAgIGZvciAodCA9IDA7IHQgPCBzcGFucy5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgICAgIHNwYW5zW3RdLnN0eWxlLmNvbG9yID0gdGVybXRoZW1lLmNvbW1hbmRMaW5lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgICAgICAgICB0ZXJtaW5hbC5zZXR0aW5ncy50aGVtZURlZmF1bHQgPSB0aGVtZTtcbiAgICAgICAgICAgIHRlcm1pbmFsLnVzZXJTZXR0aW5ncy50aGVtZURlZmF1bHQgPSB0aGVtZTtcbiAgICAgICAgICAgIHRlcm10aGVtZSA9IHRlcm1pbmFsLnRlcm10aGVtZXNbdGhlbWVdO1xuICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPkRlZmF1bHQgdGhlbWUgc2V0IHRvIFwiICsgdGhlbWUgKyBcIi48L3A+XCI7XG4gICAgICAgICAgICB0ZXJtaW5hbC50aGVtZS51cGRhdGVEb20oKTtcbiAgICAgICAgICAgIHRlcm1pbmFsLnNhdmUuc2V0dGluZ3MoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBDaGFuZ2UgdGhlIHRlcm1pbmFsJ3MgdXNlclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgc2lnbmluOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHVzZXIgPSBjb21tYW5kQXJncy5zbGljZSgxKS5qb2luKFwiIFwiKTtcblxuICAgICAgICB0ZXJtaW5hbC5zZXR0aW5ncy51c2VyID0gdXNlcjtcbiAgICAgICAgdGVybWluYWwudXNlclNldHRpbmdzLnVzZXIgPSB1c2VyO1xuICAgICAgICBjb21tYW5kTGluZS5pbm5lckhUTUwgPSBcIldlYlRlcm06XCIgKyBwd2RbMF0gKyBcIiBcIiArIHRlcm1pbmFsLnNldHRpbmdzLnVzZXIgKyBcIiQgXCI7XG4gICAgICAgIHRlcm1pbmFsLnNhdmUuc2V0dGluZ3MoKTtcbiAgICAgICAgc2F2ZUl0ZW1Ub0xvY2FsU3RvcmFnZSh1c2VyLCAnc2lnbmluJyk7IC8vY3JlYXRlIHNpZ25pbiBrZXlcblxuICAgIH0sXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBDaGFuZ2UgdGhlIHRlcm1pbmFsJ3MgdXNlciBiYWNrIHRvIGRlZmF1bHRcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHNpZ25vdXQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHRlcm1pbmFsLnNldHRpbmdzLnVzZXIgPSBcInVzZXJcIjtcbiAgICAgICAgY29tbWFuZExpbmUuaW5uZXJIVE1MID0gXCJXZWJUZXJtOlwiICsgcHdkWzBdICsgXCIgXCIgKyB0ZXJtaW5hbC5zZXR0aW5ncy51c2VyICsgXCIkIFwiO1xuICAgICAgICByZW1vdmVJdGVtRnJvbUxvY2FsU3RvcmFnZSgnc2lnbmluJyk7Ly9kZWxldGUgc2lnbmluIGtleVxuXG4gICAgfSxcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIE91dHB1dCB0aGUgdGVybWluYWwgaGlzdG9yeSBhcnJheVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgaGlzdG9yeToge1xuICAgICAgICBkZWZhdWx0Q2FzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSxcbiAgICAgICAgICAgICAgICBjb3VudCA9IDEgLFxuICAgICAgICAgICAgICAgIGhpc3QgPSB0ZXJtaW5hbC5zZXR0aW5ncy5oaXN0O1xuXG5cbiAgICAgICAgICAgIGZvciAoaXRlbSBpbiBoaXN0KSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPlwiICsgY291bnQgKyBcIiAgXCIgKyBoaXN0W2l0ZW1dICsgXCI8L3A+XCI7XG4gICAgICAgICAgICAgICAgY291bnQgKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFyZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYXJndW1lbnQgPSBjb21tYW5kQXJnc1sxXSxcbiAgICAgICAgICAgICAgICBoaXN0ID0gdGVybWluYWwuc2V0dGluZ3MuaGlzdCxcbiAgICAgICAgICAgICAgICBjb3VudCA9IGhpc3QubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGRpc3BsYXlBcnIgPSBbXTtcblxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50ID09PSBcIi1jXCIpIHtcblxuICAgICAgICAgICAgICAgIHRlcm1pbmFsLnNldHRpbmdzLmhpc3QgPSBbXTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc05hTihhcmd1bWVudCkpIHtcblxuICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5oaXN0b3J5OiBObyBzdWNoIG9wdGlvbi4gRm9yIGluZm9ybWF0aW9uIG9uIHByb3BlciB1c2FnZSwgZW50ZXIgJ2hpc3RvcnkgLWhlbHAnPC9wPlwiO1xuXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBpZihhcmd1bWVudCA+IGhpc3QubGVuZ3RoKSB7YXJndW1lbnQgPSBoaXN0Lmxlbmd0aDt9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgd2hpbGUoY291bnQgPiAoaGlzdC5sZW5ndGggLSBhcmd1bWVudCkpIHtcblxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5QXJyLnVuc2hpZnQoXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5cIiArIGNvdW50ICsgXCIgIFwiICArIGhpc3RbY291bnQtMV0gKyBcIjwvcD5cIik7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50LS07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChpdGVtIGluIGRpc3BsYXlBcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gZGlzcGxheUFycltpdGVtXTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBPdXRwdXQgdGhlIHZlcnNpb24gb2YgdGhlIHRlcm1pbmFsXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB2ZXJzaW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPldlYlRlcm0gdmVyc2lvbiBcIiArIHRlcm1pbmFsLnZlciArIFwiPC9wPlwiO1xuICAgIH0sXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBJZiB0aGUgZm9sZGVyIGRvZXNuJ3QgZXhpc3QgaW4gcHdkLCBjcmVhdGUgaXRcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIG1rZGlyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJldHVybnMsXG4gICAgICAgICAgICBmb2xkZXIsXG4gICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgZGlyT2JqZWN0LFxuICAgICAgICAgICAgZm9sZGVyTmFtZSA9IGNvbW1hbmRBcmdzWzFdO1xuICAgICAgICBcbiAgICAgICAgaWYgKGZvbGRlck5hbWVbMF0gPT09IFwiL1wiKSB7IC8vIGlmIHRoZSBpbnRlbmRlZCBkZXN0aW5hdGlvbiBmb3IgdGhpcyBmb2xkZXIgaXMgZWxzZXdoZXJlIGluIHRoZSBmaWxlc3lzdGVtXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybnMgPSBnZXRQcmVEaXJlY3RvcnkoZm9sZGVyTmFtZSk7IC8vIHJldHVybnMgYW4gYXJyYXksIGRlc3RpbmF0aW9uIG9iamVjdCwgZm9sZGVyTmFtZSwgZGVzdGluYXRpb24gb2JqZWN0J3Mgc3RyaW5nXG4gICAgICAgICAgICBkaXJPYmplY3QgPSByZXR1cm5zWzBdO1xuICAgICAgICAgICAgZm9sZGVyID0gcmV0dXJuc1sxXTtcbiAgICAgICAgICAgIHBhdGggPSByZXR1cm5zWzJdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZGlyT2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBkaXJPYmplY3QgPT09ICdvYmplY3QnKSB7IC8vIGlmIHRoZSBnZXRQcmVEaXJlY3RvcnkgcmV0cmlldmVkIGEgZGlyZWN0b3J5XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGRpck9iamVjdC5oYXNPd25Qcm9wZXJ0eShmb2xkZXIpKSB7IC8vIGlmIHRoZSBkZXNpcmVkIGZvbGRlciBuYW1lIGFscmVhZHkgZXhpc3RzIGluIGRlc3RpbmF0aW9uXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+bWtkaXI6IGNhbm5vdCBjcmVhdGUgJ1wiICsgZm9sZGVyICsgXCInOiBEaXJlY3RvcnkgYWxyZWFkeSBleGlzdHMgaW4gJ1wiICsgcGF0aCArIFwiJzwvcD5cIjtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgaXQgZG9lc24ndCwgY3JlYXRlIGl0XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBkaXJPYmplY3RbZm9sZGVyXSA9IHtmaWxlczogW119O1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+RGlyZWN0b3J5IGNhbGxlZCAnXCIgKyBmb2xkZXIgKyBcIicgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWQuPC9wPlwiO1xuICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbC5zYXZlLmZzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGlmIHRoZSBwcm92aWRlZCBsb2NhdGlvbiBmb3IgdGhlIGZvbGRlcidzIGNyZWF0aW9uIHdhcyBub3QgYSBwbGFjZSBpbiB0aGUgZnNcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5ta2RpcjogY2Fubm90IGNyZWF0ZSAnXCIgKyBmb2xkZXIgKyBcIic6IERlc3RpbmF0aW9uIGRpcmVjdG9yeSAnXCIgKyBwYXRoICsgXCInIGRvZXMgbm90IGV4aXN0PC9wPlwiO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfSBlbHNlIGlmIChwd2RbMV0uaGFzT3duUHJvcGVydHkoZm9sZGVyTmFtZSkpIHsgLy8gaWYgYSBmb2xkZXIgYnkgdGhpcyBuYW1lIGV4aXN0cyBpbiB0aGUgcHdkXG5cbiAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5ta2RpcjogY2Fubm90IGNyZWF0ZSAnXCIgKyBmb2xkZXJOYW1lICsgXCInOiBEaXJlY3RvcnkgYWxyZWFkeSBleGlzdHM8L3A+XCI7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgcHdkWzFdW2ZvbGRlck5hbWVdID0ge2ZpbGVzOiBbXX07XG4gICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+RGlyZWN0b3J5IGNhbGxlZCAnXCIgKyBmb2xkZXJOYW1lICsgXCInIHN1Y2Nlc3NmdWxseSBjcmVhdGVkLjwvcD5cIjtcbiAgICAgICAgICAgIHRlcm1pbmFsLnNhdmUuZnMoKTtcblxuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIENoYW5nZSBkaXJlY3RvcnlcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGNkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGRpck9iamVjdCxcbiAgICAgICAgICAgIGN1cnJlbnREaXIsXG4gICAgICAgICAgICByZWxkaXIsXG4gICAgICAgICAgICBsZSxcbiAgICAgICAgICAgIGRpcmVjdG9yeSA9IGNvbW1hbmRBcmdzLnNsaWNlKDEpLmpvaW4oXCIgXCIpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGRpcmVjdG9yeSA9PSBcIi4uXCIpIHsgLy8gaWYgdGhlIGFyZ3VtZW50IGlzIC4uXG5cbiAgICAgICAgICAgIGN1cnJlbnREaXIgPSBwd2RbMl07IC8vIGN1cnJlbnREaXIgaXMgc2V0IHRvIHRoZSBwd2QgZGlzcGxheSBzdHJpbmdcbiAgICAgICAgICAgIGxlID0gY3VycmVudERpci5sZW5ndGggLSAxOyAvLyBsZSBpcyBzZXQgdG8gdGhlIGxhc3QgaW5kZXggb2YgY3VycmVudERpclxuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGlsZShjdXJyZW50RGlyLmNoYXJBdChsZSkgIT09ICcvJykgeyAvLyBzbyBsb25nIGFzIHRoZSBsYXN0IGluZGV4IG9mIGN1cnJlbnREaXIgaXNuJ3QgYSAvXG4gICAgICAgICAgICAgICAgY3VycmVudERpciA9IGN1cnJlbnREaXIuc3Vic3RyKDAsIGxlKTsgLy8gcmVtb3ZlIHRoZSBsYXN0IGluZGV4IG9mIGN1cnJlbnREaXJcbiAgICAgICAgICAgICAgICBsZS0tOyAvLyBkZWNyZW1lbnQgbGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY3VycmVudERpciA9IGN1cnJlbnREaXIuc3Vic3RyKDAsIGxlKTsgLy8gcmVtb3ZlIHRoZSAvXG4gICAgICAgICAgICBkaXJPYmplY3QgPSBwYXRoU3RyaW5nVG9PYmplY3QoY3VycmVudERpcik7IC8vIGNvbnZlcnQgdGhlIHN0cmluZyBjdXJyZW50RGlyIHRvIHRoZSBvYmplY3QgaXQgcmVwcmVzZW50c1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZGlyT2JqZWN0ICE9PSB1bmRlZmluZWQpIHsgLy8gaWYgcGF0aFN0cmluZ1RvT2JqZWN0IHJldHVybmVkIGFuIG9iamVjdFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHB3ZCA9IFtjdXJyZW50RGlyLCBkaXJPYmplY3QsIGN1cnJlbnREaXJdOyAvLyBzZXQgcHdkIGFsaWFzLCBvYmplY3QsIGFuZCBkaXNwbGF5XG4gICAgICAgICAgICAgICAgY29tbWFuZExpbmUuaW5uZXJIVE1MID0gXCJXZWJUZXJtOlwiICsgcHdkWzBdICsgXCIgXCIgKyB0ZXJtaW5hbC5zZXR0aW5ncy51c2VyICsgXCIkIFwiOyAvLyBjb21tYW5kTGluZSBzZXQgdG8gcmVwcmVzZW50IG5ldyBwd2RcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKHB3ZFsxXS5oYXNPd25Qcm9wZXJ0eShkaXJlY3RvcnkpKSB7IC8vIGlmIHRoZSBhcmd1bWVudCBpcyBhIGtleSBvZiB0aGUgcHdkXG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHJlbGRpciA9IHB3ZFsyXSArIFwiL1wiICsgZGlyZWN0b3J5OyAvLyBhZGQgdGhlIGFyZ3VtZW50IHRvIHRoZSBwd2QgZGlzcGxheSBzdHJpbmdcbiAgICAgICAgICAgIGRpck9iamVjdCA9IHBhdGhTdHJpbmdUb09iamVjdChyZWxkaXIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBwd2QgPSBbcmVsZGlyLCBkaXJPYmplY3QsIHJlbGRpcl07XG4gICAgICAgICAgICBjb21tYW5kTGluZS5pbm5lckhUTUwgPSBcIldlYlRlcm06XCIgKyBwd2RbMF0gKyBcIiBcIiArIHRlcm1pbmFsLnNldHRpbmdzLnVzZXIgKyBcIiQgXCI7XG4gICAgICAgIFxuICAgICAgICB9IGVsc2UgeyAvLyBpZiB0aGUgYXJndW1lbnQgaXMgYW4gYWJzb2x1dGUgcGF0aCwgfHwgbm90IC4uIC8gcmVsYXRpdmVcblxuICAgICAgICAgICAgZGlyT2JqZWN0ID0gcGF0aFN0cmluZ1RvT2JqZWN0KGRpcmVjdG9yeSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChkaXJPYmplY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHB3ZCA9IFtkaXJlY3RvcnksIGRpck9iamVjdCwgZGlyZWN0b3J5XTtcbiAgICAgICAgICAgICAgICBjb21tYW5kTGluZS5pbm5lckhUTUwgPSBcIldlYlRlcm06XCIgKyBwd2RbMF0gKyBcIiBcIiArIHRlcm1pbmFsLnNldHRpbmdzLnVzZXIgKyBcIiQgXCI7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBpZiB0aGUgcHJvdmlkZWQgYXJndW1lbnQgaXNuJ3QgXCIuLlwiLCBhIGtleSBvZiB0aGUgcHdkLCBvciBhIHJlY29nbml6ZWQgYWJzb2x1dGUgcGF0aFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5jZDogTm8gc3VjaCBkaXJlY3Rvcnk8L3A+XCI7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gT3BlbiBZb3V0dWJlIGluIGEgbmV3IHRhYi4gTWV0aG9kczogZGVmYXVsdENhc2UsIHNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHlvdXR1YmU6IHtcblxuICAgICAgICBjaGVjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoKGNvbW1hbmRBcmdzWzFdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIi1zXCI6XG4gICAgICAgICAgICAgICAgICAgIHRlcm1pbmFsLnlvdXR1YmUucygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbC55b3V0dWJlLmRlZmF1bHRDYXNlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICBkZWZhdWx0Q2FzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB3aW5kb3cub3BlbignaHR0cDovL3d3dy55b3V0dWJlLmNvbScsJ19ibGFuaycpO1xuICAgICAgICB9LFxuICAgICAgICBzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBiYXNlID0gXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9yZXN1bHRzP3NlYXJjaF9xdWVyeT1cIixcbiAgICAgICAgICAgICAgICB0ZXJtID0gXCJcIixcbiAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgaTtcblxuXG4gICAgICAgICAgICBmb3IgKGkgPSAyOyBpIDwgY29tbWFuZEFyZ3MubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgICAgIHRlcm0gKz0gY29tbWFuZEFyZ3NbaV0gKyBcIiUyMFwiO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRlcm0gPSB0ZXJtLnNsaWNlKDAsLTMpOyAvLyByZW1vdmUgZXh0cmEgJTIwXG5cbiAgICAgICAgICAgIGlmICh0ZXJtICE9PSBcIlwiKSB7XG5cbiAgICAgICAgICAgICAgICB1cmwgPSBiYXNlICsgdGVybTtcbiAgICAgICAgICAgICAgICB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKTtcblxuICAgICAgICAgICAgfSBlbHNlIHsgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPlBsZWFzZSBpbmRpY2F0ZSBhIHNlYXJjaCBxdWVyeS48L3A+XCI7IH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9LFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gT3BlbiBHaXRodWIgcmVwbyBpbiBhIG5ldyB0YWIuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBnaXRodWI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgd2luZG93Lm9wZW4oJ2h0dHBzOi8vZ2l0aHViLmNvbS9ydGQyL3dlYnRlcm0nLCdfYmxhbmsnKTtcbiAgICB9LFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gT3V0cHV0IHRoZSBwcmVzZW50IHdvcmtpbmcgZGlyZWN0b3J5XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBwd2Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICBcbiAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPlwiICsgcHdkWzJdICsgXCI8L3A+XCI7XG4gICAgXG4gICAgfSxcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIExpc3QgdGhlIGZpbGVzIGFuZCBmb2xkZXJzIG9mIHRoZSBwd2QuIE1ldGhvZHM6IGRlZmF1bHRDYXNlLCBsXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBsczoge1xuICAgICAgICBkZWZhdWx0Q2FzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIga2V5LFxuICAgICAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICAgICAgbGlzdCA9IFwiXCIsXG4gICAgICAgICAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHB3ZFsxXSksXG4gICAgICAgICAgICAgICAgZmlsZXMgPSBwd2RbMV0uZmlsZXM7XG5cbiAgICAgICAgICAgIGZvciAoa2V5IGluIGtleXMpIHtcblxuICAgICAgICAgICAgICAgIGlmIChrZXlzW2tleV0gIT09IFwiZmlsZXNcIikge1xuXG4gICAgICAgICAgICAgICAgICAgIGxpc3QgKz0gXCI8cCBjbGFzcz0nZm9sZGVyJyBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUuZm9sZGVyICsgXCInPlwiICsga2V5c1trZXldICsgXCI8L3A+XCI7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChmaWxlIGluIGZpbGVzKSB7XG5cbiAgICAgICAgICAgICAgICBsaXN0ICs9IFwiPHAgY2xhc3M9J2ZpbGUnIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS5maWxlICsgXCInPlwiICsgZmlsZXNbZmlsZV1bXCJuYW1lXCJdICsgXCI8L3A+XCI7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBsaXN0O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIGxpc3QgPT09IFwiXCIgKSB7IG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5sczogVGhlIGN1cnJlbnQgZGlyZWN0b3J5IGlzIGVtcHR5PC9wPlwiOyB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBsaXN0LFxuICAgICAgICAgICAgICAgIGtleXMsXG4gICAgICAgICAgICAgICAgZmlsZXMsXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICAgICAgZmxhZyA9IGNvbW1hbmRBcmdzLnNsaWNlKDEpLmpvaW4oXCIgXCIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZmxhZyA9PT0gXCItbFwiKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGlzdCA9IFwiXCI7XG4gICAgICAgICAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHB3ZFsxXSk7XG4gICAgICAgICAgICAgICAgZmlsZXMgPSBwd2RbMV0uZmlsZXM7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBrZXlzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleXNba2V5XSAhPT0gXCJmaWxlc1wiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QgKz0gXCI8cCBjbGFzcz0nZm9sZGVyJyBzdHlsZT0nZGlzcGxheTogYmxvY2s7IGNvbG9yOlwiICsgdGVybXRoZW1lLmZvbGRlciArIFwiJz5cIiArIGtleXNba2V5XSArIFwiPC9wPlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoZmlsZSBpbiBmaWxlcykge1xuXG4gICAgICAgICAgICAgICAgICAgIGxpc3QgKz0gXCI8cCBjbGFzcz0nZmlsZScgc3R5bGU9J2Rpc3BsYXk6IGJsb2NrOyBjb2xvcjpcIiArIHRlcm10aGVtZS5maWxlICsgXCInPlwiICsgZmlsZXNbZmlsZV1bXCJuYW1lXCJdICsgXCI8L3A+XCI7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IGxpc3Q7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5sczogaW52YWxpZCBvcHRpb24gJ1wiICsgZmxhZyArIFwiJzwvcD48cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5UcnkgJ2xzIC0taGVscCcgZm9yIG1vcmUgaW5mb3JtYXRpb24uPC9wPlwiO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gSWYgZmlsZSBleGlzdHMgaW4gcHdkLCBkZWxldGUgaXQuIE1ldGhvZHM6IGRlZmF1bHRDYXNlLCByXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBybToge1xuICAgICAgICBkZWZhdWx0Q2FzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBmaWxlQm9vbCxcbiAgICAgICAgICAgICAgICBkaXJPYmplY3QsXG4gICAgICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgIGZpbGVPYmplY3QsXG4gICAgICAgICAgICAgICAgZmlsZXMsXG4gICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgZmlsZU5hbWUgPSBjb21tYW5kQXJnc1sxXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGZpbGVOYW1lWzBdID09PSBcIi9cIikgeyAvLyBpZiB0aGUgZmlsZSBpcyBsb2NhdGVkIGVsc2V3aGVyZSBpbiB0aGUgZnNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybnMgPSBnZXRQcmVEaXJlY3RvcnkoZmlsZU5hbWUpO1xuICAgICAgICAgICAgICAgIGRpck9iamVjdCA9IHJldHVybnNbMF07XG4gICAgICAgICAgICAgICAgZmlsZSA9IHJldHVybnNbMV07XG4gICAgICAgICAgICAgICAgcGF0aCA9IHJldHVybnNbMl07XG5cbiAgICAgICAgICAgICAgICBpZiAoZGlyT2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBkaXJPYmplY3QgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBmaWxlcyA9IGRpck9iamVjdC5maWxlcztcbiAgICAgICAgICAgICAgICAgICAgZmlsZUJvb2wgPSBkaXJTZWFyY2hGaWxlcyhmaWxlLCBmaWxlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVCb29sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVPYmplY3QgPSBnZXRGaWxlKGZpbGUsIGRpck9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGZpbGVzLmluZGV4T2YoZmlsZU9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWwuc2F2ZS5mcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5ybTogY2Fubm90IGRlbGV0ZSAnXCIgKyBmaWxlICsgXCInOiBGaWxlIGRvZXMgbm90IGV4aXN0PC9wPlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgdGhlIHByb3ZpZGVkIGxvY2F0aW9uIGZvciB0aGUgZm9sZGVyJ3MgY3JlYXRpb24gd2FzIG5vdCBhIHBsYWNlIGluIHRoZSBmc1xuXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5ybTogY2Fubm90IGRlbGV0ZSAnXCIgKyBmaWxlICsgXCInOiBEaXJlY3RvcnkgJ1wiICsgcGF0aCArIFwiJyBkb2VzIG5vdCBleGlzdDwvcD5cIjtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBmaWxlcyA9IHB3ZFsxXS5maWxlcztcbiAgICAgICAgICAgICAgICBmaWxlID0gZ2V0RmlsZShmaWxlTmFtZSwgZmlsZXMpOyAvLyByZXRyaWV2ZSBmaWxlIHdpdGggdGhlIHByb3ZpZGVkIGZpbGVOYW1lXG5cbiAgICAgICAgICAgICAgICBpZiAoZmlsZSAhPT0gbnVsbCAmJiB0eXBlb2YgZmlsZSA9PT0gJ29iamVjdCcpIHsgLy8gaWYgZ2V0RmlsZSByZXRyaWV2ZWQgYSBmaWxlXG5cbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBmaWxlcy5pbmRleE9mKGZpbGUpOyAvLyBkZXRlcm1pbmUgaW5kZXggb2YgdGhhdCBmaWxlXG5cbiAgICAgICAgICAgICAgICAgICAgZmlsZXMuc3BsaWNlKGluZGV4LCAxKTsgLy8gcmVtb3ZlIGl0IGZyb20gdGhlIGZpbGVzIGFycmF5XG5cblxuICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbC5zYXZlLmZzKCk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5ybTogY2Fubm90IHJlbW92ZSAnXCIgKyBmaWxlTmFtZSArIFwiJzogRmlsZSBkb2VzIG5vdCBleGlzdDwvcD5cIjtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIga2V5cyxcbiAgICAgICAgICAgICAgICBkaXJPYmplY3QsXG4gICAgICAgICAgICAgICAgZm9sZGVyLFxuICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgcmV0dXJucyxcbiAgICAgICAgICAgICAgICBkaXJLZXlzLFxuICAgICAgICAgICAgICAgIGZvbGRlck5hbWUgPSBjb21tYW5kQXJnc1syXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGZvbGRlck5hbWVbMF0gPT09IFwiL1wiKSB7IC8vIGlmIHRoZSBmb2xkZXIgaXMgbG9jYXRlZCBlbHNld2hlcmUgaW4gdGhlIGZzXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJucyA9IGdldFByZURpcmVjdG9yeShmb2xkZXJOYW1lKTtcbiAgICAgICAgICAgICAgICBkaXJPYmplY3QgPSByZXR1cm5zWzBdO1xuICAgICAgICAgICAgICAgIGZvbGRlciA9IHJldHVybnNbMV07XG4gICAgICAgICAgICAgICAgcGF0aCA9IHJldHVybnNbMl07XG5cbiAgICAgICAgICAgICAgICBpZiAoZGlyT2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBkaXJPYmplY3QgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhkaXJPYmplY3QpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXJPYmplY3QuaGFzT3duUHJvcGVydHkoZm9sZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZGlyT2JqZWN0W2ZvbGRlcl07XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbC5zYXZlLmZzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPnJtOiBjYW5ub3QgcmVtb3ZlICdcIiArIGZvbGRlciArIFwiJzogTm8gc3VjaCBkaXJlY3Rvcnk8L3A+XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+cm06IGNhbm5vdCBkZWxldGUgJ1wiICsgZm9sZGVyICsgXCInOiBEaXJlY3RvcnkgJ1wiICsgcGF0aCArIFwiJyBkb2VzIG5vdCBleGlzdDwvcD5cIjtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZGlyS2V5cyA9IE9iamVjdC5rZXlzKHB3ZFsxXSk7XG5cbiAgICAgICAgICAgICAgICBpZihkaXJLZXlzLmluZGV4T2YoZm9sZGVyTmFtZSkgIT0gLTEpIHtcblxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcHdkWzFdW2ZvbGRlck5hbWVdO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgdGVybWluYWwuc2F2ZS5mcygpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+cm06IGNhbm5vdCByZW1vdmUgJ1wiICsgZm9sZGVyTmFtZSArIFwiJzogTm8gc3VjaCBkaXJlY3Rvcnk8L3A+XCI7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gTW92ZVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgbXY6IGZ1bmN0aW9uKCkge1xuICAgICAgICBcbiAgICAgICAgdmFyIHNvdXJjZSA9IGNvbW1hbmRBcmdzWzFdLFxuICAgICAgICAgICAgZGVzdGluYXRpb24gPSBjb21tYW5kQXJnc1syXSxcbiAgICAgICAgICAgIGVycm9yID0gZmFsc2UsXG4gICAgICAgICAgICBzcmNSZXR1cm5zLFxuICAgICAgICAgICAgc3JjT2JqZWN0LFxuICAgICAgICAgICAgc3JjRmlsZSxcbiAgICAgICAgICAgIHNyY1BhdGgsXG4gICAgICAgICAgICBzcmNGaWxlT2JqZWN0LFxuICAgICAgICAgICAgc3JjRGlyT2JqZWN0LFxuICAgICAgICAgICAgc3JjRmlsZXMsXG4gICAgICAgICAgICBkZXN0UmV0dXJucyxcbiAgICAgICAgICAgIGRlc3RPYmplY3QsXG4gICAgICAgICAgICBkZXN0RmlsZSxcbiAgICAgICAgICAgIGRlc3RQYXRoLFxuICAgICAgICAgICAgZGVzdEZpbGVzLFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBuZXdGaWxlO1xuICAgICAgICAgICAgXG4gICAgICAgIGlmIChzb3VyY2UgIT09IGRlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlWzBdID09PSBcIi9cIikgeyAvLyBzb3VyY2UgaXMgYW4gYWJzb2x1dGUgcGF0aFxuICAgICAgICAgICAgICAgIHNyY1JldHVybnMgPSBnZXRQcmVEaXJlY3Rvcnkoc291cmNlKTtcbiAgICAgICAgICAgICAgICBzcmNPYmplY3QgPSBzcmNSZXR1cm5zWzBdOyAvLyB0aGUgb2JqZWN0IHByb3ZpZGVkIGZpbGUgb3IgZGlyZWN0b3J5IHNob3VsZCBleGlzdCBpblxuICAgICAgICAgICAgICAgIHNyY0ZpbGUgPSBzcmNSZXR1cm5zWzFdOyAvLyB0aGUgZmlsZSBvciBkaXJlY3RvcnlcbiAgICAgICAgICAgICAgICBzcmNQYXRoID0gc3JjUmV0dXJuc1syXTsgLy8gYSBwYXRoIHRoYXQgcmVwcmVzZW50cyB0aGUgc291cmNlIG9iamVjdFxuXG4gICAgICAgICAgICAgICAgaWYgKHNyY09iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygc3JjT2JqZWN0ID09PSAnb2JqZWN0JykgeyAvLyBzb3VyY2Ugb2JqZWN0IGV4aXN0c1xuXG4gICAgICAgICAgICAgICAgICAgIHNyY0ZpbGVzID0gc3JjT2JqZWN0LmZpbGVzO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXJTZWFyY2hGaWxlcyhzcmNGaWxlLCBzcmNGaWxlcykpIHsgLy8gZmlsZSBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyY0ZpbGVPYmplY3QgPSBnZXRGaWxlKHNyY0ZpbGUsIHNyY0ZpbGVzKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNyY09iamVjdC5oYXNPd25Qcm9wZXJ0eShzcmNGaWxlKSkgeyAvLyBkaXJlY3RvcnkgZXhpc3RzXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmNEaXJPYmplY3QgPSBzcmNPYmplY3Rbc3JjRmlsZV07XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5tdjogY2Fubm90IG1vdmUgJ1wiICsgc3JjRmlsZSArIFwiJzogTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeTwvcD5cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gZXJyb3Igc291cmNlIG9iamVjdCBkb2Vzbid0IGV4aXN0XG4gICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPm12OiBjYW5ub3QgbW92ZSAnXCIgKyBzcmNGaWxlICsgXCInOiBObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5PC9wPlwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gc291cmNlIGlzIGEgcmVsYXRpdmUgcGF0aFxuICAgICAgICAgICAgICAgIHNyY09iamVjdCA9IHB3ZFsxXTtcbiAgICAgICAgICAgICAgICBzcmNGaWxlID0gc291cmNlO1xuICAgICAgICAgICAgICAgIHNyY1BhdGggPSBwd2RbMl07XG4gICAgICAgICAgICAgICAgc3JjRmlsZXMgPSBzcmNPYmplY3QuZmlsZXM7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGlyU2VhcmNoRmlsZXMoc3JjRmlsZSwgc3JjRmlsZXMpKSB7IC8vIGlzIGl0IGEgZmlsZVxuICAgICAgICAgICAgICAgICAgICBzcmNGaWxlT2JqZWN0ID0gZ2V0RmlsZShzcmNGaWxlLCBzcmNGaWxlcyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNyY09iamVjdC5oYXNPd25Qcm9wZXJ0eShzcmNGaWxlKSkgeyAvLyBvciBhIGZvbGRlclxuICAgICAgICAgICAgICAgICAgICBzcmNEaXJPYmplY3QgPSBzcmNPYmplY3Rbc3JjRmlsZV07XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBlcnJvciB0aGUgZmlsZSBvciBmb2xkZXIgZG9lc24ndCBleGlzdFxuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5tdjogY2Fubm90IG1vdmUgJ1wiICsgc3JjRmlsZSArIFwiJzogTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeTwvcD5cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IC8vIGRvbmUgd2l0aCBhcmd1bWVudCBvbmUsIHNyY0ZpbGVPYmplY3Qgb3Igc3JjRGlyT2JqZWN0IGhhcyB2YXJpYWJsZSBwcmVwYXJlZFxuXG4gICAgICAgICAgICBpZiAoZGVzdGluYXRpb25bMF0gPT09IFwiL1wiICYmIGVycm9yID09PSBmYWxzZSkgeyAvLyBkZXN0aW5hdGlvbiBpcyBhbiBhYnNvbHV0ZSBwYXRoXG4gICAgICAgICAgICAgICAgZGVzdFJldHVybnMgPSBnZXRQcmVEaXJlY3RvcnkoZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgIGRlc3RPYmplY3QgPSBkZXN0UmV0dXJuc1swXTtcbiAgICAgICAgICAgICAgICBkZXN0RmlsZSA9IGRlc3RSZXR1cm5zWzFdO1xuICAgICAgICAgICAgICAgIGRlc3RQYXRoID0gZGVzdFJldHVybnNbMl07XG4gICAgICAgICAgICAgICAgZGVzdCA9IHBhdGhTdHJpbmdUb09iamVjdChkZXN0aW5hdGlvbik7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGVzdCAhPT0gbnVsbCAmJiB0eXBlb2YgZGVzdCA9PT0gJ29iamVjdCcpIHsgLy8gZGVzdGluYXRpb24gb2JqZWN0IGV4aXN0c1xuXG4gICAgICAgICAgICAgICAgICAgIGRlc3RGaWxlcyA9IGRlc3QuZmlsZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpclNlYXJjaEZpbGVzKHNyY0ZpbGUsIGRlc3RGaWxlcykpIHsgLy8gZXJyb3IsIGZpbGUgYnkgdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cyBpbiBkZXN0aW5hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPm12OiBjYW5ub3QgbW92ZSAnXCIgKyBzcmNGaWxlICsgXCInOiBGaWxlIHdpdGggdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cyBpbiBkZXN0aW5hdGlvbiBkaXJlY3Rvcnk8L3A+XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZXN0Lmhhc093blByb3BlcnR5KHNyY0ZpbGUpKSB7IC8vIGVycm9yLCBkaXJlY3RvcnkgYnkgdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cyBpbiBkZXN0aW5hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPm12OiBjYW5ub3QgbW92ZSAnXCIgKyBzcmNGaWxlICsgXCInOiBEaXJlY3Rvcnkgd2l0aCB0aGUgc2FtZSBuYW1lIGFscmVhZHkgZXhpc3RzIGluIGRlc3RpbmF0aW9uIGRpcmVjdG9yeTwvcD5cIjtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNyY0ZpbGVPYmplY3QgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3JjRGlyT2JqZWN0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdFtzcmNGaWxlXSA9IHNyY0Rpck9iamVjdDsgLy8gYWRkIHRoZSBhcmcxIGRpcmVjdG9yeSB0byB0aGUgZGVzdGluYXRpb24gZGlyZWN0b3J5XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3JjT2JqZWN0W3NyY0ZpbGVdOyAvLyByZW1vdmUgYXJnMSBkaXJlY3RvcnkgZnJvbSBwd2RcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWwuc2F2ZS5mcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNyY0ZpbGVPYmplY3QgPT09ICdvYmplY3QnICYmIHNyY0Rpck9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHNyY0ZpbGVzLmluZGV4T2Yoc3JjRmlsZU9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdGaWxlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzcmNGaWxlT2JqZWN0KSk7IC8vIGNvcHkgc291cmNlIGZpbGUgb2JqZWN0XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNyY0ZpbGVzLnNwbGljZShpbmRleCwgMSk7IC8vIHJlbW92ZSBhcmcxIGZpbGUgZnJvbSBwd2QgZmlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RGaWxlcy5wdXNoKG5ld0ZpbGUpOyAvLyBhZGQgaXQgdG8gdGhlIGRlc3RpbmF0aW9uIGZvbGRlcidzIGZpbGVzXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1pbmFsLnNhdmUuZnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZXN0T2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBkZXN0T2JqZWN0ID09PSAnb2JqZWN0Jykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXJTZWFyY2hGaWxlcyhkZXN0RmlsZSwgZGVzdE9iamVjdC5maWxlcykpIHsgLy8gZXJyb3IsIGZpbGUgYnkgdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cyBpbiBkZXN0aW5hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPm12OiBjYW5ub3QgbW92ZSAnXCIgKyBzcmNGaWxlICsgXCInOiBGaWxlIHdpdGggdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cyBpbiBkZXN0aW5hdGlvbiBkaXJlY3Rvcnk8L3A+XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZXN0T2JqZWN0Lmhhc093blByb3BlcnR5KGRlc3RGaWxlKSkgeyAvLyBlcnJvciwgZGlyZWN0b3J5IGJ5IHRoZSBzYW1lIG5hbWUgYWxyZWFkeSBleGlzdHMgaW4gZGVzdGluYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5tdjogY2Fubm90IG1vdmUgJ1wiICsgc3JjRmlsZSArIFwiJzogRGlyZWN0b3J5IHdpdGggdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cyBpbiBkZXN0aW5hdGlvbiBkaXJlY3Rvcnk8L3A+XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzcmNGaWxlT2JqZWN0ID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHNyY0Rpck9iamVjdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RPYmplY3RbZGVzdEZpbGVdID0gc3JjRGlyT2JqZWN0OyAvLyBhZGQgdGhlIGFyZzEgZGlyZWN0b3J5IHRvIHRoZSBkZXN0aW5hdGlvbiBkaXJlY3RvcnlcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzcmNPYmplY3Rbc3JjRmlsZV07IC8vIHJlbW92ZSBhcmcxIGRpcmVjdG9yeSBmcm9tIHB3ZFxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbC5zYXZlLmZzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3JjRmlsZU9iamVjdCA9PT0gJ29iamVjdCcgJiYgc3JjRGlyT2JqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gc3JjRmlsZXMuaW5kZXhPZihzcmNGaWxlT2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ZpbGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNyY0ZpbGVPYmplY3QpKTsgLy8gY29weSBzb3VyY2UgZmlsZSBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ZpbGUubmFtZSA9IGRlc3RGaWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RmlsZS5zaG9ydG5hbWUgPSBkZXN0RmlsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ZpbGUuY3JlYXRlZCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdGaWxlLm1vZGlmaWVkID0gbmV3IERhdGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc3JjRmlsZXMuc3BsaWNlKGluZGV4LCAxKTsgLy8gcmVtb3ZlIGFyZzEgZmlsZSBmcm9tIHB3ZCBmaWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdE9iamVjdC5maWxlcy5wdXNoKG5ld0ZpbGUpOyAvLyBhZGQgaXQgdG8gdGhlIGRlc3RpbmF0aW9uIGZvbGRlcidzIGZpbGVzXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1pbmFsLnNhdmUuZnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gZXJyb3IgZGVzdGluYXRpb24gb2JqZWN0IGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPm12OiBjYW5ub3QgbW92ZSAnXCIgKyBzcmNGaWxlICsgXCInOiBEZXN0aW5hdGlvbiBkaXJlY3RvcnkgJ1wiICsgZGVzdGluYXRpb24gKyBcIicgZG9lcyBub3QgZXhpc3Q8L3A+XCI7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IgPT09IGZhbHNlKSB7IC8vIGRlc3RpbmF0aW9uIGlzIGEgcmVsYXRpdmUgcGF0aFxuICAgICAgICAgICAgICAgIGRlc3RPYmplY3QgPSBnZXREaXJlY3RvcnkoZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgICAgIGRlc3RGaWxlID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICAgICAgZGVzdFBhdGggPSBwd2RbMl07XG5cbiAgICAgICAgICAgICAgICBpZiAoZGVzdE9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2YgZGVzdE9iamVjdCA9PT0gJ29iamVjdCcpIHsgLy8gaWYgZGVzdGluYXRpb24gcHJvdmlkZWQgaXMgYSBrZXkgb2YgdGhlIHB3ZFxuICAgICAgICAgICAgICAgICAgICBkZXN0RmlsZXMgPSBkZXN0T2JqZWN0LmZpbGVzO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXJTZWFyY2hGaWxlcyhzcmNGaWxlLCBkZXN0RmlsZXMpKSB7IC8vIGVycm9yLCBmaWxlIGJ5IHRoZSBzYW1lIG5hbWUgYWxyZWFkeSBleGlzdHMgaW4gZGVzdGluYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5tdjogY2Fubm90IG1vdmUgJ1wiICsgc3JjRmlsZSArIFwiJzogRmlsZSB3aXRoIHRoZSBzYW1lIG5hbWUgYWxyZWFkeSBleGlzdHMgaW4gZGVzdGluYXRpb24gZGlyZWN0b3J5PC9wPlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVzdE9iamVjdC5oYXNPd25Qcm9wZXJ0eShzcmNGaWxlKSkgeyAvLyBlcnJvciwgZGlyZWN0b3J5IGJ5IHRoZSBzYW1lIG5hbWUgYWxyZWFkeSBleGlzdHMgaW4gZGVzdGluYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5tdjogY2Fubm90IG1vdmUgJ1wiICsgc3JjRmlsZSArIFwiJzogRGlyZWN0b3J5IHdpdGggdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cyBpbiBkZXN0aW5hdGlvbiBkaXJlY3Rvcnk8L3A+XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzcmNGaWxlT2JqZWN0ID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHNyY0Rpck9iamVjdCA9PT0gJ29iamVjdCcpIHsgLy8gdGhlIHNvdXJjZSBpcyBhIGRpcmVjdG9yeVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdE9iamVjdFtzcmNGaWxlXSA9IHNyY0Rpck9iamVjdDsgLy8gYWRkIHRoZSBzb3VyY2UgZGlyZWN0b3J5IHRvIHRoZSBkZXN0aW5hdGlvbiBkaXJlY3RvcnlcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzcmNPYmplY3Rbc3JjRmlsZV07IC8vIGRlbGV0ZSB0aGUgc291cmNlIGRpcmVjdG9yeSBvYmplY3RcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWwuc2F2ZS5mcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNyY0ZpbGVPYmplY3QgPT09ICdvYmplY3QnICYmIHNyY0Rpck9iamVjdCA9PT0gdW5kZWZpbmVkKSB7IC8vIHRoZSBzb3VyY2UgaXMgYSBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHNyY0ZpbGVzLmluZGV4T2Yoc3JjRmlsZU9iamVjdCk7IC8vIGRldGVybWluZSBpbmRleCBvZiBzb3VyY2UgZmlsZSBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ZpbGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHNyY0ZpbGVPYmplY3QpKTsgLy8gY29weSBzb3VyY2UgZmlsZSBvYmplY3RcblxuICAgICAgICAgICAgICAgICAgICAgICAgc3JjRmlsZXMuc3BsaWNlKGluZGV4LCAxKTsgLy8gcmVtb3ZlIGFyZzEgZmlsZSBmcm9tIHB3ZCBmaWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdEZpbGVzLnB1c2gobmV3RmlsZSk7IC8vIGFkZCBpdCB0byB0aGUgZGVzdGluYXRpb24gZm9sZGVyJ3MgZmlsZXNcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWwuc2F2ZS5mcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNyY0ZpbGVPYmplY3QgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3JjRGlyT2JqZWN0ID09PSAnb2JqZWN0JykgeyAvLyB0aGUgc291cmNlIGlzIGEgZGlyZWN0b3J5XG4gICAgICAgICAgICAgICAgICAgICAgICBwd2RbMV1bZGVzdEZpbGVdID0gc3JjRGlyT2JqZWN0OyAvLyBhZGQgdGhlIHNvdXJjZSBkaXJlY3RvcnkgdG8gdGhlIGRlc3RpbmF0aW9uIGRpcmVjdG9yeVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNyY09iamVjdFtzcmNGaWxlXTsgLy8gZGVsZXRlIHRoZSBzb3VyY2UgZGlyZWN0b3J5IG9iamVjdFxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbC5zYXZlLmZzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3JjRmlsZU9iamVjdCA9PT0gJ29iamVjdCcgJiYgc3JjRGlyT2JqZWN0ID09PSB1bmRlZmluZWQpIHsgLy8gdGhlIHNvdXJjZSBpcyBhIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gc3JjRmlsZXMuaW5kZXhPZihzcmNGaWxlT2JqZWN0KTsgLy8gZGV0ZXJtaW5lIGluZGV4IG9mIHNvdXJjZSBmaWxlIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RmlsZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3JjRmlsZU9iamVjdCkpOyAvLyBjb3B5IHNvdXJjZSBmaWxlIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RmlsZS5uYW1lID0gZGVzdEZpbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdGaWxlLnNob3J0bmFtZSA9IGRlc3RGaWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RmlsZS5jcmVhdGVkID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ZpbGUubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmNGaWxlcy5zcGxpY2UoaW5kZXgsIDEpOyAvLyByZW1vdmUgYXJnMSBmaWxlIGZyb20gcHdkIGZpbGVzXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0RmlsZXMucHVzaChuZXdGaWxlKTsgLy8gYWRkIGl0IHRvIHRoZSBkZXN0aW5hdGlvbiBmb2xkZXIncyBmaWxlc1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbC5zYXZlLmZzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPm12OiBjYW5ub3QgbW92ZSAnXCIgKyBzb3VyY2UgKyBcIicgdG8gYSBzdWJkaXJlY3Rvcnkgb2YgaXRzZWxmXCI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gQ29weS4gTWV0aG9kczogZGVmYXVsdENhc2UsIHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGNwOiB7XG4gICAgICAgIGRlZmF1bHRDYXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuZXdGaWxlLFxuICAgICAgICAgICAgICAgIGZpbGVPYmplY3QsXG4gICAgICAgICAgICAgICAgc3JjUGF0aCxcbiAgICAgICAgICAgICAgICBzcmNPYmplY3QsXG4gICAgICAgICAgICAgICAgc3JjRmlsZSxcbiAgICAgICAgICAgICAgICBzcmNSZXR1cm5zLFxuICAgICAgICAgICAgICAgIGRlc3RQYXRoLFxuICAgICAgICAgICAgICAgIGRlc3RPYmplY3QsXG4gICAgICAgICAgICAgICAgZGVzdEZpbGUsXG4gICAgICAgICAgICAgICAgZGVzdFJldHVybnMsXG4gICAgICAgICAgICAgICAgZGVzdERpck9iaixcbiAgICAgICAgICAgICAgICBmaWxlID0gY29tbWFuZEFyZ3NbMV0sXG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24gPSBjb21tYW5kQXJnc1syXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGZpbGVbMF0gPT09IFwiL1wiKSB7IC8vIGFyZzEsIGFic29sdXRlIHBhdGhcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBzcmNSZXR1cm5zID0gZ2V0UHJlRGlyZWN0b3J5KGZpbGUpO1xuICAgICAgICAgICAgICAgIHNyY09iamVjdCA9IHNyY1JldHVybnNbMF07XG4gICAgICAgICAgICAgICAgc3JjRmlsZSA9IHNyY1JldHVybnNbMV07XG4gICAgICAgICAgICAgICAgc3JjUGF0aCA9IHNyY1JldHVybnNbMl07XG5cbiAgICAgICAgICAgICAgICBpZiAoc3JjT2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBzcmNPYmplY3QgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBzcmNGaWxlcyA9IHNyY09iamVjdC5maWxlcztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlyU2VhcmNoRmlsZXMoc3JjRmlsZSwgc3JjRmlsZXMpKSB7IC8vIGZpbGUgZXhpc3RzLCBjb3B5IGl0XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyY09iamVjdCA9IGdldEZpbGUoc3JjRmlsZSwgc3JjRmlsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RmlsZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3JjT2JqZWN0KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gZXJyb3IsIGZpbGUgdG8gYmUgY29waWVkIGRvZXNuJ3QgZXhpc3RcblxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPmNwOiBjYW5ub3QgY29weSAnXCIgKyBzcmNGaWxlICsgXCInOiBGaWxlIGRvZXMgbm90IGV4aXN0PC9wPlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgdGhlIHByb3ZpZGVkIGxvY2F0aW9uIGZvciB0aGUgZm9sZGVyJ3MgY3JlYXRpb24gd2FzIG5vdCBhIHBsYWNlIGluIHRoZSBmc1xuXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5jcDogY2Fubm90IGNvcHkgJ1wiICsgc3JjRmlsZSArIFwiJzogRGlyZWN0b3J5ICdcIiArIHNyY1BhdGggKyBcIicgZG9lcyBub3QgZXhpc3Q8L3A+XCI7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBhcmcxLCByZWxhdGl2ZSBwYXRoXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc3JjRmlsZXMgPSBwd2RbMV0uZmlsZXM7XG4gICAgICAgICAgICAgICAgc3JjRmlsZSA9IGZpbGU7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGlyU2VhcmNoRmlsZXMoZmlsZSwgc3JjRmlsZXMpKSB7IC8vIGlmIHRoZSBmaWxlIGV4aXN0c1xuXG4gICAgICAgICAgICAgICAgICAgIGZpbGVPYmplY3QgPSBnZXRGaWxlKGZpbGUsIHNyY0ZpbGVzKTsgLy8gcmV0cmlldmUgaXRcbiAgICAgICAgICAgICAgICAgICAgbmV3RmlsZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZmlsZU9iamVjdCkpOyAvLyBjb3B5IGl0XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5jcDogY2Fubm90IGNvcHkgJ1wiICsgZmlsZSArIFwiJzogTm8gc3VjaCBmaWxlPC9wPlwiO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZGVzdGluYXRpb25bMF0gPT09IFwiL1wiKSB7IC8vIGFyZzIsIGFic29sdXRlIHBhdGgsIGlmIHRoZSBmaWxlIGlzIGJlaW5nIHJlbG9jYXRlZFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vcHJvYmxlbWF0aWMgaWYgZGVzdGluYXRpb24gZGlyZWN0b3J5IGlzIHRoZSBwd2QsIG5ldyBmaWxlIG9mIHNhbWUgbmFtZSBpbiBzYW1lIGRpcmVjdG9yeSAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZGVzdERpck9iaiA9IHBhdGhTdHJpbmdUb09iamVjdChkZXN0aW5hdGlvbik7IC8vIGNvbnZlcnQgdGhlIHByb3ZpZGVkIHN0cmluZyB0byB0aGUgbG9jYXRpb24gaXQgcmVwcmVzZW50c1xuICAgICAgICAgICAgICAgIGRlc3RSZXR1cm5zID0gZ2V0UHJlRGlyZWN0b3J5KGRlc3RpbmF0aW9uKTsgLy8gaW4gY2FzZSB0aGUgZGVzdGluYXRpb24gcHJvdmlkZWQgaW5jbHVkZXMgYSBuZXcgbmFtZVxuICAgICAgICAgICAgICAgIGRlc3RPYmplY3QgPSBkZXN0UmV0dXJuc1swXTtcbiAgICAgICAgICAgICAgICBkZXN0RmlsZSA9IGRlc3RSZXR1cm5zWzFdO1xuICAgICAgICAgICAgICAgIGRlc3RQYXRoID0gZGVzdFJldHVybnNbMl07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGRlc3RPYmplY3QuaGFzT3duUHJvcGVydHkoZGVzdEZpbGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RGaWxlcyA9IGRlc3REaXJPYmouZmlsZXM7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlyU2VhcmNoRmlsZXMoc3JjRmlsZSwgZGVzdEZpbGVzKSkgeyAvLyBlcnJvciwgdGhlIGZpbGUgYWxyZWFkeSBleGlzdHMgaW4gdGhlIGRlc3RpbmF0aW9uIGZvbGRlclxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+Y3A6IGNhbm5vdCBjb3B5ICdcIiArIHNyY0ZpbGUgKyBcIic6IEZpbGUgJ1wiICsgc3JjRmlsZSArIFwiJyBhbHJlYWR5IGV4aXN0cyBpbiBkZXN0aW5hdGlvbiBkaXJlY3Rvcnk8L3A+XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdEZpbGVzLnB1c2gobmV3RmlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbC5zYXZlLmZzKCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGlyU2VhcmNoRmlsZXMoZGVzdEZpbGUsIGRlc3RPYmplY3QuZmlsZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+Y3A6IGNhbm5vdCBjb3B5ICdcIiArIHNyY0ZpbGUgKyBcIic6IEZpbGUgJ1wiICsgc3JjRmlsZSArIFwiJyBhbHJlYWR5IGV4aXN0cyBpbiAnXCIgKyBkZXN0UGF0aCArIFwiJzwvcD5cIjtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVzdE9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2YgZGVzdE9iamVjdCA9PT0gJ29iamVjdCcpIHtcblxuICAgICAgICAgICAgICAgICAgICBuZXdGaWxlLm5hbWUgPSBkZXN0RmlsZTtcbiAgICAgICAgICAgICAgICAgICAgbmV3RmlsZS5zaG9ydG5hbWUgPSBkZXN0RmlsZTtcbiAgICAgICAgICAgICAgICAgICAgbmV3RmlsZS5jcmVhdGVkID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3RmlsZS5tb2RpZmllZCA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVzdE9iamVjdC5maWxlcy5wdXNoKG5ld0ZpbGUpOyAvLyBhbmQgcHVzaCBpdCB0aGUgZmlsZXMgYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRlcm1pbmFsLnNhdmUuZnMoKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+Y3A6IGNhbm5vdCBjb3B5ICdcIiArIHNyY0ZpbGUgKyBcIic6IERpcmVjdG9yeSAnXCIgKyBkZXN0UGF0aCArIFwiJyBkb2VzIG5vdCBleGlzdDwvcD5cIjtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gYXJnMiwgcmVsYXRpdmUgcGF0aCwgaWYgdGhlIGZpbGUgaXNuJ3QgYmVpbmcgcmVsb2NhdGVkLCByZW5hbWUgaXRcblxuICAgICAgICAgICAgICAgIGlmIChmaWxlICE9PSBkZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbmV3RmlsZS5uYW1lID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICAgICAgICAgIG5ld0ZpbGUuc2hvcnRuYW1lID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICAgICAgICAgIG5ld0ZpbGUuY3JlYXRlZCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0ZpbGUubW9kaWZpZWQgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlc3RGaWxlcyA9IHB3ZFsxXS5maWxlcztcbiAgICAgICAgICAgICAgICAgICAgZGVzdEZpbGVzLnB1c2gobmV3RmlsZSk7IC8vIGFuZCBwdXNoIGl0IHRoZSBmaWxlcyBhcnJheVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdGVybWluYWwuc2F2ZS5mcygpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gZXJyb3IsIGZpbGUgb2YgdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cyBpbiBwd2RcblxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+Y3A6IGNhbm5vdCBjb3B5ICdcIiArIGZpbGUgKyBcIic6IE5ldyBmaWxlIG11c3QgaGF2ZSBhIGRpZmZlcmVudCBuYW1lPC9wPlwiO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByOiBmdW5jdGlvbigpIHtcbiAgICAgICAgXG4gICAgICAgICAgICB2YXIgc291cmNlID0gY29tbWFuZEFyZ3NbMl0sXG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24gPSBjb21tYW5kQXJnc1szXSxcbiAgICAgICAgICAgICAgICBlcnJvciA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNyY1JldHVybnMsXG4gICAgICAgICAgICAgICAgc3JjT2JqZWN0LFxuICAgICAgICAgICAgICAgIHNyY0ZvbGRlcixcbiAgICAgICAgICAgICAgICBzcmNQYXRoLFxuICAgICAgICAgICAgICAgIHNyY0Rpck9iamVjdCxcbiAgICAgICAgICAgICAgICBkZXN0UmV0dXJucyxcbiAgICAgICAgICAgICAgICBkZXN0T2JqZWN0LFxuICAgICAgICAgICAgICAgIGRlc3RGb2xkZXIsXG4gICAgICAgICAgICAgICAgZGVzdFBhdGgsXG4gICAgICAgICAgICAgICAgZGVzdCxcbiAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICBuZXdGaWxlO1xuXG5cbiAgICAgICAgICAgIGlmIChzb3VyY2VbMF0gPT09IFwiL1wiKSB7IC8vIHNvdXJjZSBpcyBhbiBhYnNvbHV0ZSBwYXRoXG4gICAgICAgICAgICAgICAgc3JjUmV0dXJucyA9IGdldFByZURpcmVjdG9yeShzb3VyY2UpO1xuICAgICAgICAgICAgICAgIHNyY09iamVjdCA9IHNyY1JldHVybnNbMF07IC8vIHRoZSBvYmplY3QgcHJvdmlkZWQgZGlyZWN0b3J5IHNob3VsZCBleGlzdCBpblxuICAgICAgICAgICAgICAgIHNyY0ZvbGRlciA9IHNyY1JldHVybnNbMV07IC8vIHRoZSBkaXJlY3RvcnlcbiAgICAgICAgICAgICAgICBzcmNQYXRoID0gc3JjUmV0dXJuc1syXTsgLy8gYSBwYXRoIHRoYXQgcmVwcmVzZW50cyB0aGUgc291cmNlIG9iamVjdFxuXG4gICAgICAgICAgICAgICAgaWYgKHNyY09iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygc3JjT2JqZWN0ID09PSAnb2JqZWN0JykgeyAvLyBzb3VyY2Ugb2JqZWN0IGV4aXN0c1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcmNPYmplY3QuaGFzT3duUHJvcGVydHkoc3JjRm9sZGVyKSkgeyAvLyBkaXJlY3RvcnkgZXhpc3RzXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmNEaXJPYmplY3QgPSBzcmNPYmplY3Rbc3JjRm9sZGVyXTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPmNwOiBjYW5ub3QgY29weSAnXCIgKyBzcmNGb2xkZXIgKyBcIic6IE5vIHN1Y2ggZGlyZWN0b3J5PC9wPlwiO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBlcnJvciBzb3VyY2Ugb2JqZWN0IGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+Y3A6IGNhbm5vdCBjb3B5ICdcIiArIHNyY0ZvbGRlciArIFwiJzogTm8gc3VjaCBkaXJlY3Rvcnk8L3A+XCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBzb3VyY2UgaXMgYSByZWxhdGl2ZSBwYXRoXG4gICAgICAgICAgICAgICAgc3JjT2JqZWN0ID0gcHdkWzFdO1xuICAgICAgICAgICAgICAgIHNyY0ZvbGRlciA9IHNvdXJjZTtcbiAgICAgICAgICAgICAgICBzcmNQYXRoID0gcHdkWzJdO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAoc3JjT2JqZWN0Lmhhc093blByb3BlcnR5KHNyY0ZvbGRlcikpIHsgLy8gb3IgYSBmb2xkZXJcbiAgICAgICAgICAgICAgICAgICAgc3JjRGlyT2JqZWN0ID0gc3JjT2JqZWN0W3NyY0ZvbGRlcl07XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBlcnJvciB0aGUgZmlsZSBvciBmb2xkZXIgZG9lc24ndCBleGlzdFxuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5jcDogY2Fubm90IGNvcHkgJ1wiICsgc3JjRm9sZGVyICsgXCInOiBObyBzdWNoIGRpcmVjdG9yeTwvcD5cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IC8vIGRvbmUgd2l0aCBhcmd1bWVudCBvbmUsIHNyY0Rpck9iamVjdCBoYXMgdmFyaWFibGUgcHJlcGFyZWRcblxuICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uWzBdID09PSBcIi9cIiAmJiBlcnJvciA9PT0gZmFsc2UpIHsgLy8gZGVzdGluYXRpb24gaXMgYW4gYWJzb2x1dGUgcGF0aFxuICAgICAgICAgICAgICAgIGRlc3RSZXR1cm5zID0gZ2V0UHJlRGlyZWN0b3J5KGRlc3RpbmF0aW9uKTtcbiAgICAgICAgICAgICAgICBkZXN0T2JqZWN0ID0gZGVzdFJldHVybnNbMF07XG4gICAgICAgICAgICAgICAgZGVzdEZvbGRlciA9IGRlc3RSZXR1cm5zWzFdO1xuICAgICAgICAgICAgICAgIGRlc3RQYXRoID0gZGVzdFJldHVybnNbMl07XG4gICAgICAgICAgICAgICAgZGVzdCA9IHBhdGhTdHJpbmdUb09iamVjdChkZXN0aW5hdGlvbik7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGVzdCAhPT0gbnVsbCAmJiB0eXBlb2YgZGVzdCA9PT0gJ29iamVjdCcpIHsgLy8gZGVzdGluYXRpb24gb2JqZWN0IGV4aXN0c1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXN0Lmhhc093blByb3BlcnR5KHNyY0ZvbGRlcikpIHsgLy8gZXJyb3IsIGRpcmVjdG9yeSBieSB0aGUgc2FtZSBuYW1lIGFscmVhZHkgZXhpc3RzIGluIGRlc3RpbmF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+Y3A6IGNhbm5vdCBjb3B5ICdcIiArIHNyY0ZvbGRlciArIFwiJzogRGlyZWN0b3J5IHdpdGggdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cyBpbiBkZXN0aW5hdGlvbiBkaXJlY3Rvcnk8L3A+XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3JjRGlyT2JqZWN0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdFtzcmNGb2xkZXJdID0gc3JjRGlyT2JqZWN0OyAvLyBhZGQgdGhlIGFyZzEgZGlyZWN0b3J5IHRvIHRoZSBkZXN0aW5hdGlvbiBkaXJlY3RvcnlcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWwuc2F2ZS5mcygpO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVzdE9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2YgZGVzdE9iamVjdCA9PT0gJ29iamVjdCcpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdE9iamVjdC5oYXNPd25Qcm9wZXJ0eShkZXN0Rm9sZGVyKSkgeyAvLyBlcnJvciwgZGlyZWN0b3J5IGJ5IHRoZSBzYW1lIG5hbWUgYWxyZWFkeSBleGlzdHMgaW4gZGVzdGluYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5jcDogY2Fubm90IGNvcHkgJ1wiICsgc3JjRm9sZGVyICsgXCInOiBEaXJlY3Rvcnkgd2l0aCB0aGUgc2FtZSBuYW1lIGFscmVhZHkgZXhpc3RzIGluIGRlc3RpbmF0aW9uIGRpcmVjdG9yeTwvcD5cIjtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzcmNEaXJPYmplY3QgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0T2JqZWN0W2Rlc3RGb2xkZXJdID0gc3JjRGlyT2JqZWN0OyAvLyBhZGQgdGhlIGFyZzEgZGlyZWN0b3J5IHRvIHRoZSBkZXN0aW5hdGlvbiBkaXJlY3RvcnlcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYWwuc2F2ZS5mcygpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBlcnJvciBkZXN0aW5hdGlvbiBvYmplY3QgZG9lc24ndCBleGlzdFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+Y3A6IGNhbm5vdCBjb3B5ICdcIiArIHNyY0ZvbGRlciArIFwiJzogRGVzdGluYXRpb24gZGlyZWN0b3J5ICdcIiArIGRlc3RpbmF0aW9uICsgXCInIGRvZXMgbm90IGV4aXN0PC9wPlwiO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yID09PSBmYWxzZSkgeyAvLyBkZXN0aW5hdGlvbiBpcyBhIHJlbGF0aXZlIHBhdGhcbiAgICAgICAgICAgICAgICBkZXN0T2JqZWN0ID0gZ2V0RGlyZWN0b3J5KGRlc3RpbmF0aW9uKTtcbiAgICAgICAgICAgICAgICBwcmVEZXN0T2JqZWN0ID0gZ2V0UHJlRGlyZWN0b3J5KHB3ZFsyXSk7XG4gICAgICAgICAgICAgICAgZGVzdEZvbGRlciA9IGRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgICAgIGRlc3RQYXRoID0gcHdkWzJdO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRlc3RPYmplY3QpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHByZURlc3RPYmplY3QpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRlc3RPYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIGRlc3RPYmplY3QgPT09ICdvYmplY3QnKSB7IC8vIGlmIGRlc3RpbmF0aW9uIHByb3ZpZGVkIGlzIGEga2V5IG9mIHRoZSBwd2RcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdE9iamVjdC5oYXNPd25Qcm9wZXJ0eShzcmNGb2xkZXIpKSB7IC8vIGVycm9yLCBkaXJlY3RvcnkgYnkgdGhlIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0cyBpbiBkZXN0aW5hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPmNwOiBjYW5ub3QgY29weSAnXCIgKyBzcmNGb2xkZXIgKyBcIic6IERpcmVjdG9yeSB3aXRoIHRoZSBzYW1lIG5hbWUgYWxyZWFkeSBleGlzdHMgaW4gZGVzdGluYXRpb24gZGlyZWN0b3J5PC9wPlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNyY0Rpck9iamVjdCA9PT0gJ29iamVjdCcpIHsgLy8gdGhlIHNvdXJjZSBpcyBhIGRpcmVjdG9yeVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdE9iamVjdFtzcmNGb2xkZXJdID0gc3JjRGlyT2JqZWN0OyAvLyBhZGQgdGhlIHNvdXJjZSBkaXJlY3RvcnkgdG8gdGhlIGRlc3RpbmF0aW9uIGRpcmVjdG9yeVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hbC5zYXZlLmZzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcmVEZXN0T2JqZWN0WzBdICE9PSBudWxsICYmIHR5cGVvZiBwcmVEZXN0T2JqZWN0WzBdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcHdkWzFdW2Rlc3RGb2xkZXJdID0gc3JjRGlyT2JqZWN0OyAvLyBhZGQgdGhlIHNvdXJjZSBkaXJlY3RvcnkgdG8gdGhlIGRlc3RpbmF0aW9uIGRpcmVjdG9yeVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRlcm1pbmFsLnNhdmUuZnMoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gSWYgZmlsZSBkb2Vzbid0IGV4aXN0IGluIHB3ZCwgY3JlYXRlIGl0XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB0b3VjaDogZnVuY3Rpb24oKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgZmlsZXMsXG4gICAgICAgICAgICBmaWxlQm9vbCxcbiAgICAgICAgICAgIHJldHVybnMsXG4gICAgICAgICAgICBkaXJPYmplY3QsXG4gICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgIG5ld0ZpbGUsXG4gICAgICAgICAgICBmaWxlTmFtZSA9IGNvbW1hbmRBcmdzLnNsaWNlKDEpLmpvaW4oXCIgXCIpO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGlmIChmaWxlTmFtZVswXSA9PT0gXCIvXCIpIHsgLy8gaWYgdGhlIGRlc3RpbmF0aW9uIGZvbGRlciBpcyBsb2NhdGVkIGVsc2V3aGVyZSBpbiB0aGUgZnNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJucyA9IGdldFByZURpcmVjdG9yeShmaWxlTmFtZSk7XG4gICAgICAgICAgICBkaXJPYmplY3QgPSByZXR1cm5zWzBdO1xuICAgICAgICAgICAgZmlsZSA9IHJldHVybnNbMV07XG4gICAgICAgICAgICBwYXRoID0gcmV0dXJuc1syXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGRpck9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2YgZGlyT2JqZWN0ID09PSAnb2JqZWN0JykgeyAvLyBpZiBpdCBpcyBhIGxvY2F0aW9uIGluIHRoZSBmc1xuICAgICAgICAgICAgICAgIGZpbGVzID0gZGlyT2JqZWN0LmZpbGVzO1xuICAgICAgICAgICAgICAgIGZpbGVCb29sID0gZGlyU2VhcmNoRmlsZXMoZmlsZSwgZmlsZXMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVCb29sKSB7IC8vIGlmIHRoZSBmb2xkZXIgdG8gYmUgY29waWVkIGV4aXN0c1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz50b3VjaDogY2Fubm90IGNyZWF0ZSBmaWxlICdcIiArIGZpbGUgKyBcIic6IEZpbGUgYWxyZWFkeSBleGlzdHMgaW4gJ1wiICsgcGF0aCArIFwiJzwvcD5cIjtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbmV3RmlsZSA9IG5ldyB0ZXJtaW5hbC5GaWxlKGZpbGUsIGZpbGUsIFwiIFwiKTtcblxuICAgICAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKG5ld0ZpbGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5GaWxlIGNhbGxlZCAnXCIgKyBmaWxlICsgXCInIHN1Y2Nlc3NmdWxseSBjcmVhdGVkIGluICdcIiArIHBhdGggKyBcIic8L3A+XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgdGVybWluYWwuc2F2ZS5mcygpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz50b3VjaDogY2Fubm90IGNyZWF0ZSBmaWxlICdcIiArIGZpbGUgKyBcIic6IERlc3RpbmF0aW9uIGRpcmVjdG9yeSAnXCIgKyBwYXRoICsgXCInIGRvZXMgbm90IGV4aXN0PC9wPlwiO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZmlsZXMgPSBwd2RbMV0uZmlsZXM7XG4gICAgICAgICAgICBmaWxlQm9vbCA9IGRpclNlYXJjaEZpbGVzKGZpbGVOYW1lLCBmaWxlcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChmaWxlQm9vbCA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPnRvdWNoOiBjYW5ub3QgY3JlYXRlIGZpbGUgJ1wiICsgZmlsZU5hbWUgKyBcIic6IEZpbGUgYWxyZWFkeSBleGlzdHM8L3A+XCI7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBuZXdGaWxlID0gbmV3IHRlcm1pbmFsLkZpbGUoZmlsZU5hbWUsIGZpbGVOYW1lLCBcIiBcIik7XG5cbiAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKG5ld0ZpbGUpO1xuXG4gICAgICAgICAgICAgICAgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPkZpbGUgY2FsbGVkICdcIiArIGZpbGVOYW1lICsgXCInIHN1Y2Nlc3NmdWxseSBjcmVhdGVkLjwvcD5cIjtcblxuICAgICAgICAgICAgICAgIHRlcm1pbmFsLnNhdmUuZnMoKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIEN5Y2xlIGZyb20gbGFzdCBpbmRleCBvZiB0ZXJtaW5hbC5oaXN0IGFycmF5XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB1cDogZnVuY3Rpb24oKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaGlzdGluZGV4ID0gdGVybWluYWwuc2V0dGluZ3MuaGlzdC5sZW5ndGg7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb3VudCA8PSB0ZXJtaW5hbC5zZXR0aW5ncy5oaXN0Lmxlbmd0aCAtIDEpIHtcblxuICAgICAgICAgICAgaGlzdGluZGV4LS07XG4gICAgICAgICAgICBpbnB1dC5zaXplID0gdGVybWluYWwuc2V0dGluZ3MuaGlzdFtoaXN0aW5kZXhdLmxlbmd0aCArIDE7XG4gICAgICAgICAgICBpbnB1dC52YWx1ZSA9IHRlcm1pbmFsLnNldHRpbmdzLmhpc3RbaGlzdGluZGV4XTtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBDeWNsZSBmcm9tIGxhc3QgaW5kZXggb2YgdGVybWluYWwuaGlzdCBhcnJheVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZG93bjogZnVuY3Rpb24oKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoY291bnQgPiAxKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGhpc3RpbmRleCsrO1xuICAgICAgICAgICAgaW5wdXQuc2l6ZSA9IHRlcm1pbmFsLnNldHRpbmdzLmhpc3RbaGlzdGluZGV4XS5sZW5ndGggKyAxO1xuICAgICAgICAgICAgaW5wdXQudmFsdWUgPSB0ZXJtaW5hbC5zZXR0aW5ncy5oaXN0W2hpc3RpbmRleF07XG4gICAgICAgICAgICBjb3VudC0tO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgIGlucHV0LnNpemUgPSAxO1xuICAgICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFRhYiBjb21wbGV0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB0YWJDb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICBcbiAgICAgICAgdmFyIHBhcnQxLFxuICAgICAgICAgICAgcmV0dXJucyxcbiAgICAgICAgICAgIGNvbW1hbmQsXG4gICAgICAgICAgICBjb21wbGV0aW9ucyA9IFtdLFxuICAgICAgICAgICAgY29tbWFuZElucHV0ID0gaW5wdXQudmFsdWUsXG4gICAgICAgICAgICBjb21tYW5kQXJncyA9IGNvbW1hbmRJbnB1dC5zcGxpdChcIiBcIik7XG4gICAgICAgIFxuICAgICAgICBpZiAoY29tbWFuZElucHV0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNvbW1hbmRBcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZvciAoY29tbWFuZCBpbiBjb21tYW5kcykge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1hbmRzW2NvbW1hbmRdLnN1YnN0cmluZygwLCBjb21tYW5kSW5wdXQubGVuZ3RoKSA9PT0gY29tbWFuZElucHV0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zLnB1c2goY29tbWFuZHNbY29tbWFuZF0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRpb25zWzBdICE9PSB1bmRlZmluZWQgJiYgY29tcGxldGlvbnNbMV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQudmFsdWUgPSBjb21wbGV0aW9uc1swXTtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2l6ZSA9IGNvbXBsZXRpb25zWzBdLmxlbmd0aCArIDE7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29tbWFuZEFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGNvbW1hbmRBcmdzWzFdWzBdID09PSBcIi9cIikge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJucyA9IHRhYkZ1bGwoY29tbWFuZEFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9ucyA9IHJldHVybnNbMF07XG4gICAgICAgICAgICAgICAgICAgIHBhcnQxID0gcmV0dXJuc1sxXTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0aW9uc1swXSAhPT0gdW5kZWZpbmVkICYmIGNvbXBsZXRpb25zWzBdICE9PSBcImZpbGVzXCIgJiYgY29tcGxldGlvbnNbMV0gPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGNvbW1hbmRBcmdzWzBdICsgXCIgXCIgKyBwYXJ0MSArIGNvbXBsZXRpb25zWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2l6ZSA9IGlucHV0LnZhbHVlLmxlbmd0aCArIDE7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIHRyeSB0byBjb21wbGV0ZSByZWxhdGl2ZSBwYXRocyB0byBmaWxlcyBvciBmb2xkZXJzXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9ucyA9IHRhYlJlbGF0aXZlKGNvbW1hbmRBcmdzWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0aW9uc1swXSAhPT0gdW5kZWZpbmVkICYmIGNvbXBsZXRpb25zWzBdICE9PSBcImZpbGVzXCIgJiYgY29tcGxldGlvbnNbMV0gPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGNvbW1hbmRBcmdzWzBdICsgXCIgXCIgKyBjb21wbGV0aW9uc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnNpemUgPSBpbnB1dC52YWx1ZS5sZW5ndGggKyAxO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbW1hbmRBcmdzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIGlmIChjb21tYW5kQXJnc1syXVswXSA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybnMgPSB0YWJGdWxsKGNvbW1hbmRBcmdzWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGlvbnMgPSByZXR1cm5zWzBdO1xuICAgICAgICAgICAgICAgICAgICBwYXJ0MSA9IHJldHVybnNbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRpb25zWzBdICE9PSB1bmRlZmluZWQgJiYgY29tcGxldGlvbnNbMF0gIT09IFwiZmlsZXNcIiAmJiBjb21wbGV0aW9uc1sxXSA9PT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gY29tbWFuZEFyZ3NbMF0gKyBcIiBcIiArIGNvbW1hbmRBcmdzWzFdICsgXCIgXCIgKyBwYXJ0MSArIGNvbXBsZXRpb25zWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2l6ZSA9IGlucHV0LnZhbHVlLmxlbmd0aCArIDE7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9ucyA9IHRhYlJlbGF0aXZlKGNvbW1hbmRBcmdzWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0aW9uc1swXSAhPT0gdW5kZWZpbmVkICYmIGNvbXBsZXRpb25zWzBdICE9PSBcImZpbGVzXCIgJiYgY29tcGxldGlvbnNbMV0gPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGNvbW1hbmRBcmdzWzBdICsgXCIgXCIgKyBjb21tYW5kQXJnc1sxXSArIFwiIFwiICsgY29tcGxldGlvbnNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5zaXplID0gaW5wdXQudmFsdWUubGVuZ3RoICsgMTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoY29tbWFuZEFyZ3NbM11bMF0gPT09IFwiL1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5zID0gdGFiRnVsbChjb21tYW5kQXJnc1szXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zID0gcmV0dXJuc1swXTtcbiAgICAgICAgICAgICAgICAgICAgcGFydDEgPSByZXR1cm5zWzFdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0aW9uc1swXSAhPT0gdW5kZWZpbmVkICYmIGNvbXBsZXRpb25zWzBdICE9PSBcImZpbGVzXCIgJiYgY29tcGxldGlvbnNbMV0gPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGNvbW1hbmRBcmdzWzBdICsgXCIgXCIgKyBjb21tYW5kQXJnc1sxXSArIFwiIFwiICsgY29tbWFuZEFyZ3NbMl0gKyBcIiBcIiArIHBhcnQxICsgY29tcGxldGlvbnNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5zaXplID0gaW5wdXQudmFsdWUubGVuZ3RoICsgMTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRpb25zID0gdGFiUmVsYXRpdmUoY29tbWFuZEFyZ3NbM10pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRpb25zWzBdICE9PSB1bmRlZmluZWQgJiYgY29tcGxldGlvbnNbMF0gIT09IFwiZmlsZXNcIiAmJiBjb21wbGV0aW9uc1sxXSA9PT0gdW5kZWZpbmVkKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gY29tbWFuZEFyZ3NbMF0gKyBcIiBcIiArIGNvbW1hbmRBcmdzWzFdICsgXCIgXCIgKyBjb21tYW5kQXJnc1syXSArIFwiIFwiICsgY29tcGxldGlvbnNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5zaXplID0gaW5wdXQudmFsdWUubGVuZ3RoICsgMTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIENBVFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgY2F0OiBmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICB2YXIgZmlsZU9iaixcbiAgICAgICAgICAgIGlzRmlsZSxcbiAgICAgICAgICAgIHJldHVybnMsXG4gICAgICAgICAgICBmaWxlTmFtZSxcbiAgICAgICAgICAgIGRpck9iaixcbiAgICAgICAgICAgIHBhdGg7XG5cbiAgICAgICAgaWYgKGZpbGVbMF0gPT09IFwiL1wiKSB7XG4gICAgICAgICAgICByZXR1cm5zID0gZ2V0UHJlRGlyZWN0b3J5KGZpbGUpO1xuICAgICAgICAgICAgZGlyT2JqID0gcmV0dXJuc1swXTtcbiAgICAgICAgICAgIGZpbGVOYW1lID0gcmV0dXJuc1sxXTtcbiAgICAgICAgICAgIHBhdGggPSByZXR1cm5zWzJdO1xuXG4gICAgICAgICAgICBpZiAoZGlyT2JqICE9PSBudWxsICYmIHR5cGVvZiBkaXJPYmogPT09ICdvYmplY3QnKSB7IHByaW50RmlsZShmaWxlTmFtZSwgZGlyT2JqLmZpbGVzKTsgfSAvLyBpZiBwYXJlbnQgZGlyZWN0b3J5IGFjdHVhbGx5IGV4aXN0cyBpbiB0aGUgZnNcblxuICAgICAgICB9IGVsc2UgeyBwcmludEZpbGUoZmlsZSwgcHdkWzFdLmZpbGVzKTsgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHByaW50RmlsZShmaWxlTmFtZSwgZmlsZXNBcnIpIHtcblxuICAgICAgICAgICAgaXNGaWxlID0gZGlyU2VhcmNoRmlsZXMoZmlsZU5hbWUsZmlsZXNBcnIpO1xuICAgICAgICAgICAgaWYgKCBpc0ZpbGUgKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVPYmogPSBnZXRGaWxlKGZpbGVOYW1lLCBmaWxlc0Fycik7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cHJlIGNsYXNzPSdjYXQtb3V0cHV0JyBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiOyBiYWNrZ3JvdW5kOlwiICsgdGVybXRoZW1lLmJhY2tncm91bmQgKyBcIic+XCIgKyBmaWxlT2JqLmNvbnRlbnQgKyBcIjwvcHJlPlwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7IFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+XCIgKyBmaWxlICsgXCIgZG9lcyBub3QgZXhpc3QuPC9wPlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIEdSRVAuIFVzZWQgZm9yIHBlcmZvcm1pbmcgYSBzZWFyY2guXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBncmVwOiBmdW5jdGlvbiAoc2VhcmNoLCBmaWxlKSB7XG4gICAgICAgIHZhciBmaWxlQ29udGVudCxcbiAgICAgICAgICAgIHNlYXJjaEluZGV4LFxuICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgIGxpbmVzLFxuICAgICAgICAgICAgbGluZVZhbCxcbiAgICAgICAgICAgIGZvdW5kLFxuICAgICAgICAgICAgaXNGaWxlLFxuICAgICAgICAgICAgZmlsZU9iajtcblxuICAgICAgICBpc0ZpbGUgPSBkaXJTZWFyY2hGaWxlcyhmaWxlLCBwd2RbMV0uZmlsZXMpO1xuXG4gICAgICAgIGlmIChpc0ZpbGUpIHsgLy8gdGhlcmUgaXMgYSBmaWxlLCBsZXQncyBzZWFyY2ggaXRcbiAgICAgICAgICAgIGlmIChzZWFyY2guaW5kZXhPZigwKSAmJiBzZWFyY2guaW5kZXhPZigtMSkgPT09IFwiJ1wiIHx8IHNlYXJjaC5pbmRleE9mKDApICYmIHNlYXJjaC5pbmRleE9mKC0xKSA9PT0gJ1wiJykgeyBzZWFyY2ggPSBzZWFyY2guc3Vic3RyKDEsIC0xKTsgfVxuICAgICAgICAgICAgZmlsZU9iaiA9IGdldEZpbGUoZmlsZSwgcHdkWzFdLmZpbGVzKTtcbiAgICAgICAgICAgIGZpbGVDb250ZW50ID0gZmlsZU9iai5jb250ZW50O1xuICAgICAgICAgICAgc2VhcmNoSW5kZXggPSBmaWxlQ29udGVudC5pbmRleE9mKHNlYXJjaCkgLy90aGlzIHdpbGwgcmV0dXJuIGluZGV4IGxvY2F0aW9uICgtMSBpZiBub3QgZm91bmQpXG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKHNlYXJjaEluZGV4ID09PSAtMSkgeyBvdXRwdXQuaW5uZXJIVE1MICs9IFwiPHAgc3R5bGU9J2NvbG9yOlwiICsgdGVybXRoZW1lLnRleHQgKyBcIic+XCIgKyBzZWFyY2ggKyBcIiBub3QgZm91bmQgaW4gXCIgKyBmaWxlICsgXCIuPC9wPlwiOyB9IC8vIHNlYXJjaCBub3QgZm91bmQsIHNob3cgZXJyb3IgbWVzc2FnZVxuICAgICAgICAgICAgZWxzZSB7IC8vIHNlYXJjaCBmb3VuZCwgZGlzcGxheSBsaW5lXG4gICAgICAgICAgICAgICAgbGluZXMgPSBmaWxlQ29udGVudC5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgZm9yKGxpbmUgPSAwOyBsaW5lIDwgbGluZXMubGVuZ3RoOyBsaW5lKyspe1xuICAgICAgICAgICAgICAgICAgICBsaW5lVmFsID0gbGluZXNbbGluZV07XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gbGluZVZhbC5pbmRleE9mKHNlYXJjaCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZCA+IC0xKSB7IG91dHB1dC5pbm5lckhUTUwgKz0gXCI8cCBzdHlsZT0nY29sb3I6XCIgKyB0ZXJtdGhlbWUudGV4dCArIFwiJz5cIiArIGxpbmVWYWwgKyBcIjwvcD5cIjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgb3V0cHV0LmlubmVySFRNTCArPSBcIjxwIHN0eWxlPSdjb2xvcjpcIiArIHRlcm10aGVtZS50ZXh0ICsgXCInPkZpbGUgXCIgKyBmaWxlICsgXCIgbm90IGZvdW5kLjwvcD5cIjsgfSAvLyBubyBmaWxlLiBsZXQncyB0ZWxsIHRoZSB1c2VyLiAgICAgICBcbiAgICB9LFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gVGV4dCBFZGl0b3IuIE1ldGhvZHM6IHJ1biwgc2F2ZSwgY2hhbmdlUHJvbXB0LCBoaWRlUHJvbXB0LCBzaG93UHJvbXB0LCByZXNldEVkaXRvciwgZXhpdFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZWRpdG9yOiB7XG4gICAgICAgIGVkaXRvcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlZGl0b3JcIiksXG4gICAgICAgIHRleHRBcmVhOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVkaXRvclRleHRcIiksXG4gICAgICAgIGZvb3RlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlZGl0b3JGb290ZXJcIiksXG4gICAgICAgIGZvb3Rlck5hdjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmb290ZXJOYXZcIiksXG4gICAgICAgIGhpZ2hsaWdodDogZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImhpZ2hsaWdodFwiKSxcbiAgICAgICAgaGVhZGVyOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVkaXRvckhlYWRlclwiKSxcbiAgICAgICAgc2F2ZVByb21wdDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzYXZlUHJvbXB0XCIpLFxuICAgICAgICBjb25zb2xlRG9tT3V0cHV0U3RvcmU6IHVuZGVmaW5lZCxcbiAgICAgICAgcHJvbXB0aW5nOiBmYWxzZSxcbiAgICAgICAgY3VycmVudEZpbGU6IHVuZGVmaW5lZCxcbiAgICAgICAgcnVuOiBmdW5jdGlvbiAoZmlsZSkgeyAvLyBzdGFydHVwIGVkaXRvciBwYXNzaW5nIGluIG9wdGlvbmFsIGZpbGUgbmFtZVxuICAgICAgICAgICAgdmFyIGZpbGVOYW1lLFxuICAgICAgICAgICAgICAgIGZpbGVzLFxuICAgICAgICAgICAgICAgIGZpbGVEYXRhLFxuICAgICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHNldENvbW1hbmRMaW5lRm9jdXMsIGZhbHNlKTtcbiAgICAgICAgICAgIHRlcm1pbmFsLmVkaXRvci5jb25zb2xlRG9tT3V0cHV0U3RvcmUgPSBvdXRwdXQuaW5uZXJIVE1MOyAvL3N0b3JlIGNvbnNvbGUgZG9tIG91dHB1dFxuICAgICAgICAgICAgdGVybWluYWwuY2xlYXIoKTsgLy8gY2xlYXIgZG9tICh0byBiZSByZXBsYWNlZCBvbiBlZGl0b3IgZXhpdClcblxuICAgICAgICAgICAgaWYgKCBmaWxlICkgeyBcblxuICAgICAgICAgICAgICAgIHRlcm1pbmFsLmVkaXRvci5oZWFkZXIuaW5uZXJIVE1MID0gZmlsZTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gZmlsZTtcbiAgICAgICAgICAgICAgICBmaWxlcyA9IHB3ZFsxXS5maWxlcztcbiAgICAgICAgICAgICAgICBmaWxlRGF0YSA9IGdldEZpbGUoZmlsZU5hbWUsIGZpbGVzKTsgLy8gcmV0cmlldmUgZmlsZSB3aXRoIHRoZSBwcm92aWRlZCBmaWxlTmFtZVxuICAgICAgICAgICAgICAgIHRlcm1pbmFsLmVkaXRvci5jdXJyZW50RmlsZSA9IGZpbGVEYXRhO1xuICAgICAgICAgICAgICAgIHRlcm1pbmFsLmVkaXRvci50ZXh0QXJlYS52YWx1ZSA9IGZpbGVEYXRhLmNvbnRlbnQ7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7IHRlcm1pbmFsLmVkaXRvci5oZWFkZXIuaW5uZXJIVE1MID0gXCJuZXcgYnVmZmVyXCI7IH1cblxuICAgICAgICAgICAgLy8gc2V0IGVkaXRvciB0byB0aGVtZVxuICAgICAgICAgICAgdGVybWluYWwuZWRpdG9yLmVkaXRvci5zdHlsZS5jb2xvciA9IHRlcm10aGVtZS50ZXh0O1xuICAgICAgICAgICAgdGVybWluYWwuZWRpdG9yLmVkaXRvci5zdHlsZS5iYWNrZ3JvdW5kID0gdGVybXRoZW1lLmJhY2tncm91bmQ7XG4gICAgICAgICAgICB0ZXJtaW5hbC5lZGl0b3IuaGVhZGVyLnN0eWxlLmNvbG9yID0gdGVybXRoZW1lLmJhY2tncm91bmQ7XG4gICAgICAgICAgICB0ZXJtaW5hbC5lZGl0b3IuaGVhZGVyLnN0eWxlLmJhY2tncm91bmQgPSB0ZXJtdGhlbWUudGV4dDtcbiAgICAgICAgICAgIHRlcm1pbmFsLmVkaXRvci50ZXh0QXJlYS5zdHlsZS5jb2xvciA9IHRlcm10aGVtZS50ZXh0O1xuICAgICAgICAgICAgdGVybWluYWwuZWRpdG9yLnRleHRBcmVhLnN0eWxlLmJhY2tncm91bmQgPSB0ZXJtdGhlbWUuYmFja2dyb3VuZDtcbiAgICAgICAgICAgIHRlcm1pbmFsLmVkaXRvci5mb290ZXIuc3R5bGUuYm9yZGVyQ29sb3IgPSB0ZXJtdGhlbWUudGV4dDtcbiAgICAgICAgICAgIHRlcm1pbmFsLmVkaXRvci5mb290ZXJOYXYuc3R5bGUuY29sb3IgPSB0ZXJtdGhlbWUudGV4dDtcbiAgICAgICAgICAgIHRlcm1pbmFsLmVkaXRvci5zYXZlUHJvbXB0LnN0eWxlLmNvbG9yID0gdGVybXRoZW1lLmJhY2tncm91bmQ7XG4gICAgICAgICAgICB0ZXJtaW5hbC5lZGl0b3Iuc2F2ZVByb21wdC5zdHlsZS5iYWNrZ3JvdW5kID0gdGVybXRoZW1lLnRleHQ7XG5cbiAgICAgICAgICAgIC8vIHN0eWxlIGZvb3RlciBsaXN0IGl0ZW1zLiBpdGVyYXRlIG92ZXIgaXRlbXMgd2l0aCBjbGFzcyBvZiBoaWdobGlnaHQgYW5kIGFwcGx5IHN0eWxlcy5cbiAgICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgdGVybWluYWwuZWRpdG9yLmhpZ2hsaWdodC5sZW5ndGg7IGkrKyApIHtcblxuICAgICAgICAgICAgICAgIGl0ZW0gPSB0ZXJtaW5hbC5lZGl0b3IuaGlnaGxpZ2h0W2ldO1xuICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUuY29sb3IgPSB0ZXJtdGhlbWUuYmFja2dyb3VuZDtcbiAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLmJhY2tncm91bmQgPSB0ZXJtdGhlbWUudGV4dDtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBzaG93IHRleHQgZWRpdG9yIG92ZXJsYXlcbiAgICAgICAgICAgIHRlcm1pbmFsLmVkaXRvci5lZGl0b3Iuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lXCI7XG4gICAgICAgICAgICB0ZXJtaW5hbC5lZGl0b3IudGV4dEFyZWEuZm9jdXMoKTtcblxuICAgICAgICB9LFxuICAgICAgICBzYXZlOiBmdW5jdGlvbiAoZmlsZU5hbWUpIHsgLy8gc2F2ZSBmaWxlIHBhc3NpbmcgaW4gZmlsZSBuYW1lXG5cbiAgICAgICAgICAgIHZhciBmaWxlID0gdGVybWluYWwuZWRpdG9yLmN1cnJlbnRGaWxlO1xuICAgICAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSB0ZXJtaW5hbC5lZGl0b3IudGV4dEFyZWEudmFsdWU7XG5cbiAgICAgICAgICAgIGlmICggZmlsZSApIHsgLy8gaWYgd29ya2luZyB3aXRoIGV4aXN0aW5nIGZpbGUgc2F2ZSB1cGRhdGVkIHZlcnNpb25cbiAgICAgICAgICAgICAgICBmaWxlLmNvbnRlbnQgPSBuZXdDb250ZW50OyBcbiAgICAgICAgICAgICAgICB0ZXJtaW5hbC5zYXZlLmZzKCk7XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGVsc2UgeyAvLyBjcmVhdGUgYW5kIHNhdmUgbmV3IGZpbGVcblxuICAgICAgICAgICAgICAgIHZhciBzaG9ydG5hbWUgPSBmaWxlTmFtZS5zbGljZSgwLCBmaWxlTmFtZS5pbmRleE9mKFwiLlwiKSk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSB0ZXJtaW5hbC5lZGl0b3IudGV4dEFyZWEudmFsdWU7XG4gICAgICAgICAgICAgICAgbmV3RmlsZSA9IG5ldyB0ZXJtaW5hbC5GaWxlKGZpbGVOYW1lLCBzaG9ydG5hbWUsIGNvbnRlbnQpOyAvLyBzYXZlIGZpbGUgdG8gZW1wdHkgYXJyYXkgaXRlbVxuICAgICAgICAgICAgICAgIHRlcm1pbmFsLmZzLmhvbWUudXNlci5maWxlcy5wdXNoKG5ld0ZpbGUpO1xuICAgICAgICAgICAgICAgIHRlcm1pbmFsLnNhdmUuZnMoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG4gICAgICAgIGNoYW5nZVByb21wdDogZnVuY3Rpb24gKCkgeyAvLyBjaGFuZ2UgdG8gZmlsZSBuYW1lIHByb21wdFxuICAgICAgICAgICAgdGVybWluYWwuZWRpdG9yLnNhdmVQcm9tcHQuaW5uZXJIVE1MID0gXCJGaWxlIE5hbWUgdG8gV3JpdGU6IG5ldyBidWZmZXJcIjtcbiAgICAgICAgfSxcbiAgICAgICAgaGlkZVByb21wdDogZnVuY3Rpb24gKCkgeyAvLyBoaWRlIHNhdmUgcHJvbXB0XG4gICAgICAgICAgICB0ZXJtaW5hbC5lZGl0b3Iuc2F2ZVByb21wdC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB0ZXJtaW5hbC5lZGl0b3IucHJvbXB0aW5nID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIHNob3dQcm9tcHQ6IGZ1bmN0aW9uICgpIHsgLy8gc2hvdyBzYXZlIHByb21wdFxuXG4gICAgICAgICAgICB0ZXJtaW5hbC5lZGl0b3IucHJvbXB0aW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgdGVybWluYWwuZWRpdG9yLnNhdmVQcm9tcHQuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lXCI7XG4gICAgICAgICAgICB0ZXJtaW5hbC5lZGl0b3IuZm9vdGVyTmF2LmlubmVySFRNTCA9IFwiPGxpPjxzcGFuIGNsYXNzPSdoaWdobGlnaHQnPl5ZIDo8L3NwYW4+IFllczwvbGk+PGxpPjxzcGFuIGNsYXNzPSdoaWdobGlnaHQnPl5OIDo8L3NwYW4+IE5vPC9saT48bGk+PHNwYW4gY2xhc3M9J2hpZ2hsaWdodCc+XkMgOjwvc3Bhbj4gQ2FuY2VsPC9saT5cIjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gc3R5bGUgZm9vdGVyIGxpc3QgaXRlbXMuIGl0ZXJhdGUgb3ZlciBpdGVtcyB3aXRoIGNsYXNzIG9mIGhpZ2hsaWdodCBhbmQgYXBwbHkgc3R5bGVzLlxuICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgdGVybWluYWwuZWRpdG9yLmhpZ2hsaWdodC5sZW5ndGg7IGkrKyApIHtcblxuICAgICAgICAgICAgICAgIGl0ZW0gPSB0ZXJtaW5hbC5lZGl0b3IuaGlnaGxpZ2h0W2ldO1xuICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUuY29sb3IgPSB0ZXJtdGhlbWUuYmFja2dyb3VuZDtcbiAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLmJhY2tncm91bmQgPSB0ZXJtdGhlbWUudGV4dDtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0RWRpdG9yOiBmdW5jdGlvbigpIHsgLy8gcmVzZXQgZWRpdG9yIHNldHRpbmdzIHRvIGJsYW5rXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2V0Q29tbWFuZExpbmVGb2N1cyxmYWxzZSk7XG4gICAgICAgICAgICB0ZXJtaW5hbC5lZGl0b3IuZWRpdG9yLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjsgLy8gaGlkZSBlZGl0b3Igb3ZlcmxheSBcbiAgICAgICAgICAgIHRlcm1pbmFsLmVkaXRvci5zYXZlUHJvbXB0LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjsgLy8gaGlkZSBzYXZlIHByb21wdFxuICAgICAgICAgICAgdGVybWluYWwuZWRpdG9yLnRleHRBcmVhLnZhbHVlID0gXCJcIjsgLy8gcmVzZXQgdGV4dCBhcmVhXG4gICAgICAgICAgICB0ZXJtaW5hbC5lZGl0b3IuZm9vdGVyTmF2LmlubmVySFRNTCA9IFwiPGxpPjxzcGFuIGNsYXNzPSdoaWdobGlnaHQnPl5YIDo8L3NwYW4+IFNhdmUgLyBFeGl0PC9saT5cIjtcbiAgICAgICAgICAgIHRlcm1pbmFsLmVkaXRvci5wcm9tcHRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRlcm1pbmFsLmVkaXRvci5jdXJyZW50RmlsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRlcm1pbmFsLmNvbW1hbmRMaW5lLmZvY3VzKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGV4aXQ6IGZ1bmN0aW9uIChzYXZlKSB7IC8vIGV4aXQgZWRpdG9yIGFuZCBjYWxsIHNhdmUgaWYgdHJ1ZVxuXG4gICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSB0ZXJtaW5hbC5lZGl0b3IuaGVhZGVyLmlubmVySFRNTDtcblxuICAgICAgICAgICAgaWYgKCBmaWxlTmFtZSA9PT0gXCJuZXcgYnVmZmVyXCIgKSB7IHRlcm1pbmFsLmVkaXRvci5jaGFuZ2VQcm9tcHQoKTsgfVxuXG4gICAgICAgICAgICBpZiAoIHNhdmUgKSB7IHRlcm1pbmFsLmVkaXRvci5zYXZlKGZpbGVOYW1lKTsgdGVybWluYWwuZWRpdG9yLnJlc2V0RWRpdG9yKCk7IH1cblxuICAgICAgICAgICAgaWYgKCAhIHNhdmUgKSB7IHRlcm1pbmFsLmVkaXRvci5yZXNldEVkaXRvcigpOyB9XG5cbiAgICAgICAgICAgIG91dHB1dC5pbm5lckhUTUwgPSB0ZXJtaW5hbC5lZGl0b3IuY29uc29sZURvbU91dHB1dFN0b3JlOyAvLyBhZGQgY29uc29sZSBkb20gb3V0cHV0IGJhY2tcbiAgICAgICAgICAgIGlucHV0LmZvY3VzKCk7XG5cbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBTYXZlLiBNZXRob2RzOiBzZXR0aW5ncywgZnNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHNhdmU6IHtcbiAgICAgICAgc2V0dGluZ3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNhdmVJdGVtVG9Mb2NhbFN0b3JhZ2UodGVybWluYWwudXNlclNldHRpbmdzLCAnc2V0dGluZ3MnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNhdmVJdGVtVG9Mb2NhbFN0b3JhZ2UodGVybWluYWwuZnMsICdmcycpO1xuICAgICAgICB9LFxuICAgICAgICB0dXRvcmlhbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2F2ZUl0ZW1Ub0xvY2FsU3RvcmFnZSh0dXRvcmlhbC5jdXJyZW50U3RhZ2UsICd0dXRvcmlhbCcpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB0dXRvcmlhbDogeyAvLyBzaG91bGQgdGhpcyBiZSBoZXJlIG9uIGluIHR1dG9yaWFsLmpzID8/XG5cbiAgICAgICAgbGF1bmNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBuZWVkIHRvIHNldCB0aGVtZSBzdHlsZXMgLi4uIGNvdWxkIHdlIGJlIGhhbmRsaW5nIHRoaW5ncyBiZXR0ZXIgaW4gdGhlIGFwcCBieSB1dGlsaXppbmcgY2xhc3NlcywgcmF0aGVyIHRoYW4gc3R5bGUgY2hhbmdlcyA/P1xuICAgICAgICAgICAgdGVybWluYWwuY2xlYXIoKTtcbiAgICAgICAgICAgIHR1dG9yaWFsLnN0YWdlQXJyYXkgPSB0dXRvcmlhbC5zdGFnZUFycmF5SW5pdCgpOyAvLyBpbml0IHN0YWdlQXJyYXkgdmFyaWFibGVcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uc3R5bGUubWFyZ2luID1cIjFlbVwiO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3R1dG9yaWFsJykuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgIHR1dG9yaWFsLmN1cnJlbnQoKTtcbiAgICAgICAgICAgIHR1dG9yaWFsLm9uID0gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZXhpdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGVybWluYWwuY2xlYXIoKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0dXRvcmlhbCcpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uc3R5bGUubWFyZ2luID1cIjAuNWVtXCI7XG4gICAgICAgICAgICB0dXRvcmlhbC5vbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG59OyBcblxuLy8gRU5EIFRFUk1JTkFMIE9CSkVDVFxuIiwidmFyIHR1dG9yaWFsID0ge1xuXG4gICAgb246IGZhbHNlLFxuICAgIFxuICAgIHN0YWdlczoge1xuICAgICAgICAvLyBvbmU6IHtcbiAgICAgICAgLy8gICAgIHRpdGxlOiBcIlRoZSBUZXJtaW5hbDogV2hhdCBpcyBpdCwgYW5kIFdoeSB1c2UgaXQ/XCIsXG4gICAgICAgIC8vICAgICBzdWJzdGFnZTogXCI8c3BhbiBpZD0nc3Vic3RhZ2UnPjEuMTwvc3Bhbj5cIixcbiAgICAgICAgLy8gICAgIGNvbnRlbnQ6IFwiVGhlIHRlcm1pbmFsIGlzIGFuIGludGVyZmFjZSBpbiB3aGljaCB5b3UgY2FuIHR5cGUgYW5kIGV4ZWN1dGUgdGV4dCBiYXNlZCBjb21tYW5kcy4gSXQgY2FuIGJlIG11Y2ggZmFzdGVyIHRvIGNvbXBsZXRlIHNvbWUgdGFza3MgdXNpbmcgYSBUZXJtaW5hbCB0aGFuIHdpdGggZ3JhcGhpY2FsIGFwcGxpY2F0aW9ucyBhbmQgbWVudXMuIEFub3RoZXIgYmVuZWZpdCBpcyBhbGxvd2luZyBhY2Nlc3MgdG8gbWFueSBtb3JlIGNvbW1hbmRzIGFuZCBzY3JpcHRzLiBBIGNvbW1vbiB0ZXJtaW5hbCB0YXNrIG9mIGluc3RhbGxpbmcgYW4gYXBwbGljYXRpb24gY2FuIGJlIGFjaGlldmVkIHdpdGhpbiBhIHNpbmdsZSBjb21tYW5kLCBjb21wYXJlZCB0byBuYXZpZ2F0aW5nIHRocm91Z2ggdGhlIGZpbmRlci48YnIvPjxici8+Rm9yIGV4YW1wbGUgdGhlIGZvbGxvd2luZyBjb21tYW5kIHdvdWxkIGluc3RhbGwgJ3NvbWV0aGluZycsIHJhdGhlciB0aGFuIGNsaWNraW5nIHRocm91Z2ggZmlsZSBzeXN0ZW0gYW5kIGdvaW5nIHRocm91Z2ggdGhlIGluc3RhbGwgcHJvbXB0cy48YnIvPnN1ZG8gYXB0LWdldCBpbnN0YWxsICdzb21ldGhpbmcnPGJyLz48YnIvPllvdSBhcmUgdGVsbGluZyB0aGUgY29tcHV0ZXIgd2hhdCB0byBkbywgYW5kIHRoaXMgYmVjb21lcyB2ZXJ5IHBvd2VyZnVsLlwiLFxuICAgICAgICAvLyAgICAgYWR2aWNlOiBcIjxici8+VHlwZSAnPHNwYW4gaWQ9J2FkdmljZS1jb21tYW5kJz5uZXh0PC9zcGFuPicgYW5kIHByZXNzIGVudGVyIGFuZCB3ZSdsbCBqdW1wIGludG8gdGhpbmdzLlwiLFxuICAgICAgICAvLyAgICAgY29tbWFuZDogXCJuZXh0XCIsXG4gICAgICAgIC8vICAgICBjb21wbGV0ZWQ6IGZhbHNlXG4gICAgICAgIC8vIH0sXG4gICAgICAgIC8vIHR3bzoge1xuICAgICAgICAvLyAgICAgdGl0bGU6IFwiQ29tbWFuZHNcIixcbiAgICAgICAgLy8gICAgIHN1YnN0YWdlOiBcIjxzcGFuIGlkPSdzdWJzdGFnZSc+MS4yPC9zcGFuPlwiLFxuICAgICAgICAvLyAgICAgY29udGVudDogXCJDb21tYW5kcyBwcmUtZGVmaW5lZCB3b3JkcyBhbmQgbGV0dGVycyB0aGF0IGhlbHAgeW91IGRvIGNvbW1vbiB0YXNrcyBxdWlja2VyIGFuZCBtb3JlIGVmZmljaWVudGx5LiBDb21tYW5kcyBhcmUgdHlwZWQgaW50byB0aGUgdGVybWluYWwgYW5kIHNlbnQgd2l0aCB0aGUgZW50ZXIga2V5LiBUaGV5IG1ha2UgdGFrZSBhcmd1bWVudHMgYW5kIGZsYWdzIChtb3JlIG9uIHRoYXQgdG8gY29tZSkuXCIsXG4gICAgICAgIC8vICAgICBhZHZpY2U6IFwiPGJyLz5UeXBlICc8c3BhbiBpZD0nYWR2aWNlLWNvbW1hbmQnPmhlbHA8L3NwYW4+JyBhbmQgcHJlc3MgZW50ZXIgdG8gc2VuZCB5b3VyIGZpcnN0IGNvbW1hbmQuXCIsXG4gICAgICAgIC8vICAgICBjb21tYW5kOiBcImhlbHBcIixcbiAgICAgICAgLy8gICAgIGNvbXBsZXRlZDogZmFsc2VcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gdGhyZWU6IHtcbiAgICAgICAgLy8gICAgIHRpdGxlOiBcIkZsYWdzXCIsXG4gICAgICAgIC8vICAgICBzdWJzdGFnZTogXCI8c3BhbiBpZD0nc3Vic3RhZ2UnPjEuMzwvc3Bhbj5cIixcbiAgICAgICAgLy8gICAgIGNvbnRlbnQ6IFwiU3VjY2VzcyEgWW91IHNob3VsZCBub3cgc2VlIGEgbGlzdCBvZiBjb21tYW5kcyBhdmFpbGFibGUgaW4geW91ciB0ZXJtaW5hbC4gWW91IGNhbiB1c2UgdGhlICctaGVscCcgZmxhZyB0byBzZWUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhbmQgdXNhZ2Ugb24gdGhlIGNvbW1hbmQuIEZsYWdzIGFyZSBhZGRpdGlvbmFsIG9wdGlvbnMgYW5kIHNldHRpbmdzIHRoYXQgY2FuIGJlIHBhc3NlZCB3aXRoIGNvbW1hbmRzLiBUaGV5IGFsbG93IGZvciBncmVhdGVyIGZsZXhpYmlsaXR5IGFuZCBmdW5jdGlvbmFsaXR5LiBUaGV5IGNvbWUgYWZ0ZXIgdGhlIGNvbW1hbmQgYW5kIGFyZSBzZXBhcmF0ZWQgYnkgc3BhY2VzLCBhbmQgc3RhcnQgd2l0aCBhICctJy5cIixcbiAgICAgICAgLy8gICAgIGFkdmljZTogXCI8YnIvPlRyeSB0eXBpbmcgc29tZSBjb21tYW5kcyBmb2xsb3dlZCBieSAnLWhlbHAnLiBFeC4gPHNwYW4gY2xhc3M9J3R1dG9yaWFsLWhpZ2hsaWdodCc+aGVscCAtaGVscDwvc3Bhbj4uIFR5cGUgJzxzcGFuIGlkPSdhZHZpY2UtY29tbWFuZCc+bmV4dDwvc3Bhbj4nIHdoZW4geW91J3JlIHJlYWR5IHRvIG1vdmUgb24uXCIsXG4gICAgICAgIC8vICAgICBjb21tYW5kOiBcIm5leHRcIixcbiAgICAgICAgLy8gICAgIGNvbXBsZXRlZDogZmFsc2VcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gZm91cjoge1xuICAgICAgICAvLyAgICAgdGl0bGU6IFwicHdkXCIsXG4gICAgICAgIC8vICAgICBzdWJzdGFnZTogXCI8c3BhbiBpZD0nc3Vic3RhZ2UnPjEuNDwvc3Bhbj5cIixcbiAgICAgICAgLy8gICAgIGNvbnRlbnQ6IFwiJ3B3ZCcgc3RhbmRzIGZvciBQcmVzZW50IFdvcmtpbmcgRGlyZWN0b3J5LCBhbmQgaXMgdXNlZCB0byBvdXRwdXQgdGhlIHBhdGggb2YgdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkuIEl0IHdpbGwgc2hvdyB5b3Ugd2hlcmUgeW91IGFyZSBpbiB0aGUgZmlsZSBzeXN0ZW0sIHNvbWV0aW1lcyByZWZlcnJlZCB0byBhcyBhIGZpbGUgdHJlZS4gWW91IG1heSBiZXR0ZXIgdW5kZXJzdGFuZCB0aGlzIGFzIHlvdXIgbG9jYXRpb24gaW4gdGhlIGZpbmRlci48YnIvPjxici8+VXNhZ2U6IHB3ZDxici8+T3V0cHV0OiAvaG9tZS93aGVyZXlvdWFyZVwiLFxuICAgICAgICAvLyAgICAgYWR2aWNlOiBcIjxici8+VHJ5IHR5cGluZyAnPHNwYW4gaWQ9J2FkdmljZS1jb21tYW5kJz5wd2Q8L3NwYW4+JyB0byBzZWUgd2hlcmUgeW91IGFyZSBpbiB5b3VyIGZpbGUgc3lzdGVtLlwiLFxuICAgICAgICAvLyAgICAgY29tbWFuZDogXCJwd2RcIixcbiAgICAgICAgLy8gICAgIGNvbXBsZXRlZDogZmFsc2VcbiAgICAgICAgLy8gfSxcbiAgICAgICAgLy8gZml2ZToge1xuICAgICAgICAvLyAgICAgdGl0bGU6IFwiY2RcIixcbiAgICAgICAgLy8gICAgIHN1YnN0YWdlOiBcIjxzcGFuIGlkPSdzdWJzdGFnZSc+MS41PC9zcGFuPlwiLFxuICAgICAgICAvLyAgICAgY29udGVudDogXCInY2QnIHN0YW5kcyBmb3IgQ3VycmVudCBEaXJlY3RvcnksIGFuZCBpcyB1c2VkIHRvIHRyYXZlcnNlIHlvdXIgZmlsZSBzeXN0ZW0uIFRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgb2YgY2xpY2tpbmcgdGhyb3VnaCB5b3VyIGZpbmRlciB3aW5kb3dzLiBUaGlzIGlzIGEgdmVyeSB1c2VmdWwgY29tbWFuZCB0aGF0IHdpbGwgc2F2ZSB5b3UgbG90cyBvZiB0aW1lLjxici8+PGJyLz5Vc2FnZTogY2QgZmlsZXBhdGg8YnIvPkV4YW1wbGU6IGNkIC9ob21lL2Zvbzxici8+XCIsXG4gICAgICAgIC8vICAgICBhZHZpY2U6IFwiPGJyLz5JZiBmb28gZXhpc3RzLCB0aGlzIHdpbGwgcHV0IHlvdSBpbiB0aGUgZm9vIGZvbGRlciwgd2hpY2ggcmVzaWRlcyBpbiB0aGUgaG9tZSBmb2xkZXIuIElmIHN1Y2Nlc3NmdWwsICdwd2QnIHNob3VsZCBub3cgc2F5ICcvaG9tZS9mb28nPGJyLz48YnIvPlRyeSAnY2QgL2hvbWUvZG9jdW1lbnRzJywgZm9sbG93ZWQgYnkgJ3B3ZCcuXCIsXG4gICAgICAgIC8vICAgICBjb21tYW5kOiBcInB3ZFwiLFxuICAgICAgICAvLyAgICAgY29tcGxldGVkOiBmYWxzZVxuICAgICAgICAvLyB9XG5cblxuXG5cblxuXG4gICAgICAgIC8vIFNUQVJUIFJPQkVSVFxuXG4gICAgICAgIG9uZToge1xuICAgICAgICAgICAgdGl0bGU6IFwiSW50cm9kdWN0aW9uXCIsXG4gICAgICAgICAgICBzdWJzdGFnZTogXCI8c3BhbiBpZD0nc3Vic3RhZ2UnPjEuMTogVGhlIFRlcm1pbmFsPC9zcGFuPlwiLFxuICAgICAgICAgICAgY29udGVudDogXCJXaGF0IGlzIGl0Pzxicj5UaGUgdGVybWluYWwgaXMgYW4gaW50ZXJmYWNlIGZvciB0eXBpbmcgYW5kIGV4ZWN1dGluZyB0ZXh0IGJhc2VkIGNvbW1hbmRzLjxicj5XaHkgdXNlIGl0Pzxicj5JdCBpcyBvZnRlbiBtdWNoIGZhc3RlciB0byBjb21wbGV0ZSBzb21lIHRhc2tzIHVzaW5nIGEgVGVybWluYWwgdGhhbiB3aXRoIGEgZ3JhcGhpY2FsIGludGVyZmFjZS48YnI+VGhlIHRlcm1pbmFsIGFsc28gcHJvdmlkZXMgYWNjZXNzIHRvIGJyb2FkZXIsIG1vcmUgYWR2YW5jZWQgZnVuY3Rpb25hbGl0eSB2aWEgY29tbWFuZHMgYW5kIHNjcmlwdHMuPGJyLz5UeXBlICc8c3BhbiBpZD0nYWR2aWNlLWNvbW1hbmQnPm5leHQ8L3NwYW4+JyB0aGVuIHByZXNzIGVudGVyIGFuZCB3ZSdsbCBnZXQgc3RhcnRlZC5cIixcbiAgICAgICAgICAgIGFkdmljZTogXCJcIixcbiAgICAgICAgICAgIGNvbW1hbmQ6IFwibmV4dFwiLFxuICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB0d286IHtcbiAgICAgICAgICAgIHRpdGxlOiBcIlRoZSBCYXNpY3NcIixcbiAgICAgICAgICAgIHN1YnN0YWdlOiBcIjxzcGFuIGlkPSdzdWJzdGFnZSc+MS4yOiBDb21tYW5kczwvc3Bhbj5cIixcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiSW4gb3JkZXIgdG8gdGVsbCBhIGNvbXB1dGVyIGV4YWN0bHkgd2hhdCB0byBkbywgd2UgcHJvdmlkZSBpbnN0cnVjdGlvbnMgaW4gdGhlIGZvcm0gb2YgY29tbWFuZHMuIENvbW1hbmRzIGFyZSB0eXBlZCBpbnRvIHRoZSB0ZXJtaW5hbCBhbmQgc2VudCB3aXRoIHRoZSBlbnRlciBrZXkuIFRocm91Z2hvdXQgdGhpcyB0dXRvcmlhbCB3ZSdsbCBnbyBvdmVyIGEgdmFyaWV0eSBvZiB0aGUgbW9yZSBjb21tb24gY29tbW1hbmRzLjxici8+VHlwZSAnPHNwYW4gaWQ9J2FkdmljZS1jb21tYW5kJz5uZXh0PC9zcGFuPicgdGhlbiBwcmVzcyBlbnRlciBhbmQgd2UnbGwgbW92ZSBvbiB0byB5b3VyIGZpcnN0IGNvbW1hbmQuXCIsXG4gICAgICAgICAgICBhZHZpY2U6IFwiXCIsXG4gICAgICAgICAgICBjb21tYW5kOiBcIm5leHRcIixcbiAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgdGhyZWU6IHtcbiAgICAgICAgICAgIHRpdGxlOiBcIlRoZSBXb3JraW5nIERpcmVjdG9yeVwiLFxuICAgICAgICAgICAgc3Vic3RhZ2U6IFwiPHNwYW4gaWQ9J3N1YnN0YWdlJz4yLjE6IHB3ZDwvc3Bhbj5cIixcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiJ3B3ZCcgc3RhbmRzIGZvciAnUHJpbnQgV29ya2luZyBEaXJlY3RvcnknLCBhbmQgaXMgdXNlZCB0byBvdXRwdXQgdGhlIHBhdGggb2YgdGhlIGN1cnJlbnQgZGlyZWN0b3J5LCBhbHNvIGtub3duIGFzIHRoZSB3b3JraW5nIGRpcmVjdG9yeS4gSXQgd2lsbCBzaG93IHlvdSB3aGVyZSB5b3UgYXJlIGluIHRoZSBmaWxlIHN5c3RlbS4gSW4gV2luZG93cyBvciBNYWMgT1MsIHRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgb2YgaGF2aW5nIGEgd2luZG93IG9wZW4gdG8gYSBwYXJ0aWN1bGFyIGZvbGRlciwgbGlrZSBkb2N1bWVudHMsIG9yIFBpY3R1cmVzLjxici8+VHlwZSBhbmQgc3VibWl0IHRoZSBjb21tYW5kICc8c3BhbiBpZD0nYWR2aWNlLWNvbW1hbmQnPnB3ZDwvc3Bhbj4nIHRvIHNlZSB3aGVyZSB3ZSBhcmUgaW4geW91ciBmaWxlIHN5c3RlbS5cIixcbiAgICAgICAgICAgIGFkdmljZTogXCJTdWJtaXQgYSBjb21tYW5kIGJ5IHByZXNzaW5nIHRoZSAnZW50ZXInIGtleS5cIixcbiAgICAgICAgICAgIGNvbW1hbmQ6IFwicHdkXCIsXG4gICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGZvdXI6IHtcbiAgICAgICAgICAgIHRpdGxlOiBcIlRoZSBXb3JraW5nIERpcmVjdG9yeVwiLFxuICAgICAgICAgICAgc3Vic3RhZ2U6IFwiPHNwYW4gaWQ9J3N1YnN0YWdlJz4yLjI6IGNkIEk8L3NwYW4+XCIsXG4gICAgICAgICAgICBjb250ZW50OiBcIidjZCcgc3RhbmRzIGZvciAnQ2hhbmdlIERpcmVjdG9yeScsIGFuZCBpcyB1c2VkIHRvIHRyYXZlcnNlIHlvdXIgZmlsZSBzeXN0ZW0uIFRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgb2YgY2xpY2tpbmcgdGhyb3VnaCB5b3VyIGZpbmRlci9maWxlIGV4cGxvcmVyIHdpbmRvd3MuIFNvIHJhdGhlciB0aGFuIGNsaWNraW5nIGZyb20geW91ciBwYXJ0aWN1bGFyIHVzZXIgZm9sZGVyLCBpbnRvIHRoZSBkb2N1bWVudHMgZm9sZGVyLCB3ZSBpc3N1ZSBhICdjaGFuZ2UgZGlyZWN0b3J5JyBjb21tYW5kLjxicj5UeXBlIGFuZCBzdWJtaXQgdGhlIGNvbW1hbmQgJzxzcGFuIGlkPSdhZHZpY2UtY29tbWFuZCc+Y2QgL2hvbWUvdXNlci9kb2N1bWVudHM8L3NwYW4+JyB0byBjaGFuZ2UgeW91ciB3b3JraW5nIGRpcmVjdG9yeSB0byAnZG9jdW1lbnRzJywgb3IgbW9yZSBzcGVjaWZpY2FsbHkgJy9ob21lL3VzZXIvZG9jdW1lbnRzJ1wiLFxuICAgICAgICAgICAgYWR2aWNlOiBcIidUaGUgd29yZHMgJ2RpcmVjdG9yeScgYW5kICdmb2xkZXInIG1heSBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB0aHJvdWdob3V0IHRoaXMgdHV0b3JpYWwuICdGb2xkZXInIGlzIG1vcmUgY29tbW9uIGluIGEgV2luZG93cyBlbnZpcm9ubWVudCwgd2hlcmVhcyAnZGlyZWN0b3J5JyBpcyBhIGJpdCBvZiBhbiBvbGRlciB0ZXJtLCB1c2VkIHNpbmNlIHRoZSBlYXJseSBkYXlzIG9mIGZpbGVzeXN0ZW1zLlwiLFxuICAgICAgICAgICAgY29tbWFuZDogXCJjZFwiLFxuICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBmaXZlOiB7XG4gICAgICAgICAgICB0aXRsZTogXCJUaGUgV29ya2luZyBEaXJlY3RvcnlcIixcbiAgICAgICAgICAgIHN1YnN0YWdlOiBcIjxzcGFuIGlkPSdzdWJzdGFnZSc+Mi4zOiBQYXRocyBJPC9zcGFuPlwiLFxuICAgICAgICAgICAgY29udGVudDogXCJBcyB3aXRoIHRoZSBwcmV2aW91cyBleGFtcGxlLCBtYW55IGNvbW1hbmRzIHdpbGwgcmVxdWlyZSB0aGF0IHdlIHByb3ZpZGUgYSAncGF0aCcgdGhhdCBkZXNjcmliZXMgdGhlIHBhcnRpY3VsYXIgbG9jYXRpb24gb2YgYSBmaWxlIG9yIGZvbGRlci4gSW4gdGhlIHByZXZpb3VzIGV4YW1wbGUsIHRoZSBmb2xkZXIgJ2RvY3VtZW50cycgZXhpc3RlZCB3aXRoaW4gdGhlIGZvbGRlciAndXNlcicsIHdoaWNoIHdhcyBpbnNpZGUgYW5vdGhlciBmb2xkZXIgY2FsbGVkICdob21lJywgdGhlIGNvbW1hbmQgd2FzICdjZCAvaG9tZS91c2VyL2RvY3VtZW50cycgdG8gY2hhbmdlIG91ciAnd29ya2luZyBkaXJlY3RvcnknIHRvICcvaG9tZS91c2VyL2RvY3VtZW50cycuICcvaG9tZS91c2VyL2RvY3VtZW50cycgaXMgY2FsbGVkIGEgJ2Z1bGwnLCBvciAnYWJzb2x1dGUgcGF0aCcuIEl0IGRlc2NyaWJlcyB0aGUgZXhhY3QgbG9jYXRpb24gb2YgJ2RvY3VtZW50cycsIGluY2x1ZGluZyBhbGwgdGhvc2UgZm9sZGVycyB0aGF0IGNvbWUgYmVmb3JlIGl0IGluIHRoZSBmaWxlc3lzdGVtLjxici8+U3VibWl0IHRoZSBjb21tYW5kICc8c3BhbiBpZD0nYWR2aWNlLWNvbW1hbmQnPm5leHQ8L3NwYW4+JyB3aGVuIHlvdSdyZSByZWFkeSB0byBtb3ZlIG9uLlwiLFxuICAgICAgICAgICAgYWR2aWNlOiBcIlRoZXJlIGlzIGFub3RoZXIgdHlwZSBvZiAncGF0aCcsIGNhbGxlZCBhICdyZWxhdGl2ZSBwYXRoJy4gQW55IGlkZWFzIGhvdyB0aGlzIG90aGVyIHR5cGUgb2YgJ3BhdGgnIG1pZ2h0IGxvb2s/IFdlJ2xsIHJldmlzaXQgJ3BhdGhzJyBsYXRlciBpbiB0aGUgdHV0b3JpYWwuXCIsXG4gICAgICAgICAgICBjb21tYW5kOiBcInB3ZFwiLFxuICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBzaXg6IHtcbiAgICAgICAgICAgIHRpdGxlOiBcIlRoZSBXb3JraW5nIERpcmVjdG9yeVwiLFxuICAgICAgICAgICAgc3Vic3RhZ2U6IFwiPHNwYW4gaWQ9J3N1YnN0YWdlJz4yLjQ6IGxzIEk8L3NwYW4+XCIsXG4gICAgICAgICAgICBjb250ZW50OiBcIk5vdyB0aGF0IHdlJ3ZlIGNvdmVyZWQgdGhlIHRlcm1pbmFsIGJhc2ljcyAnd29ya2luZyBkaXJlY3RvcnknLCAnY2hhbmdlIGRpcmVjdG9yeScsIGFuZCAncGF0aHMnLCB3ZSBjYW4gbW92ZSBvbiB0byBhY3R1YWxseSBpbnRlcmFjdGluZyB3aXRoIHRoZSBjb250ZW50cyBvZiBhIGRpcmVjdG9yeS4gQmVjYXVzZSB0aGUgdGVybWluYWwgaXMgdGV4dCBiYXNlZCwgc2ltcGx5IHZpZXdpbmcgdGhlIGNvbnRlbnRzIG9mIGEgZm9sZGVyIHJlcXVpcmVzIHRoYXQgd2Ugc3VibWl0IGEgY29tbWFuZC4gVGhlIGNvbW1hbmQgJ2xzJyBzdGFuZHMgZm9yICdsaXN0JywgYW5kIHdpbGwgYWxsb3cgdXMgdG8gY2hlY2sgb3V0IHRoZSBjb250ZW50cyBvZiB5b3VyICd3b3JraW5nIGRpcmVjdG9yeScuPGJyLz5TdWJtaXQgdGhlIGNvbW1hbmQgJzxzcGFuIGlkPSdhZHZpY2UtY29tbWFuZCc+bHM8L3NwYW4+JyB0byBsaXN0IHRoZSBjb250ZW50cyBvZiB5b3VyICd3b3JraW5nIGRpcmVjdG9yeScuXCIsXG4gICAgICAgICAgICBhZHZpY2U6IFwiVGhlIGNvbW1hbmQgJ2xzIC1sJyB3aWxsIHByb3ZpZGUgYSBsb25nLWZvcm0gbGlzdC4gUHV0dGluZyBlYWNoIGVudHJ5IG9uIGl0cyBvd24gbGluZS5cIixcbiAgICAgICAgICAgIGNvbW1hbmQ6IFwibHNcIixcbiAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2VcbiAgICAgICAgfSxcbiAgICBzZXZlbjoge1xuICAgICAgICAgICAgdGl0bGU6IFwiVGhlIFdvcmtpbmcgRGlyZWN0b3J5XCIsXG4gICAgICAgICAgICBzdWJzdGFnZTogXCI8c3BhbiBpZD0nc3Vic3RhZ2UnPjIuNTogbHMgSUk8L3NwYW4+XCIsXG4gICAgICAgICAgICBjb250ZW50OiBcIjxici8+U3VibWl0IHRoZSBjb21tYW5kICc8c3BhbiBpZD0nYWR2aWNlLWNvbW1hbmQnPmxzIC1sIC9ob21lL3VzZXIvZGVza3RvcDwvc3Bhbj4nIHRvIGxpc3QgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RvcnkgJ2Rlc2t0b3AnLlwiLFxuICAgICAgICAgICAgYWR2aWNlOiBcIlwiLFxuICAgICAgICAgICAgY29tbWFuZDogXCJscyAvaG9tZS91c2VyL2Rlc2t0b3BcIixcbiAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgZWlnaHQ6IHtcbiAgICAgICAgICAgIHRpdGxlOiBcIkJhc2ljIENvbW1hbmRzOiBNYWtpbmcgZmlsZXMgYW5kIGRpcmVjdG9yaWVzXCIsXG4gICAgICAgICAgICBzdWJzdGFnZTogXCI8c3BhbiBpZD0nc3Vic3RhZ2UnPjMuMTogbWtkaXI8L3NwYW4+XCIsXG4gICAgICAgICAgICBjb250ZW50OiBcIkxldCdzIHRyeSBjcmVhdGluZyBhIGZvbGRlci4gVGhlIGNvbW1hbmQgJ21rZGlyJyBzdGFuZHMgZm9yICdtYWtlIGRpcmVjdG9yeScuIFRoaXMgY29tbWFuZCB3aWxsIG1ha2UgYSBkaXJlY3Rvcnkgd2l0aCB0aGUgcHJvdmlkZWQgbmFtZSB3aXRoaW4geW91ciAnd29ya2luZyBkaXJlY3RvcnknPGJyPlN1Ym1pdCB0aGUgY29tbWFuZCA8c3BhbiBpZD0nYWR2aWNlLWNvbW1hbmQnPm1rZGlyIG5ld0ZvbGRlcjwvc3Bhbj4nIHRvIGNyZWF0ZSBhIGRpcmVjdG9yeSBjYWxsZWQgJ25ld0ZvbGRlcicuXCIsXG4gICAgICAgICAgICBhZHZpY2U6IFwiVGhlIG9wdGlvbiBhbHNvIGV4aXN0cyB0byBjcmVhdGUgYSBkaXJlY3RvcnkgYnkgcHJvdmlkaW5nICdta2RpcicgYW4gJ2Fic29sdXRlIHBhdGgnLCBsaWtlIHNvOiAnbWtkaXIgL2hvbWUvdXNlci9kb2N1bWVudHMvbmV3Rm9sZGVyJy4gVGhhdCBjb21tYW5kIHdvdWxkIGFsc28gY3JlYXRlIGEgZGlyZWN0b3J5IGNhbGxlZCAnbmV3Rm9sZGVyJyBpbiAnZG9jdW1lbnRzJy5cIixcbiAgICAgICAgICAgIGNvbW1hbmQ6IFwibWtkaXIgbmV3Rm9sZGVyXCIsXG4gICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIG5pbmU6IHtcbiAgICAgICAgICAgIHRpdGxlOiBcIkJhc2ljIENvbW1hbmRzOiBNYWtpbmcgRmlsZXMgYW5kIERpcmVjdG9yaWVzXCIsXG4gICAgICAgICAgICBzdWJzdGFnZTogXCI8c3BhbiBpZD0nc3Vic3RhZ2UnPjMuMjogdG91Y2g8L3NwYW4+XCIsXG4gICAgICAgICAgICBjb250ZW50OiBcIlNvIGhvdyBhYm91dCBjcmVhdGluZyBmaWxlcz8gVGhlIGNvbW1hbmQgJ3RvdWNoJyBjYW4gYmUgdXNlZCB0byBjcmVhdGUgYSBmaWxlIHdpdGggdGhlIHByb3ZpZGVkIG5hbWUuPGJyPlN1Ym1pdCB0aGUgY29tbWFuZCA8c3BhbiBpZD0nYWR2aWNlLWNvbW1hbmQnPnRvdWNoIG5ld0ZpbGU8L3NwYW4+JyB0byBjcmVhdGUgYSBmaWxlIGNhbGxlZCAnbmV3RmlsZScuXCIsXG4gICAgICAgICAgICBhZHZpY2U6IFwiQXMgd2l0aCAnbWtkaXInLCB0aGUgY29tbWFuZCAndG91Y2gnIGNhbiBhbHNvIHdvcmsgd2l0aCBhbiAnYWJzb2x1dGUgcGF0aCcsIHN1Y2ggYXMgJ3RvdWNoIC9ob21lL3VzZXIvZG9jdW1lbnRzL25ld0ZpbGUnLCBpbiB0aGlzIGNhc2UgdG8gY3JlYXRlIGEgZmlsZSBjYWxsZWQgJ25ld0ZpbGUnIGluIHRoZSBkaXJlY3RvcnkgJ2RvY3VtZW50cycuXCIsXG4gICAgICAgICAgICBjb21tYW5kOiBcInRvdWNoIG5ld0ZpbGVcIixcbiAgICAgICAgICAgIGNvbXBsZXRlZDogZmFsc2VcbiAgICAgICAgfSxcbiAgICB0ZW46IHtcbiAgICAgICAgICAgIHRpdGxlOiBcIlJldHVybiB0byB0aGUgV29ya2luZyBEaXJlY3RvcnlcIixcbiAgICAgICAgICAgIHN1YnN0YWdlOiBcIjxzcGFuIGlkPSdzdWJzdGFnZSc+NC4xOiBQYXRocyBJSTwvc3Bhbj5cIixcbiAgICAgICAgICAgIGNvbnRlbnQ6IFwiJ0Fic29sdXRlIHBhdGhzJyBhcmUgZ3JlYXQsIGJ1dCBzb3J0IG9mIHRpbWUgY29uc3VtaW5nLiBXZSBkb24ndCB3YW50IHRvIGJlIHR5cGluZyBpbiB0aGUgZW50aXJlICdwYXRoJyBhbGwgdGhlIHRpbWUsIGVzcGVjaWFsbHkgbm90IHdoZW4gd2UncmUgdGVuIGRpcmVjdG9yaWVzIGRlZXAgaW50byB0aGUgZmlsZXN5c3RlbS4gVGhpcyBpcyB3aGVyZSAncmVsYXRpdmUgcGF0aHMnIGFyZSB1c2VmdWwuIFJhdGhlciB0aGFuIHJlZmVycmluZyB0byBhICdmaWxlJyBjYWxsZWQgJ25ld0ZvbGRlcicgKHdoaWNoIHdlIGp1c3QgY3JlYXRlZCBpbiAnZG9jdW1lbnRzJykgYnkgdHlwaW5nIG91dCAnL2hvbWUvdXNlci9kb2N1bWVudHMvbmV3Rm9sZGVyJywgd2UgY2FuIGp1c3QgdHlwZSAnbmV3Rm9sZGVyJy48YnI+U3VibWl0IHRoZSBjb21tYW5kIDxzcGFuIGlkPSdhZHZpY2UtY29tbWFuZCc+Y2QgbmV3Rm9sZGVyPC9zcGFuPicgdG8gY2hhbmdlIG91ciB3b3JraW5nIGRpcmVjdG9yeSB0byAnbmV3Rm9sZGVyJy5cIixcbiAgICAgICAgICAgIGFkdmljZTogXCJcIixcbiAgICAgICAgICAgIGNvbW1hbmQ6IFwiY2QgbmV3Rm9sZGVyXCIsXG4gICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgZWxldmVuOiB7XG4gICAgICAgICAgICB0aXRsZTogXCJSZXR1cm4gdG8gdGhlIFdvcmtpbmcgRGlyZWN0b3J5XCIsXG4gICAgICAgICAgICBzdWJzdGFnZTogXCI8c3BhbiBpZD0nc3Vic3RhZ2UnPjQuMjogY2QgSUk8L3NwYW4+XCIsXG4gICAgICAgICAgICBjb250ZW50OiBcIlRoZXJlIHlvdSBoYXZlIGl0LiBXZSBqdXN0IGNoYW5nZWQgb3VyICd3b3JraW5nIGRpcmVjdG9yeScgdG8gJ25ld0ZvbGRlcicgaW4gMS8zIHRoZSBrZXlzdHJva2VzLCB0aGFua3MgdG8gJ3JlbGF0aXZlIHBhdGhzJy4gRmVlbCBmcmVlIHRvIGV4cGVyaW1lbnQuICdSZWxhdGl2ZScgb3IgJ2Fic29sdXRlJyBwYXRocywgdGhlIGNob2ljZSBpcyB5b3Vycy4gV2UncmUgZ29pbmcgdG8gY2hhbmdlIG91ciAnd29ya2luZyBkaXJlY3RvcnknIGJhY2sgdG8gJy9ob21lL3VzZXIvZG9jdW1lbnRzJyBpbiBhIGxvdCBsZXNzIGtleXN0cm9rZXMgYXMgd2VsbC4gJ2NkJyBub3Qgb25seSBhY2NlcHRzIHJlbGF0aXZlIHBhdGhzLCBidXQgYWxzbyBzb21lIHNob3J0Y3V0cywgbGlrZSAnLi4nLiAnY2QgLi4nIHdpbGwgY2hhbmdlIHRoZSAnd29ya2luZyBkaXJlY3RvcnknIHRvIG91ciBjdXJyZW50ICd3b3JraW5nIGRpcmVjdG9yeSdzJyBwYXJlbnQuPGJyPlN1Ym1pdCB0aGUgY29tbWFuZCA8c3BhbiBpZD0nYWR2aWNlLWNvbW1hbmQnPmNkIC4uPC9zcGFuPicgdG8gY2hhbmdlIG91ciB3b3JraW5nIGRpcmVjdG9yeSBiYWNrIHRvICdkb2N1bWVudHMnLlwiLFxuICAgICAgICAgICAgYWR2aWNlOiBcIlRoZSAncGFyZW50JyBvZiBhICdkaXJlY3RvcnknIGlzIHRoZSAnZGlyZWN0b3J5JyB0byB3aGljaCBpdCBiZWxvbmdzLiBleC4gdGhlICdwYXJlbnQnIG9mICdkb2N1bWVudHMnIGlzICd1c2VyJyAtLT4gJy9ob21lL3VzZXIodGhlIHBhcmVudCkvZG9jdW1lbnRzKHRoZSBjaGlsZCknXCIsXG4gICAgICAgICAgICBjb21tYW5kOiBcImNkIG5ld0ZvbGRlclwiLFxuICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRU5EIFJPQkVSVFxuXG5cblxuXG5cblxuICAgIH0sXG5cbiAgICBjdXJyZW50U3RhZ2U6IFwib25lXCIsXG4gICAgdGl0bGU6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhZ2UtdGl0bGVcIiksXG4gICAgc3Vic3RhZ2U6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RhZ2Utc3Vic3RhZ2VcIiksXG4gICAgY29udGVudDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGFnZS1jb250ZW50XCIpLFxuICAgIGFkdmljZTogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGFnZS1hZHZpY2VcIiksXG4gICAgY29tbWFuZDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGFnZS1jb21tYW5kXCIpLFxuXG4gICAgc3RhZ2VBcnJheUluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHR1dG9yaWFsLnN0YWdlcyk7XG4gICAgfSxcbiAgICBzdGFnZUFycmF5OiB1bmRlZmluZWQsIC8vIHdpbGwgaW5pdGlhbGl6ZSB0aGlzIGF0IGZpcnN0IHJ1blxuXG4gICAgc3dhcENvbnRlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHV0b3JpYWwudGl0bGUuaW5uZXJIVE1MID0gdHV0b3JpYWwuc3RhZ2VzW3R1dG9yaWFsLmN1cnJlbnRTdGFnZV0uc3Vic3RhZ2UgKyBcIiBcIiArIHR1dG9yaWFsLnN0YWdlc1t0dXRvcmlhbC5jdXJyZW50U3RhZ2VdLnRpdGxlO1xuICAgICAgICB0dXRvcmlhbC5jb250ZW50LmlubmVySFRNTCA9IHR1dG9yaWFsLnN0YWdlc1t0dXRvcmlhbC5jdXJyZW50U3RhZ2VdLmNvbnRlbnQ7XG4gICAgICAgIHR1dG9yaWFsLmFkdmljZS5pbm5lckhUTUwgPSB0dXRvcmlhbC5zdGFnZXNbdHV0b3JpYWwuY3VycmVudFN0YWdlXS5hZHZpY2U7XG4gICAgfSxcblxuICAgIGN1cnJlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YWdlQXJyYXkgPSB0dXRvcmlhbC5zdGFnZUFycmF5O1xuXG4gICAgICAgIGlmICggZ2V0SXRlbUZyb21Mb2NhbFN0b3JhZ2UoJ3R1dG9yaWFsJykgKSB7IHR1dG9yaWFsLmN1cnJlbnRTdGFnZSA9IGdldEl0ZW1Gcm9tTG9jYWxTdG9yYWdlKCd0dXRvcmlhbCcpOyB9XG5cbiAgICAgICAgY29uc29sZS5sb2coc3RhZ2VBcnJheSk7IC8vIFtcIm9uZVwiLCBcInR3b1wiXVxuICAgICAgICBjb25zb2xlLmxvZyh0dXRvcmlhbC5jdXJyZW50U3RhZ2UpOyAvLyBcIm9uZVwiXG4gICAgICAgIGNvbnNvbGUubG9nKHN0YWdlQXJyYXkuaW5kZXhPZih0dXRvcmlhbC5jdXJyZW50U3RhZ2UpKTsgLy8gMFxuICAgICAgICBcbiAgICAgICAgdmFyIGluZGV4ID0gc3RhZ2VBcnJheS5pbmRleE9mKHR1dG9yaWFsLmN1cnJlbnRTdGFnZSk7IC8vIDBcbiAgICAgICAgdHV0b3JpYWwuY3VycmVudFN0YWdlID0gc3RhZ2VBcnJheVtpbmRleF07IC8vIGluZGV4ID0gMCArIDEsIGN1cnJlbnRTdGFnZSBzZXQgdG8gXCJ0d29cIlxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2codHV0b3JpYWwuY3VycmVudFN0YWdlKTsgLy8gXCJ0d29cIlxuICAgICAgICBjb25zb2xlLmxvZyh0dXRvcmlhbC5zdGFnZXNbdHV0b3JpYWwuY3VycmVudFN0YWdlXS50aXRsZSk7XG5cbiAgICAgICAgdHV0b3JpYWwuc3dhcENvbnRlbnQoKTtcbiAgICB9LFxuICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBzdGFnZUFycmF5ID0gdHV0b3JpYWwuc3RhZ2VBcnJheTtcblxuICAgICAgICBjb25zb2xlLmxvZyhzdGFnZUFycmF5KTsgLy8gW1wib25lXCIsIFwidHdvXCJdXG4gICAgICAgIGNvbnNvbGUubG9nKHR1dG9yaWFsLmN1cnJlbnRTdGFnZSk7IC8vIFwib25lXCJcbiAgICAgICAgY29uc29sZS5sb2coc3RhZ2VBcnJheS5pbmRleE9mKHR1dG9yaWFsLmN1cnJlbnRTdGFnZSkpOyAvLyAwXG4gICAgICAgIFxuICAgICAgICB2YXIgaW5kZXggPSBzdGFnZUFycmF5LmluZGV4T2YodHV0b3JpYWwuY3VycmVudFN0YWdlKTsgLy8gMFxuICAgICAgICB0dXRvcmlhbC5zdGFnZXNbdHV0b3JpYWwuY3VycmVudFN0YWdlXS5jb21wbGV0ZWQgPSB0cnVlOyAvLyBzdGFnZSBvbmUgY29tcGxldGVkLCBzZXQgaXRzIGNvbXBsZXRlZCBhdHRyaWJ1dGUgdG8gdHJ1ZVxuICAgICAgICB0dXRvcmlhbC5jdXJyZW50U3RhZ2UgPSBzdGFnZUFycmF5W2luZGV4ICsgMV07IC8vIGluZGV4ID0gMCArIDEsIGN1cnJlbnRTdGFnZSBzZXQgdG8gXCJ0d29cIlxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2codHV0b3JpYWwuY3VycmVudFN0YWdlKTsgLy8gXCJ0d29cIlxuICAgICAgICBjb25zb2xlLmxvZyh0dXRvcmlhbC5zdGFnZXNbdHV0b3JpYWwuY3VycmVudFN0YWdlXS50aXRsZSk7XG4gICAgICAgIFxuICAgICAgICB0dXRvcmlhbC5zd2FwQ29udGVudCgpO1xuXG4gICAgICAgIHRlcm1pbmFsLnNhdmUudHV0b3JpYWwoKTtcbiAgICB9LFxuICAgIFxuICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgc3RhZ2VBcnJheSA9IHR1dG9yaWFsLnN0YWdlQXJyYXk7XG4gICAgICAgIFxuICAgICAgICB2YXIgaW5kZXggPSBzdGFnZUFycmF5LmluZGV4T2YodHV0b3JpYWwuY3VycmVudFN0YWdlKTtcbiAgICAgICAgdHV0b3JpYWwuY3VycmVudFN0YWdlID0gc3RhZ2VBcnJheVtpbmRleCAtIDFdO1xuXG4gICAgICAgIHR1dG9yaWFsLnN3YXBDb250ZW50KCk7XG5cbiAgICAgICAgdGVybWluYWwuc2F2ZS50dXRvcmlhbCgpO1xuICAgIH1cbn1cbiIsIi8vIExPQ0FMIFZBUlNcbnZhciBjb21tYW5kcyxcbiAgICBwd2QsXG4gICAgaW5wdXQsXG4gICAgaGlzdGluZGV4LFxuICAgIGNvdW50LFxuICAgIHRlcm10aGVtZSxcbiAgICBjb21tYW5kQXJncyxcbiAgICBvdXRwdXRIVE1MLFxuICAgIHRlcm1pbmFsLFxuICAgIGhlbHBsaXN0O1xuXG5cblxuLy8gaGVscExpc3QgbG9hZGVkXG4vLyB0ZXJtaW5hbCBsb2FkZWRcbi8vIGZ1bmNzIGxvYWRlZFxuLy8gY2hlY2tDb21tYW5kIGxvYWRlZFxuLy8gdHV0b3JpYWwgbG9hZGVkXG5cblxuXG4vLyBTRVRUSU5HIFZBUklBQkxFU1xuXG5jb21tYW5kcyA9IE9iamVjdC5rZXlzKGhlbHBMaXN0KTtcbnB3ZCA9IFtcIn5cIiwgdGVybWluYWwuZnMuaG9tZS51c2VyLCBcIi9ob21lL3VzZXJcIl07XG5pbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5wdXRcIik7XG5oaXN0aW5kZXggPSAwO1xuY291bnQgPSAwO1xudGVybXRoZW1lID0gdGVybWluYWwudGVybXRoZW1lc1t0ZXJtaW5hbC5zZXR0aW5ncy50aGVtZURlZmF1bHRdO1xuXG5cbi8vIExPQUQgVVNFUiBBTkQgRlMgU0VUVElOR1NcbnRlcm1pbmFsLmluaXQoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=